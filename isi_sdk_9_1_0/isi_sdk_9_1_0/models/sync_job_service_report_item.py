# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SyncJobServiceReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'str',
        'directory': 'str',
        'end_time': 'int',
        'error_msg': 'list[str]',
        'filter': 'list[str]',
        'handlers_failed': 'int',
        'handlers_skipped': 'int',
        'handlers_transferred': 'int',
        'records_failed': 'int',
        'records_skipped': 'int',
        'records_transferred': 'int',
        'start_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'component': 'component',
        'directory': 'directory',
        'end_time': 'end_time',
        'error_msg': 'error_msg',
        'filter': 'filter',
        'handlers_failed': 'handlers_failed',
        'handlers_skipped': 'handlers_skipped',
        'handlers_transferred': 'handlers_transferred',
        'records_failed': 'records_failed',
        'records_skipped': 'records_skipped',
        'records_transferred': 'records_transferred',
        'start_time': 'start_time',
        'status': 'status'
    }

    def __init__(self, component=None, directory=None, end_time=None, error_msg=None, filter=None, handlers_failed=None, handlers_skipped=None, handlers_transferred=None, records_failed=None, records_skipped=None, records_transferred=None, start_time=None, status=None):  # noqa: E501
        """SyncJobServiceReportItem - a model defined in Swagger"""  # noqa: E501

        self._component = None
        self._directory = None
        self._end_time = None
        self._error_msg = None
        self._filter = None
        self._handlers_failed = None
        self._handlers_skipped = None
        self._handlers_transferred = None
        self._records_failed = None
        self._records_skipped = None
        self._records_transferred = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if component is not None:
            self.component = component
        if directory is not None:
            self.directory = directory
        if end_time is not None:
            self.end_time = end_time
        if error_msg is not None:
            self.error_msg = error_msg
        if filter is not None:
            self.filter = filter
        if handlers_failed is not None:
            self.handlers_failed = handlers_failed
        if handlers_skipped is not None:
            self.handlers_skipped = handlers_skipped
        if handlers_transferred is not None:
            self.handlers_transferred = handlers_transferred
        if records_failed is not None:
            self.records_failed = records_failed
        if records_skipped is not None:
            self.records_skipped = records_skipped
        if records_transferred is not None:
            self.records_transferred = records_transferred
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status

    @property
    def component(self):
        """Gets the component of this SyncJobServiceReportItem.  # noqa: E501

        The component that was processed.  # noqa: E501

        :return: The component of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this SyncJobServiceReportItem.

        The component that was processed.  # noqa: E501

        :param component: The component of this SyncJobServiceReportItem.  # noqa: E501
        :type: str
        """
        if component is not None and len(component) > 255:
            raise ValueError("Invalid value for `component`, length must be less than or equal to `255`")  # noqa: E501
        if component is not None and len(component) < 0:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `0`")  # noqa: E501

        self._component = component

    @property
    def directory(self):
        """Gets the directory of this SyncJobServiceReportItem.  # noqa: E501

        The directory of the service export.  # noqa: E501

        :return: The directory of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this SyncJobServiceReportItem.

        The directory of the service export.  # noqa: E501

        :param directory: The directory of this SyncJobServiceReportItem.  # noqa: E501
        :type: str
        """
        if directory is not None and len(directory) > 255:
            raise ValueError("Invalid value for `directory`, length must be less than or equal to `255`")  # noqa: E501
        if directory is not None and len(directory) < 0:
            raise ValueError("Invalid value for `directory`, length must be greater than or equal to `0`")  # noqa: E501

        self._directory = directory

    @property
    def end_time(self):
        """Gets the end_time of this SyncJobServiceReportItem.  # noqa: E501

        The time the job ended this component.  # noqa: E501

        :return: The end_time of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SyncJobServiceReportItem.

        The time the job ended this component.  # noqa: E501

        :param end_time: The end_time of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if end_time is not None and end_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if end_time is not None and end_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def error_msg(self):
        """Gets the error_msg of this SyncJobServiceReportItem.  # noqa: E501

        A list of error messages generated while exporting components.  # noqa: E501

        :return: The error_msg of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this SyncJobServiceReportItem.

        A list of error messages generated while exporting components.  # noqa: E501

        :param error_msg: The error_msg of this SyncJobServiceReportItem.  # noqa: E501
        :type: list[str]
        """

        self._error_msg = error_msg

    @property
    def filter(self):
        """Gets the filter of this SyncJobServiceReportItem.  # noqa: E501

        A list of path-based filters for exporting components.  # noqa: E501

        :return: The filter of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SyncJobServiceReportItem.

        A list of path-based filters for exporting components.  # noqa: E501

        :param filter: The filter of this SyncJobServiceReportItem.  # noqa: E501
        :type: list[str]
        """

        self._filter = filter

    @property
    def handlers_failed(self):
        """Gets the handlers_failed of this SyncJobServiceReportItem.  # noqa: E501

        The number of handlers failed during export.  # noqa: E501

        :return: The handlers_failed of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._handlers_failed

    @handlers_failed.setter
    def handlers_failed(self, handlers_failed):
        """Sets the handlers_failed of this SyncJobServiceReportItem.

        The number of handlers failed during export.  # noqa: E501

        :param handlers_failed: The handlers_failed of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if handlers_failed is not None and handlers_failed > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `handlers_failed`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if handlers_failed is not None and handlers_failed < 0:  # noqa: E501
            raise ValueError("Invalid value for `handlers_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._handlers_failed = handlers_failed

    @property
    def handlers_skipped(self):
        """Gets the handlers_skipped of this SyncJobServiceReportItem.  # noqa: E501

        The number of handlers skipped during export.  # noqa: E501

        :return: The handlers_skipped of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._handlers_skipped

    @handlers_skipped.setter
    def handlers_skipped(self, handlers_skipped):
        """Sets the handlers_skipped of this SyncJobServiceReportItem.

        The number of handlers skipped during export.  # noqa: E501

        :param handlers_skipped: The handlers_skipped of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if handlers_skipped is not None and handlers_skipped > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `handlers_skipped`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if handlers_skipped is not None and handlers_skipped < 0:  # noqa: E501
            raise ValueError("Invalid value for `handlers_skipped`, must be a value greater than or equal to `0`")  # noqa: E501

        self._handlers_skipped = handlers_skipped

    @property
    def handlers_transferred(self):
        """Gets the handlers_transferred of this SyncJobServiceReportItem.  # noqa: E501

        The number of handlers exported.  # noqa: E501

        :return: The handlers_transferred of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._handlers_transferred

    @handlers_transferred.setter
    def handlers_transferred(self, handlers_transferred):
        """Sets the handlers_transferred of this SyncJobServiceReportItem.

        The number of handlers exported.  # noqa: E501

        :param handlers_transferred: The handlers_transferred of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if handlers_transferred is not None and handlers_transferred > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `handlers_transferred`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if handlers_transferred is not None and handlers_transferred < 0:  # noqa: E501
            raise ValueError("Invalid value for `handlers_transferred`, must be a value greater than or equal to `0`")  # noqa: E501

        self._handlers_transferred = handlers_transferred

    @property
    def records_failed(self):
        """Gets the records_failed of this SyncJobServiceReportItem.  # noqa: E501

        The number of records failed during export.  # noqa: E501

        :return: The records_failed of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._records_failed

    @records_failed.setter
    def records_failed(self, records_failed):
        """Sets the records_failed of this SyncJobServiceReportItem.

        The number of records failed during export.  # noqa: E501

        :param records_failed: The records_failed of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if records_failed is not None and records_failed > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `records_failed`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if records_failed is not None and records_failed < 0:  # noqa: E501
            raise ValueError("Invalid value for `records_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._records_failed = records_failed

    @property
    def records_skipped(self):
        """Gets the records_skipped of this SyncJobServiceReportItem.  # noqa: E501

        The number of records skipped during export.  # noqa: E501

        :return: The records_skipped of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._records_skipped

    @records_skipped.setter
    def records_skipped(self, records_skipped):
        """Sets the records_skipped of this SyncJobServiceReportItem.

        The number of records skipped during export.  # noqa: E501

        :param records_skipped: The records_skipped of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if records_skipped is not None and records_skipped > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `records_skipped`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if records_skipped is not None and records_skipped < 0:  # noqa: E501
            raise ValueError("Invalid value for `records_skipped`, must be a value greater than or equal to `0`")  # noqa: E501

        self._records_skipped = records_skipped

    @property
    def records_transferred(self):
        """Gets the records_transferred of this SyncJobServiceReportItem.  # noqa: E501

        The number of records exported.  # noqa: E501

        :return: The records_transferred of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._records_transferred

    @records_transferred.setter
    def records_transferred(self, records_transferred):
        """Sets the records_transferred of this SyncJobServiceReportItem.

        The number of records exported.  # noqa: E501

        :param records_transferred: The records_transferred of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if records_transferred is not None and records_transferred > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `records_transferred`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if records_transferred is not None and records_transferred < 0:  # noqa: E501
            raise ValueError("Invalid value for `records_transferred`, must be a value greater than or equal to `0`")  # noqa: E501

        self._records_transferred = records_transferred

    @property
    def start_time(self):
        """Gets the start_time of this SyncJobServiceReportItem.  # noqa: E501

        The time the job began this component.  # noqa: E501

        :return: The start_time of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SyncJobServiceReportItem.

        The time the job began this component.  # noqa: E501

        :param start_time: The start_time of this SyncJobServiceReportItem.  # noqa: E501
        :type: int
        """
        if start_time is not None and start_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if start_time is not None and start_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SyncJobServiceReportItem.  # noqa: E501

        The current status of export for this component.  # noqa: E501

        :return: The status of this SyncJobServiceReportItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncJobServiceReportItem.

        The current status of export for this component.  # noqa: E501

        :param status: The status of this SyncJobServiceReportItem.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncJobServiceReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
