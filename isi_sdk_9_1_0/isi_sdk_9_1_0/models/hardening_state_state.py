# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HardeningStateState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issues_file': 'str',
        'message': 'str',
        'state': 'str'
    }

    attribute_map = {
        'issues_file': 'issues_file',
        'message': 'message',
        'state': 'state'
    }

    def __init__(self, issues_file=None, message=None, state=None):  # noqa: E501
        """HardeningStateState - a model defined in Swagger"""  # noqa: E501

        self._issues_file = None
        self._message = None
        self._state = None
        self.discriminator = None

        if issues_file is not None:
            self.issues_file = issues_file
        if message is not None:
            self.message = message
        if state is not None:
            self.state = state

    @property
    def issues_file(self):
        """Gets the issues_file of this HardeningStateState.  # noqa: E501

        Full path name of issues file, or null if no issues file is configured. This file contains all issues found when the cluster configuration is checked against expected configuration.  # noqa: E501

        :return: The issues_file of this HardeningStateState.  # noqa: E501
        :rtype: str
        """
        return self._issues_file

    @issues_file.setter
    def issues_file(self, issues_file):
        """Sets the issues_file of this HardeningStateState.

        Full path name of issues file, or null if no issues file is configured. This file contains all issues found when the cluster configuration is checked against expected configuration.  # noqa: E501

        :param issues_file: The issues_file of this HardeningStateState.  # noqa: E501
        :type: str
        """

        self._issues_file = issues_file

    @property
    def message(self):
        """Gets the message of this HardeningStateState.  # noqa: E501

        This contains more information and details about the operation state.  # noqa: E501

        :return: The message of this HardeningStateState.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HardeningStateState.

        This contains more information and details about the operation state.  # noqa: E501

        :param message: The message of this HardeningStateState.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def state(self):
        """Gets the state of this HardeningStateState.  # noqa: E501

        The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.  # noqa: E501

        :return: The state of this HardeningStateState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HardeningStateState.

        The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.  # noqa: E501

        :param state: The state of this HardeningStateState.  # noqa: E501
        :type: str
        """
        allowed_values = ["Disabled", "Checking_Before_Apply", "Issues_Found_Before_Apply", "Applying", "Enabled", "Checking_Before_Revert", "Issues_Found_Before_Revert", "Reverting", "Failed", "Resolving", "Issues_Resolved", "No_Issues_Found", "Resolved_failed", "Issues_Found_In_Report", "No_Issues_Found_In_Report", "Other"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningStateState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
