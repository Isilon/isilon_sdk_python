# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SedMigrateItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'retry': 'bool',
        'to_server': 'bool'
    }

    attribute_map = {
        'retry': 'retry',
        'to_server': 'to_server'
    }

    def __init__(self, retry=None, to_server=None):  # noqa: E501
        """SedMigrateItem - a model defined in Swagger"""  # noqa: E501

        self._retry = None
        self._to_server = None
        self.discriminator = None

        if retry is not None:
            self.retry = retry
        if to_server is not None:
            self.to_server = to_server

    @property
    def retry(self):
        """Gets the retry of this SedMigrateItem.  # noqa: E501

        Set to true to retry KMIP migration in the previous direction for errored nodes. e.g. if error occurred after migrate with 'to_server=true', using 'sed/migrate' handler with 'retry=true' will retry migration to server. Similarly, if previous migration was 'to_server=false', retry will try to restore back to local. Also note that, whenever a 'retry' arg is provided to the handler, regardless of true or false, 'to_server' arg will be ignored. i.e. if using the handler with ('retry':true(or false), 'to_server': true), the 'to_server' arg will be ignored and have no effects.  # noqa: E501

        :return: The retry of this SedMigrateItem.  # noqa: E501
        :rtype: bool
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this SedMigrateItem.

        Set to true to retry KMIP migration in the previous direction for errored nodes. e.g. if error occurred after migrate with 'to_server=true', using 'sed/migrate' handler with 'retry=true' will retry migration to server. Similarly, if previous migration was 'to_server=false', retry will try to restore back to local. Also note that, whenever a 'retry' arg is provided to the handler, regardless of true or false, 'to_server' arg will be ignored. i.e. if using the handler with ('retry':true(or false), 'to_server': true), the 'to_server' arg will be ignored and have no effects.  # noqa: E501

        :param retry: The retry of this SedMigrateItem.  # noqa: E501
        :type: bool
        """

        self._retry = retry

    @property
    def to_server(self):
        """Gets the to_server of this SedMigrateItem.  # noqa: E501

        Set to true to indicate migrating all keys to server. Set to false to indicate restoring all keys back to local.  # noqa: E501

        :return: The to_server of this SedMigrateItem.  # noqa: E501
        :rtype: bool
        """
        return self._to_server

    @to_server.setter
    def to_server(self, to_server):
        """Sets the to_server of this SedMigrateItem.

        Set to true to indicate migrating all keys to server. Set to false to indicate restoring all keys back to local.  # noqa: E501

        :param to_server: The to_server of this SedMigrateItem.  # noqa: E501
        :type: bool
        """

        self._to_server = to_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SedMigrateItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
