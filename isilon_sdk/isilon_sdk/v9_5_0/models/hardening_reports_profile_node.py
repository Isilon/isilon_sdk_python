# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.hardening_reports_profile_cluster_wide_rule import HardeningReportsProfileClusterWideRule  # noqa: F401,E501


class HardeningReportsProfileNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lnn': 'int',
        'name': 'str',
        'rules': 'list[HardeningReportsProfileClusterWideRule]',
        'status': 'str',
        'time': 'int'
    }

    attribute_map = {
        'lnn': 'lnn',
        'name': 'name',
        'rules': 'rules',
        'status': 'status',
        'time': 'time'
    }

    def __init__(self, lnn=None, name=None, rules=None, status=None, time=None):  # noqa: E501
        """HardeningReportsProfileNode - a model defined in Swagger"""  # noqa: E501

        self._lnn = None
        self._name = None
        self._rules = None
        self._status = None
        self._time = None
        self.discriminator = None

        if lnn is not None:
            self.lnn = lnn
        if name is not None:
            self.name = name
        if rules is not None:
            self.rules = rules
        if status is not None:
            self.status = status
        if time is not None:
            self.time = time

    @property
    def lnn(self):
        """Gets the lnn of this HardeningReportsProfileNode.  # noqa: E501


        :return: The lnn of this HardeningReportsProfileNode.  # noqa: E501
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """Sets the lnn of this HardeningReportsProfileNode.


        :param lnn: The lnn of this HardeningReportsProfileNode.  # noqa: E501
        :type: int
        """

        self._lnn = lnn

    @property
    def name(self):
        """Gets the name of this HardeningReportsProfileNode.  # noqa: E501


        :return: The name of this HardeningReportsProfileNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HardeningReportsProfileNode.


        :param name: The name of this HardeningReportsProfileNode.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this HardeningReportsProfileNode.  # noqa: E501

        List of rules in the report.  # noqa: E501

        :return: The rules of this HardeningReportsProfileNode.  # noqa: E501
        :rtype: list[HardeningReportsProfileClusterWideRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this HardeningReportsProfileNode.

        List of rules in the report.  # noqa: E501

        :param rules: The rules of this HardeningReportsProfileNode.  # noqa: E501
        :type: list[HardeningReportsProfileClusterWideRule]
        """

        self._rules = rules

    @property
    def status(self):
        """Gets the status of this HardeningReportsProfileNode.  # noqa: E501


        :return: The status of this HardeningReportsProfileNode.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HardeningReportsProfileNode.


        :param status: The status of this HardeningReportsProfileNode.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    @property
    def time(self):
        """Gets the time of this HardeningReportsProfileNode.  # noqa: E501


        :return: The time of this HardeningReportsProfileNode.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this HardeningReportsProfileNode.


        :param time: The time of this HardeningReportsProfileNode.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningReportsProfileNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
