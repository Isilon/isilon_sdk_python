# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.supportassist_settings_connection_gateway_endpoint import SupportassistSettingsConnectionGatewayEndpoint  # noqa: F401,E501


class SupportassistSettingsConnectionExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway_endpoints': 'list[SupportassistSettingsConnectionGatewayEndpoint]',
        'mode': 'str',
        'network_pools': 'list[str]'
    }

    attribute_map = {
        'gateway_endpoints': 'gateway_endpoints',
        'mode': 'mode',
        'network_pools': 'network_pools'
    }

    def __init__(self, gateway_endpoints=None, mode=None, network_pools=None):  # noqa: E501
        """SupportassistSettingsConnectionExtended - a model defined in Swagger"""  # noqa: E501

        self._gateway_endpoints = None
        self._mode = None
        self._network_pools = None
        self.discriminator = None

        if gateway_endpoints is not None:
            self.gateway_endpoints = gateway_endpoints
        if mode is not None:
            self.mode = mode
        if network_pools is not None:
            self.network_pools = network_pools

    @property
    def gateway_endpoints(self):
        """Gets the gateway_endpoints of this SupportassistSettingsConnectionExtended.  # noqa: E501


        :return: The gateway_endpoints of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :rtype: list[SupportassistSettingsConnectionGatewayEndpoint]
        """
        return self._gateway_endpoints

    @gateway_endpoints.setter
    def gateway_endpoints(self, gateway_endpoints):
        """Sets the gateway_endpoints of this SupportassistSettingsConnectionExtended.


        :param gateway_endpoints: The gateway_endpoints of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :type: list[SupportassistSettingsConnectionGatewayEndpoint]
        """

        self._gateway_endpoints = gateway_endpoints

    @property
    def mode(self):
        """Gets the mode of this SupportassistSettingsConnectionExtended.  # noqa: E501

        Connection Mode for SupportAssist: can be direct or via gateway  # noqa: E501

        :return: The mode of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SupportassistSettingsConnectionExtended.

        Connection Mode for SupportAssist: can be direct or via gateway  # noqa: E501

        :param mode: The mode of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["direct", "gateway"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def network_pools(self):
        """Gets the network_pools of this SupportassistSettingsConnectionExtended.  # noqa: E501

        Network pools for gateway use  # noqa: E501

        :return: The network_pools of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_pools

    @network_pools.setter
    def network_pools(self, network_pools):
        """Sets the network_pools of this SupportassistSettingsConnectionExtended.

        Network pools for gateway use  # noqa: E501

        :param network_pools: The network_pools of this SupportassistSettingsConnectionExtended.  # noqa: E501
        :type: list[str]
        """

        self._network_pools = network_pools

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistSettingsConnectionExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
