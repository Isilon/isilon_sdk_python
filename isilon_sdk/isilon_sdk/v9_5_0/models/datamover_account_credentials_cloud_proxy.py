# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DatamoverAccountCredentialsCloudProxy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proxy_password': 'str',
        'proxy_port': 'int',
        'proxy_type': 'str',
        'proxy_uri': 'str',
        'proxy_username': 'str'
    }

    attribute_map = {
        'proxy_password': 'proxy_password',
        'proxy_port': 'proxy_port',
        'proxy_type': 'proxy_type',
        'proxy_uri': 'proxy_uri',
        'proxy_username': 'proxy_username'
    }

    def __init__(self, proxy_password=None, proxy_port=None, proxy_type=None, proxy_uri=None, proxy_username=None):  # noqa: E501
        """DatamoverAccountCredentialsCloudProxy - a model defined in Swagger"""  # noqa: E501

        self._proxy_password = None
        self._proxy_port = None
        self._proxy_type = None
        self._proxy_uri = None
        self._proxy_username = None
        self.discriminator = None

        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if proxy_type is not None:
            self.proxy_type = proxy_type
        if proxy_uri is not None:
            self.proxy_uri = proxy_uri
        if proxy_username is not None:
            self.proxy_username = proxy_username

    @property
    def proxy_password(self):
        """Gets the proxy_password of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501

        Proxy password  # noqa: E501

        :return: The proxy_password of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this DatamoverAccountCredentialsCloudProxy.

        Proxy password  # noqa: E501

        :param proxy_password: The proxy_password of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :type: str
        """
        if proxy_password is not None and len(proxy_password) > 255:
            raise ValueError("Invalid value for `proxy_password`, length must be less than or equal to `255`")  # noqa: E501
        if proxy_password is not None and len(proxy_password) < 1:
            raise ValueError("Invalid value for `proxy_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._proxy_password = proxy_password

    @property
    def proxy_port(self):
        """Gets the proxy_port of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501

        Proxy port  # noqa: E501

        :return: The proxy_port of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this DatamoverAccountCredentialsCloudProxy.

        Proxy port  # noqa: E501

        :param proxy_port: The proxy_port of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :type: int
        """
        if proxy_port is not None and proxy_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `proxy_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if proxy_port is not None and proxy_port < 1024:  # noqa: E501
            raise ValueError("Invalid value for `proxy_port`, must be a value greater than or equal to `1024`")  # noqa: E501

        self._proxy_port = proxy_port

    @property
    def proxy_type(self):
        """Gets the proxy_type of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501

        Proxy type  # noqa: E501

        :return: The proxy_type of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """Sets the proxy_type of this DatamoverAccountCredentialsCloudProxy.

        Proxy type  # noqa: E501

        :param proxy_type: The proxy_type of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["SOCKS_4", "SOCKS_5", "HTTP"]  # noqa: E501
        if proxy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(proxy_type, allowed_values)
            )

        self._proxy_type = proxy_type

    @property
    def proxy_uri(self):
        """Gets the proxy_uri of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501

        Proxy uri  # noqa: E501

        :return: The proxy_uri of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_uri

    @proxy_uri.setter
    def proxy_uri(self, proxy_uri):
        """Sets the proxy_uri of this DatamoverAccountCredentialsCloudProxy.

        Proxy uri  # noqa: E501

        :param proxy_uri: The proxy_uri of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :type: str
        """
        if proxy_uri is not None and len(proxy_uri) > 2048:
            raise ValueError("Invalid value for `proxy_uri`, length must be less than or equal to `2048`")  # noqa: E501
        if proxy_uri is not None and len(proxy_uri) < 1:
            raise ValueError("Invalid value for `proxy_uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._proxy_uri = proxy_uri

    @property
    def proxy_username(self):
        """Gets the proxy_username of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501

        Proxy username  # noqa: E501

        :return: The proxy_username of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_username

    @proxy_username.setter
    def proxy_username(self, proxy_username):
        """Sets the proxy_username of this DatamoverAccountCredentialsCloudProxy.

        Proxy username  # noqa: E501

        :param proxy_username: The proxy_username of this DatamoverAccountCredentialsCloudProxy.  # noqa: E501
        :type: str
        """
        if proxy_username is not None and len(proxy_username) > 255:
            raise ValueError("Invalid value for `proxy_username`, length must be less than or equal to `255`")  # noqa: E501
        if proxy_username is not None and len(proxy_username) < 1:
            raise ValueError("Invalid value for `proxy_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._proxy_username = proxy_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverAccountCredentialsCloudProxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
