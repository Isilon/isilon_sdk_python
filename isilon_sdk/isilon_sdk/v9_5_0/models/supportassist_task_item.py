# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.supportassist_task_item_task_params import SupportassistTaskItemTaskParams  # noqa: F401,E501


class SupportassistTaskItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'task_params': 'SupportassistTaskItemTaskParams'
    }

    attribute_map = {
        'source': 'source',
        'task_params': 'task_params'
    }

    def __init__(self, source=None, task_params=None):  # noqa: E501
        """SupportassistTaskItem - a model defined in Swagger"""  # noqa: E501

        self._source = None
        self._task_params = None
        self.discriminator = None

        self.source = source
        if task_params is not None:
            self.task_params = task_params

    @property
    def source(self):
        """Gets the source of this SupportassistTaskItem.  # noqa: E501


        :return: The source of this SupportassistTaskItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SupportassistTaskItem.


        :param source: The source of this SupportassistTaskItem.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["LOG"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def task_params(self):
        """Gets the task_params of this SupportassistTaskItem.  # noqa: E501

          # noqa: E501

        :return: The task_params of this SupportassistTaskItem.  # noqa: E501
        :rtype: SupportassistTaskItemTaskParams
        """
        return self._task_params

    @task_params.setter
    def task_params(self, task_params):
        """Sets the task_params of this SupportassistTaskItem.

          # noqa: E501

        :param task_params: The task_params of this SupportassistTaskItem.  # noqa: E501
        :type: SupportassistTaskItemTaskParams
        """

        self._task_params = task_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistTaskItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
