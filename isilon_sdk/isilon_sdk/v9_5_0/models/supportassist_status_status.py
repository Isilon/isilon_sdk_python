# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistStatusStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hardware_key_present': 'bool',
        'provisioned': 'bool',
        'srs_disabled': 'bool',
        'supportassist_connected': 'bool',
        'supportassist_dismissed': 'bool',
        'supportassist_enabled': 'bool',
        'swid': 'str',
        'ui_state': 'str'
    }

    attribute_map = {
        'hardware_key_present': 'hardware_key_present',
        'provisioned': 'provisioned',
        'srs_disabled': 'srs_disabled',
        'supportassist_connected': 'supportassist_connected',
        'supportassist_dismissed': 'supportassist_dismissed',
        'supportassist_enabled': 'supportassist_enabled',
        'swid': 'swid',
        'ui_state': 'ui_state'
    }

    def __init__(self, hardware_key_present=None, provisioned=None, srs_disabled=None, supportassist_connected=None, supportassist_dismissed=None, supportassist_enabled=None, swid=None, ui_state=None):  # noqa: E501
        """SupportassistStatusStatus - a model defined in Swagger"""  # noqa: E501

        self._hardware_key_present = None
        self._provisioned = None
        self._srs_disabled = None
        self._supportassist_connected = None
        self._supportassist_dismissed = None
        self._supportassist_enabled = None
        self._swid = None
        self._ui_state = None
        self.discriminator = None

        self.hardware_key_present = hardware_key_present
        self.provisioned = provisioned
        self.srs_disabled = srs_disabled
        self.supportassist_connected = supportassist_connected
        self.supportassist_dismissed = supportassist_dismissed
        self.supportassist_enabled = supportassist_enabled
        self.swid = swid
        self.ui_state = ui_state

    @property
    def hardware_key_present(self):
        """Gets the hardware_key_present of this SupportassistStatusStatus.  # noqa: E501

        Whether Hardware key is present  # noqa: E501

        :return: The hardware_key_present of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._hardware_key_present

    @hardware_key_present.setter
    def hardware_key_present(self, hardware_key_present):
        """Sets the hardware_key_present of this SupportassistStatusStatus.

        Whether Hardware key is present  # noqa: E501

        :param hardware_key_present: The hardware_key_present of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if hardware_key_present is None:
            raise ValueError("Invalid value for `hardware_key_present`, must not be `None`")  # noqa: E501

        self._hardware_key_present = hardware_key_present

    @property
    def provisioned(self):
        """Gets the provisioned of this SupportassistStatusStatus.  # noqa: E501

        True indicates SupportAssist provisioning is done  # noqa: E501

        :return: The provisioned of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this SupportassistStatusStatus.

        True indicates SupportAssist provisioning is done  # noqa: E501

        :param provisioned: The provisioned of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if provisioned is None:
            raise ValueError("Invalid value for `provisioned`, must not be `None`")  # noqa: E501

        self._provisioned = provisioned

    @property
    def srs_disabled(self):
        """Gets the srs_disabled of this SupportassistStatusStatus.  # noqa: E501

        False indicates Remote Support is disabled  # noqa: E501

        :return: The srs_disabled of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._srs_disabled

    @srs_disabled.setter
    def srs_disabled(self, srs_disabled):
        """Sets the srs_disabled of this SupportassistStatusStatus.

        False indicates Remote Support is disabled  # noqa: E501

        :param srs_disabled: The srs_disabled of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if srs_disabled is None:
            raise ValueError("Invalid value for `srs_disabled`, must not be `None`")  # noqa: E501

        self._srs_disabled = srs_disabled

    @property
    def supportassist_connected(self):
        """Gets the supportassist_connected of this SupportassistStatusStatus.  # noqa: E501

        Whether SupportAssist is connected to backend  # noqa: E501

        :return: The supportassist_connected of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._supportassist_connected

    @supportassist_connected.setter
    def supportassist_connected(self, supportassist_connected):
        """Sets the supportassist_connected of this SupportassistStatusStatus.

        Whether SupportAssist is connected to backend  # noqa: E501

        :param supportassist_connected: The supportassist_connected of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if supportassist_connected is None:
            raise ValueError("Invalid value for `supportassist_connected`, must not be `None`")  # noqa: E501

        self._supportassist_connected = supportassist_connected

    @property
    def supportassist_dismissed(self):
        """Gets the supportassist_dismissed of this SupportassistStatusStatus.  # noqa: E501

        Whether SupportAssist hint should be dismissed  # noqa: E501

        :return: The supportassist_dismissed of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._supportassist_dismissed

    @supportassist_dismissed.setter
    def supportassist_dismissed(self, supportassist_dismissed):
        """Sets the supportassist_dismissed of this SupportassistStatusStatus.

        Whether SupportAssist hint should be dismissed  # noqa: E501

        :param supportassist_dismissed: The supportassist_dismissed of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if supportassist_dismissed is None:
            raise ValueError("Invalid value for `supportassist_dismissed`, must not be `None`")  # noqa: E501

        self._supportassist_dismissed = supportassist_dismissed

    @property
    def supportassist_enabled(self):
        """Gets the supportassist_enabled of this SupportassistStatusStatus.  # noqa: E501

        Whether SupportAssist is enabled  # noqa: E501

        :return: The supportassist_enabled of this SupportassistStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._supportassist_enabled

    @supportassist_enabled.setter
    def supportassist_enabled(self, supportassist_enabled):
        """Sets the supportassist_enabled of this SupportassistStatusStatus.

        Whether SupportAssist is enabled  # noqa: E501

        :param supportassist_enabled: The supportassist_enabled of this SupportassistStatusStatus.  # noqa: E501
        :type: bool
        """
        if supportassist_enabled is None:
            raise ValueError("Invalid value for `supportassist_enabled`, must not be `None`")  # noqa: E501

        self._supportassist_enabled = supportassist_enabled

    @property
    def swid(self):
        """Gets the swid of this SupportassistStatusStatus.  # noqa: E501

        The software ID used by SupportAssist  # noqa: E501

        :return: The swid of this SupportassistStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._swid

    @swid.setter
    def swid(self, swid):
        """Sets the swid of this SupportassistStatusStatus.

        The software ID used by SupportAssist  # noqa: E501

        :param swid: The swid of this SupportassistStatusStatus.  # noqa: E501
        :type: str
        """
        if swid is None:
            raise ValueError("Invalid value for `swid`, must not be `None`")  # noqa: E501
        if swid is not None and len(swid) > 50:
            raise ValueError("Invalid value for `swid`, length must be less than or equal to `50`")  # noqa: E501
        if swid is not None and len(swid) < 0:
            raise ValueError("Invalid value for `swid`, length must be greater than or equal to `0`")  # noqa: E501

        self._swid = swid

    @property
    def ui_state(self):
        """Gets the ui_state of this SupportassistStatusStatus.  # noqa: E501

        SupportAssist system state.  # noqa: E501

        :return: The ui_state of this SupportassistStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._ui_state

    @ui_state.setter
    def ui_state(self, ui_state):
        """Sets the ui_state of this SupportassistStatusStatus.

        SupportAssist system state.  # noqa: E501

        :param ui_state: The ui_state of this SupportassistStatusStatus.  # noqa: E501
        :type: str
        """
        if ui_state is None:
            raise ValueError("Invalid value for `ui_state`, must not be `None`")  # noqa: E501
        allowed_values = ["terms", "setup", "monitor"]  # noqa: E501
        if ui_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ui_state` ({0}), must be one of {1}"  # noqa: E501
                .format(ui_state, allowed_values)
            )

        self._ui_state = ui_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistStatusStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
