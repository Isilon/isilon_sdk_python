# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistLicenseTaskAuditSubState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_responds': 'str',
        'api_responds_obj': 'str',
        'error': 'str',
        'task_id': 'str',
        'time_stamp': 'int'
    }

    attribute_map = {
        'api_responds': 'api_responds',
        'api_responds_obj': 'api_responds_obj',
        'error': 'error',
        'task_id': 'task_id',
        'time_stamp': 'time_stamp'
    }

    def __init__(self, api_responds=None, api_responds_obj=None, error=None, task_id=None, time_stamp=None):  # noqa: E501
        """SupportassistLicenseTaskAuditSubState - a model defined in Swagger"""  # noqa: E501

        self._api_responds = None
        self._api_responds_obj = None
        self._error = None
        self._task_id = None
        self._time_stamp = None
        self.discriminator = None

        if api_responds is not None:
            self.api_responds = api_responds
        if api_responds_obj is not None:
            self.api_responds_obj = api_responds_obj
        if error is not None:
            self.error = error
        self.task_id = task_id
        self.time_stamp = time_stamp

    @property
    def api_responds(self):
        """Gets the api_responds of this SupportassistLicenseTaskAuditSubState.  # noqa: E501

        SupportAssist API response code  # noqa: E501

        :return: The api_responds of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :rtype: str
        """
        return self._api_responds

    @api_responds.setter
    def api_responds(self, api_responds):
        """Sets the api_responds of this SupportassistLicenseTaskAuditSubState.

        SupportAssist API response code  # noqa: E501

        :param api_responds: The api_responds of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :type: str
        """
        if api_responds is not None and len(api_responds) > 255:
            raise ValueError("Invalid value for `api_responds`, length must be less than or equal to `255`")  # noqa: E501
        if api_responds is not None and len(api_responds) < 1:
            raise ValueError("Invalid value for `api_responds`, length must be greater than or equal to `1`")  # noqa: E501

        self._api_responds = api_responds

    @property
    def api_responds_obj(self):
        """Gets the api_responds_obj of this SupportassistLicenseTaskAuditSubState.  # noqa: E501

        SupportAssist API response JSON blob  # noqa: E501

        :return: The api_responds_obj of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :rtype: str
        """
        return self._api_responds_obj

    @api_responds_obj.setter
    def api_responds_obj(self, api_responds_obj):
        """Sets the api_responds_obj of this SupportassistLicenseTaskAuditSubState.

        SupportAssist API response JSON blob  # noqa: E501

        :param api_responds_obj: The api_responds_obj of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :type: str
        """
        if api_responds_obj is not None and len(api_responds_obj) > 255:
            raise ValueError("Invalid value for `api_responds_obj`, length must be less than or equal to `255`")  # noqa: E501
        if api_responds_obj is not None and len(api_responds_obj) < 1:
            raise ValueError("Invalid value for `api_responds_obj`, length must be greater than or equal to `1`")  # noqa: E501

        self._api_responds_obj = api_responds_obj

    @property
    def error(self):
        """Gets the error of this SupportassistLicenseTaskAuditSubState.  # noqa: E501

        The task sub-state error, if any  # noqa: E501

        :return: The error of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SupportassistLicenseTaskAuditSubState.

        The task sub-state error, if any  # noqa: E501

        :param error: The error of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :type: str
        """
        if error is not None and len(error) > 255:
            raise ValueError("Invalid value for `error`, length must be less than or equal to `255`")  # noqa: E501
        if error is not None and len(error) < 1:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `1`")  # noqa: E501

        self._error = error

    @property
    def task_id(self):
        """Gets the task_id of this SupportassistLicenseTaskAuditSubState.  # noqa: E501

        The task sub-state  # noqa: E501

        :return: The task_id of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this SupportassistLicenseTaskAuditSubState.

        The task sub-state  # noqa: E501

        :param task_id: The task_id of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :type: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501
        if task_id is not None and len(task_id) > 255:
            raise ValueError("Invalid value for `task_id`, length must be less than or equal to `255`")  # noqa: E501
        if task_id is not None and len(task_id) < 1:
            raise ValueError("Invalid value for `task_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._task_id = task_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SupportassistLicenseTaskAuditSubState.  # noqa: E501

        Timestamp when the task entered this sub-state  # noqa: E501

        :return: The time_stamp of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SupportassistLicenseTaskAuditSubState.

        Timestamp when the task entered this sub-state  # noqa: E501

        :param time_stamp: The time_stamp of this SupportassistLicenseTaskAuditSubState.  # noqa: E501
        :type: int
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501
        if time_stamp is not None and time_stamp > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `time_stamp`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if time_stamp is not None and time_stamp < 0:  # noqa: E501
            raise ValueError("Invalid value for `time_stamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistLicenseTaskAuditSubState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
