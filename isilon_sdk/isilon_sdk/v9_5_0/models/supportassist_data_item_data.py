# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistDataItemData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'operation': 'str',
        'sent_transaction_id': 'str',
        'status': 'str',
        'transaction_id': 'str'
    }

    attribute_map = {
        'message': 'message',
        'operation': 'operation',
        'sent_transaction_id': 'sent-transaction-id',
        'status': 'status',
        'transaction_id': 'transaction-id'
    }

    def __init__(self, message=None, operation=None, sent_transaction_id=None, status=None, transaction_id=None):  # noqa: E501
        """SupportassistDataItemData - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._operation = None
        self._sent_transaction_id = None
        self._status = None
        self._transaction_id = None
        self.discriminator = None

        self.message = message
        self.operation = operation
        if sent_transaction_id is not None:
            self.sent_transaction_id = sent_transaction_id
        self.status = status
        self.transaction_id = transaction_id

    @property
    def message(self):
        """Gets the message of this SupportassistDataItemData.  # noqa: E501

        It has two parts, first part shows status of message second part describes upload status, True-Upload Successful, False-Upload Failed  # noqa: E501

        :return: The message of this SupportassistDataItemData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SupportassistDataItemData.

        It has two parts, first part shows status of message second part describes upload status, True-Upload Successful, False-Upload Failed  # noqa: E501

        :param message: The message of this SupportassistDataItemData.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if message is not None and len(message) > 255:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `255`")  # noqa: E501
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def operation(self):
        """Gets the operation of this SupportassistDataItemData.  # noqa: E501

        Operation type of transaction.  # noqa: E501

        :return: The operation of this SupportassistDataItemData.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SupportassistDataItemData.

        Operation type of transaction.  # noqa: E501

        :param operation: The operation of this SupportassistDataItemData.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        if operation is not None and len(operation) > 255:
            raise ValueError("Invalid value for `operation`, length must be less than or equal to `255`")  # noqa: E501
        if operation is not None and len(operation) < 1:
            raise ValueError("Invalid value for `operation`, length must be greater than or equal to `1`")  # noqa: E501

        self._operation = operation

    @property
    def sent_transaction_id(self):
        """Gets the sent_transaction_id of this SupportassistDataItemData.  # noqa: E501

        Payload's sent-transaction-id. It contain the same value as `transaction-id` if one was not supplied as part of the request. If one was supplied with the request, the supplied value will be present here.  # noqa: E501

        :return: The sent_transaction_id of this SupportassistDataItemData.  # noqa: E501
        :rtype: str
        """
        return self._sent_transaction_id

    @sent_transaction_id.setter
    def sent_transaction_id(self, sent_transaction_id):
        """Sets the sent_transaction_id of this SupportassistDataItemData.

        Payload's sent-transaction-id. It contain the same value as `transaction-id` if one was not supplied as part of the request. If one was supplied with the request, the supplied value will be present here.  # noqa: E501

        :param sent_transaction_id: The sent_transaction_id of this SupportassistDataItemData.  # noqa: E501
        :type: str
        """
        if sent_transaction_id is not None and len(sent_transaction_id) > 255:
            raise ValueError("Invalid value for `sent_transaction_id`, length must be less than or equal to `255`")  # noqa: E501
        if sent_transaction_id is not None and len(sent_transaction_id) < 1:
            raise ValueError("Invalid value for `sent_transaction_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._sent_transaction_id = sent_transaction_id

    @property
    def status(self):
        """Gets the status of this SupportassistDataItemData.  # noqa: E501

        Payload status.  # noqa: E501

        :return: The status of this SupportassistDataItemData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupportassistDataItemData.

        Payload status.  # noqa: E501

        :param status: The status of this SupportassistDataItemData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SupportassistDataItemData.  # noqa: E501

        Payload's transaction ID - matches `x-dell-ese-trans-id` ofthe response header returned from Product -> ESE /Payload request.  # noqa: E501

        :return: The transaction_id of this SupportassistDataItemData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SupportassistDataItemData.

        Payload's transaction ID - matches `x-dell-ese-trans-id` ofthe response header returned from Product -> ESE /Payload request.  # noqa: E501

        :param transaction_id: The transaction_id of this SupportassistDataItemData.  # noqa: E501
        :type: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501
        if transaction_id is not None and len(transaction_id) > 255:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `255`")  # noqa: E501
        if transaction_id is not None and len(transaction_id) < 1:
            raise ValueError("Invalid value for `transaction_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistDataItemData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
