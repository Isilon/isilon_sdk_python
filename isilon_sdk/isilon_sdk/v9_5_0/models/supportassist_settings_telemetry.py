# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistSettingsTelemetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offline_collection_period': 'int',
        'telemetry_enabled': 'bool',
        'telemetry_persist': 'bool',
        'telemetry_threads': 'int'
    }

    attribute_map = {
        'offline_collection_period': 'offline_collection_period',
        'telemetry_enabled': 'telemetry_enabled',
        'telemetry_persist': 'telemetry_persist',
        'telemetry_threads': 'telemetry_threads'
    }

    def __init__(self, offline_collection_period=None, telemetry_enabled=None, telemetry_persist=None, telemetry_threads=None):  # noqa: E501
        """SupportassistSettingsTelemetry - a model defined in Swagger"""  # noqa: E501

        self._offline_collection_period = None
        self._telemetry_enabled = None
        self._telemetry_persist = None
        self._telemetry_threads = None
        self.discriminator = None

        self.offline_collection_period = offline_collection_period
        self.telemetry_enabled = telemetry_enabled
        self.telemetry_persist = telemetry_persist
        self.telemetry_threads = telemetry_threads

    @property
    def offline_collection_period(self):
        """Gets the offline_collection_period of this SupportassistSettingsTelemetry.  # noqa: E501

        Offline collection period in seconds when the connection to gateway is down  # noqa: E501

        :return: The offline_collection_period of this SupportassistSettingsTelemetry.  # noqa: E501
        :rtype: int
        """
        return self._offline_collection_period

    @offline_collection_period.setter
    def offline_collection_period(self, offline_collection_period):
        """Sets the offline_collection_period of this SupportassistSettingsTelemetry.

        Offline collection period in seconds when the connection to gateway is down  # noqa: E501

        :param offline_collection_period: The offline_collection_period of this SupportassistSettingsTelemetry.  # noqa: E501
        :type: int
        """
        if offline_collection_period is None:
            raise ValueError("Invalid value for `offline_collection_period`, must not be `None`")  # noqa: E501
        if offline_collection_period is not None and offline_collection_period > 86400:  # noqa: E501
            raise ValueError("Invalid value for `offline_collection_period`, must be a value less than or equal to `86400`")  # noqa: E501
        if offline_collection_period is not None and offline_collection_period < 0:  # noqa: E501
            raise ValueError("Invalid value for `offline_collection_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offline_collection_period = offline_collection_period

    @property
    def telemetry_enabled(self):
        """Gets the telemetry_enabled of this SupportassistSettingsTelemetry.  # noqa: E501

        True indicates telemetry is enabled  # noqa: E501

        :return: The telemetry_enabled of this SupportassistSettingsTelemetry.  # noqa: E501
        :rtype: bool
        """
        return self._telemetry_enabled

    @telemetry_enabled.setter
    def telemetry_enabled(self, telemetry_enabled):
        """Sets the telemetry_enabled of this SupportassistSettingsTelemetry.

        True indicates telemetry is enabled  # noqa: E501

        :param telemetry_enabled: The telemetry_enabled of this SupportassistSettingsTelemetry.  # noqa: E501
        :type: bool
        """
        if telemetry_enabled is None:
            raise ValueError("Invalid value for `telemetry_enabled`, must not be `None`")  # noqa: E501

        self._telemetry_enabled = telemetry_enabled

    @property
    def telemetry_persist(self):
        """Gets the telemetry_persist of this SupportassistSettingsTelemetry.  # noqa: E501

        True indicates files are kept after upload  # noqa: E501

        :return: The telemetry_persist of this SupportassistSettingsTelemetry.  # noqa: E501
        :rtype: bool
        """
        return self._telemetry_persist

    @telemetry_persist.setter
    def telemetry_persist(self, telemetry_persist):
        """Sets the telemetry_persist of this SupportassistSettingsTelemetry.

        True indicates files are kept after upload  # noqa: E501

        :param telemetry_persist: The telemetry_persist of this SupportassistSettingsTelemetry.  # noqa: E501
        :type: bool
        """
        if telemetry_persist is None:
            raise ValueError("Invalid value for `telemetry_persist`, must not be `None`")  # noqa: E501

        self._telemetry_persist = telemetry_persist

    @property
    def telemetry_threads(self):
        """Gets the telemetry_threads of this SupportassistSettingsTelemetry.  # noqa: E501

        The number of threads for telemetry gathers  # noqa: E501

        :return: The telemetry_threads of this SupportassistSettingsTelemetry.  # noqa: E501
        :rtype: int
        """
        return self._telemetry_threads

    @telemetry_threads.setter
    def telemetry_threads(self, telemetry_threads):
        """Sets the telemetry_threads of this SupportassistSettingsTelemetry.

        The number of threads for telemetry gathers  # noqa: E501

        :param telemetry_threads: The telemetry_threads of this SupportassistSettingsTelemetry.  # noqa: E501
        :type: int
        """
        if telemetry_threads is None:
            raise ValueError("Invalid value for `telemetry_threads`, must not be `None`")  # noqa: E501
        if telemetry_threads is not None and telemetry_threads > 64:  # noqa: E501
            raise ValueError("Invalid value for `telemetry_threads`, must be a value less than or equal to `64`")  # noqa: E501
        if telemetry_threads is not None and telemetry_threads < 1:  # noqa: E501
            raise ValueError("Invalid value for `telemetry_threads`, must be a value greater than or equal to `1`")  # noqa: E501

        self._telemetry_threads = telemetry_threads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistSettingsTelemetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
