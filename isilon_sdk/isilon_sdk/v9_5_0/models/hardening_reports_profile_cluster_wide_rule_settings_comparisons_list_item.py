# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.hardening_reports_profile_cluster_wide_rule_settings_comparisons_list_item_comparison import HardeningReportsProfileClusterWideRuleSettingsComparisonsListItemComparison  # noqa: F401,E501


class HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparison': 'HardeningReportsProfileClusterWideRuleSettingsComparisonsListItemComparison',
        'setting': 'str'
    }

    attribute_map = {
        'comparison': 'comparison',
        'setting': 'setting'
    }

    def __init__(self, comparison=None, setting=None):  # noqa: E501
        """HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem - a model defined in Swagger"""  # noqa: E501

        self._comparison = None
        self._setting = None
        self.discriminator = None

        if comparison is not None:
            self.comparison = comparison
        if setting is not None:
            self.setting = setting

    @property
    def comparison(self):
        """Gets the comparison of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501

        Comparison values.  # noqa: E501

        :return: The comparison of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501
        :rtype: HardeningReportsProfileClusterWideRuleSettingsComparisonsListItemComparison
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.

        Comparison values.  # noqa: E501

        :param comparison: The comparison of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501
        :type: HardeningReportsProfileClusterWideRuleSettingsComparisonsListItemComparison
        """

        self._comparison = comparison

    @property
    def setting(self):
        """Gets the setting of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501


        :return: The setting of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501
        :rtype: str
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.


        :param setting: The setting of this HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem.  # noqa: E501
        :type: str
        """
        if setting is not None and len(setting) > 255:
            raise ValueError("Invalid value for `setting`, length must be less than or equal to `255`")  # noqa: E501
        if setting is not None and len(setting) < 0:
            raise ValueError("Invalid value for `setting`, length must be greater than or equal to `0`")  # noqa: E501

        self._setting = setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
