# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvidersSamlServicesIdpsIdpExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'id': 'str',
        'login_url': 'str',
        'logout_url': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'id': 'id',
        'login_url': 'login_url',
        'logout_url': 'logout_url'
    }

    def __init__(self, entity_id=None, id=None, login_url=None, logout_url=None):  # noqa: E501
        """ProvidersSamlServicesIdpsIdpExtended - a model defined in Swagger"""  # noqa: E501

        self._entity_id = None
        self._id = None
        self._login_url = None
        self._logout_url = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if id is not None:
            self.id = id
        if login_url is not None:
            self.login_url = login_url
        if logout_url is not None:
            self.logout_url = logout_url

    @property
    def entity_id(self):
        """Gets the entity_id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501

        Unique identifier of the IDP.  # noqa: E501

        :return: The entity_id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ProvidersSamlServicesIdpsIdpExtended.

        Unique identifier of the IDP.  # noqa: E501

        :param entity_id: The entity_id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :type: str
        """
        if entity_id is not None and len(entity_id) > 1024:
            raise ValueError("Invalid value for `entity_id`, length must be less than or equal to `1024`")  # noqa: E501
        if entity_id is not None and len(entity_id) < 0:
            raise ValueError("Invalid value for `entity_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501

        Unique identifier of a SAML service resource.  # noqa: E501

        :return: The id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvidersSamlServicesIdpsIdpExtended.

        Unique identifier of a SAML service resource.  # noqa: E501

        :param id: The id of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def login_url(self):
        """Gets the login_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501

        URL specifying the location of where to send messages.  # noqa: E501

        :return: The login_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this ProvidersSamlServicesIdpsIdpExtended.

        URL specifying the location of where to send messages.  # noqa: E501

        :param login_url: The login_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :type: str
        """
        if login_url is not None and len(login_url) > 2048:
            raise ValueError("Invalid value for `login_url`, length must be less than or equal to `2048`")  # noqa: E501
        if login_url is not None and len(login_url) < 1:
            raise ValueError("Invalid value for `login_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._login_url = login_url

    @property
    def logout_url(self):
        """Gets the logout_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501

        URL specifying the location of where to send messages.  # noqa: E501

        :return: The logout_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this ProvidersSamlServicesIdpsIdpExtended.

        URL specifying the location of where to send messages.  # noqa: E501

        :param logout_url: The logout_url of this ProvidersSamlServicesIdpsIdpExtended.  # noqa: E501
        :type: str
        """
        if logout_url is not None and len(logout_url) > 2048:
            raise ValueError("Invalid value for `logout_url`, length must be less than or equal to `2048`")  # noqa: E501
        if logout_url is not None and len(logout_url) < 0:
            raise ValueError("Invalid value for `logout_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._logout_url = logout_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvidersSamlServicesIdpsIdpExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
