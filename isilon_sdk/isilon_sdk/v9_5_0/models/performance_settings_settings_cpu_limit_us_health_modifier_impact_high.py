# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'at_risk': 'float',
        'healthy': 'float',
        'unhealthy': 'float'
    }

    attribute_map = {
        'at_risk': 'at_risk',
        'healthy': 'healthy',
        'unhealthy': 'unhealthy'
    }

    def __init__(self, at_risk=None, healthy=None, unhealthy=None):  # noqa: E501
        """PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh - a model defined in Swagger"""  # noqa: E501

        self._at_risk = None
        self._healthy = None
        self._unhealthy = None
        self.discriminator = None

        if at_risk is not None:
            self.at_risk = at_risk
        if healthy is not None:
            self.healthy = healthy
        if unhealthy is not None:
            self.unhealthy = unhealthy

    @property
    def at_risk(self):
        """Gets the at_risk of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :return: The at_risk of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :rtype: float
        """
        return self._at_risk

    @at_risk.setter
    def at_risk(self, at_risk):
        """Sets the at_risk of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :param at_risk: The at_risk of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :type: float
        """
        if at_risk is not None and at_risk > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `at_risk`, must be a value less than or equal to `10.0`")  # noqa: E501
        if at_risk is not None and at_risk < -10.0:  # noqa: E501
            raise ValueError("Invalid value for `at_risk`, must be a value greater than or equal to `-10.0`")  # noqa: E501

        self._at_risk = at_risk

    @property
    def healthy(self):
        """Gets the healthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :return: The healthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :rtype: float
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :param healthy: The healthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :type: float
        """
        if healthy is not None and healthy > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `healthy`, must be a value less than or equal to `10.0`")  # noqa: E501
        if healthy is not None and healthy < -10.0:  # noqa: E501
            raise ValueError("Invalid value for `healthy`, must be a value greater than or equal to `-10.0`")  # noqa: E501

        self._healthy = healthy

    @property
    def unhealthy(self):
        """Gets the unhealthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :return: The unhealthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :rtype: float
        """
        return self._unhealthy

    @unhealthy.setter
    def unhealthy(self, unhealthy):
        """Sets the unhealthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.

        The modifier to the health multiplier for the respective impact and health level  # noqa: E501

        :param unhealthy: The unhealthy of this PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh.  # noqa: E501
        :type: float
        """
        if unhealthy is not None and unhealthy > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `unhealthy`, must be a value less than or equal to `10.0`")  # noqa: E501
        if unhealthy is not None and unhealthy < -10.0:  # noqa: E501
            raise ValueError("Invalid value for `unhealthy`, must be a value greater than or equal to `-10.0`")  # noqa: E501

        self._unhealthy = unhealthy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceSettingsSettingsCpuLimitUsHealthModifierImpactHigh):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
