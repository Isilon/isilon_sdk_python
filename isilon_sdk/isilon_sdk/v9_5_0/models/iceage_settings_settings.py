# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IceageSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'core_queue_size': 'int',
        'retention': 'int'
    }

    attribute_map = {
        'core_queue_size': 'core_queue_size',
        'retention': 'retention'
    }

    def __init__(self, core_queue_size=None, retention=None):  # noqa: E501
        """IceageSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._core_queue_size = None
        self._retention = None
        self.discriminator = None

        if core_queue_size is not None:
            self.core_queue_size = core_queue_size
        if retention is not None:
            self.retention = retention

    @property
    def core_queue_size(self):
        """Gets the core_queue_size of this IceageSettingsSettings.  # noqa: E501

        Max total size of the core files in GBs which can be copied into the queue directory to be processed. Default is 20G.  # noqa: E501

        :return: The core_queue_size of this IceageSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._core_queue_size

    @core_queue_size.setter
    def core_queue_size(self, core_queue_size):
        """Sets the core_queue_size of this IceageSettingsSettings.

        Max total size of the core files in GBs which can be copied into the queue directory to be processed. Default is 20G.  # noqa: E501

        :param core_queue_size: The core_queue_size of this IceageSettingsSettings.  # noqa: E501
        :type: int
        """
        if core_queue_size is not None and core_queue_size > 255:  # noqa: E501
            raise ValueError("Invalid value for `core_queue_size`, must be a value less than or equal to `255`")  # noqa: E501
        if core_queue_size is not None and core_queue_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `core_queue_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._core_queue_size = core_queue_size

    @property
    def retention(self):
        """Gets the retention of this IceageSettingsSettings.  # noqa: E501

        Retention period of IceAge reports and headers in DAYS.  Defaults to 1 month.  # noqa: E501

        :return: The retention of this IceageSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this IceageSettingsSettings.

        Retention period of IceAge reports and headers in DAYS.  Defaults to 1 month.  # noqa: E501

        :param retention: The retention of this IceageSettingsSettings.  # noqa: E501
        :type: int
        """
        if retention is not None and retention > 36500:  # noqa: E501
            raise ValueError("Invalid value for `retention`, must be a value less than or equal to `36500`")  # noqa: E501
        if retention is not None and retention < 0:  # noqa: E501
            raise ValueError("Invalid value for `retention`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention = retention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IceageSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
