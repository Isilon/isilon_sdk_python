# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DatamoverBasePolicySrcDatasetRetention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_expiry_action': 'str',
        'dataset_reserve': 'int',
        'dataset_retention_period': 'int'
    }

    attribute_map = {
        'dataset_expiry_action': 'dataset_expiry_action',
        'dataset_reserve': 'dataset_reserve',
        'dataset_retention_period': 'dataset_retention_period'
    }

    def __init__(self, dataset_expiry_action=None, dataset_reserve=None, dataset_retention_period=None):  # noqa: E501
        """DatamoverBasePolicySrcDatasetRetention - a model defined in Swagger"""  # noqa: E501

        self._dataset_expiry_action = None
        self._dataset_reserve = None
        self._dataset_retention_period = None
        self.discriminator = None

        if dataset_expiry_action is not None:
            self.dataset_expiry_action = dataset_expiry_action
        if dataset_reserve is not None:
            self.dataset_reserve = dataset_reserve
        if dataset_retention_period is not None:
            self.dataset_retention_period = dataset_retention_period

    @property
    def dataset_expiry_action(self):
        """Gets the dataset_expiry_action of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501

        The action to be taken after dataset expiry.  # noqa: E501

        :return: The dataset_expiry_action of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :rtype: str
        """
        return self._dataset_expiry_action

    @dataset_expiry_action.setter
    def dataset_expiry_action(self, dataset_expiry_action):
        """Sets the dataset_expiry_action of this DatamoverBasePolicySrcDatasetRetention.

        The action to be taken after dataset expiry.  # noqa: E501

        :param dataset_expiry_action: The dataset_expiry_action of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :type: str
        """
        allowed_values = ["DELETE"]  # noqa: E501
        if dataset_expiry_action not in allowed_values:
            raise ValueError(
                "Invalid value for `dataset_expiry_action` ({0}), must be one of {1}"  # noqa: E501
                .format(dataset_expiry_action, allowed_values)
            )

        self._dataset_expiry_action = dataset_expiry_action

    @property
    def dataset_reserve(self):
        """Gets the dataset_reserve of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501

        The number of datasets in this tree to protect from expiration.  # noqa: E501

        :return: The dataset_reserve of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :rtype: int
        """
        return self._dataset_reserve

    @dataset_reserve.setter
    def dataset_reserve(self, dataset_reserve):
        """Sets the dataset_reserve of this DatamoverBasePolicySrcDatasetRetention.

        The number of datasets in this tree to protect from expiration.  # noqa: E501

        :param dataset_reserve: The dataset_reserve of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :type: int
        """
        if dataset_reserve is not None and dataset_reserve > 65535:  # noqa: E501
            raise ValueError("Invalid value for `dataset_reserve`, must be a value less than or equal to `65535`")  # noqa: E501
        if dataset_reserve is not None and dataset_reserve < 0:  # noqa: E501
            raise ValueError("Invalid value for `dataset_reserve`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dataset_reserve = dataset_reserve

    @property
    def dataset_retention_period(self):
        """Gets the dataset_retention_period of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501

        The time before dataset expiry, represented as number of seconds after dataset creation time.  # noqa: E501

        :return: The dataset_retention_period of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :rtype: int
        """
        return self._dataset_retention_period

    @dataset_retention_period.setter
    def dataset_retention_period(self, dataset_retention_period):
        """Sets the dataset_retention_period of this DatamoverBasePolicySrcDatasetRetention.

        The time before dataset expiry, represented as number of seconds after dataset creation time.  # noqa: E501

        :param dataset_retention_period: The dataset_retention_period of this DatamoverBasePolicySrcDatasetRetention.  # noqa: E501
        :type: int
        """
        if dataset_retention_period is not None and dataset_retention_period > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `dataset_retention_period`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if dataset_retention_period is not None and dataset_retention_period < 0:  # noqa: E501
            raise ValueError("Invalid value for `dataset_retention_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dataset_retention_period = dataset_retention_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverBasePolicySrcDatasetRetention):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
