# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.pools_pool_status_status_node import PoolsPoolStatusStatusNode  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.pools_pool_status_status_sc_dns_overview import PoolsPoolStatusStatusScDnsOverview  # noqa: F401,E501


class PoolsPoolStatusStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nodes': 'list[PoolsPoolStatusStatusNode]',
        'sc_dns_overview': 'PoolsPoolStatusStatusScDnsOverview',
        'total_configured_nodes': 'int'
    }

    attribute_map = {
        'id': 'id',
        'nodes': 'nodes',
        'sc_dns_overview': 'sc_dns_overview',
        'total_configured_nodes': 'total_configured_nodes'
    }

    def __init__(self, id=None, nodes=None, sc_dns_overview=None, total_configured_nodes=None):  # noqa: E501
        """PoolsPoolStatusStatus - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._nodes = None
        self._sc_dns_overview = None
        self._total_configured_nodes = None
        self.discriminator = None

        self.id = id
        self.nodes = nodes
        self.sc_dns_overview = sc_dns_overview
        self.total_configured_nodes = total_configured_nodes

    @property
    def id(self):
        """Gets the id of this PoolsPoolStatusStatus.  # noqa: E501

        Unique Pool ID.  # noqa: E501

        :return: The id of this PoolsPoolStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PoolsPoolStatusStatus.

        Unique Pool ID.  # noqa: E501

        :param id: The id of this PoolsPoolStatusStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 99:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `99`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def nodes(self):
        """Gets the nodes of this PoolsPoolStatusStatus.  # noqa: E501

        The status of the requested nodes.  # noqa: E501

        :return: The nodes of this PoolsPoolStatusStatus.  # noqa: E501
        :rtype: list[PoolsPoolStatusStatusNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this PoolsPoolStatusStatus.

        The status of the requested nodes.  # noqa: E501

        :param nodes: The nodes of this PoolsPoolStatusStatus.  # noqa: E501
        :type: list[PoolsPoolStatusStatusNode]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def sc_dns_overview(self):
        """Gets the sc_dns_overview of this PoolsPoolStatusStatus.  # noqa: E501

          # noqa: E501

        :return: The sc_dns_overview of this PoolsPoolStatusStatus.  # noqa: E501
        :rtype: PoolsPoolStatusStatusScDnsOverview
        """
        return self._sc_dns_overview

    @sc_dns_overview.setter
    def sc_dns_overview(self, sc_dns_overview):
        """Sets the sc_dns_overview of this PoolsPoolStatusStatus.

          # noqa: E501

        :param sc_dns_overview: The sc_dns_overview of this PoolsPoolStatusStatus.  # noqa: E501
        :type: PoolsPoolStatusStatusScDnsOverview
        """
        if sc_dns_overview is None:
            raise ValueError("Invalid value for `sc_dns_overview`, must not be `None`")  # noqa: E501

        self._sc_dns_overview = sc_dns_overview

    @property
    def total_configured_nodes(self):
        """Gets the total_configured_nodes of this PoolsPoolStatusStatus.  # noqa: E501

        The number of nodes configured in the Network Pool.  # noqa: E501

        :return: The total_configured_nodes of this PoolsPoolStatusStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_configured_nodes

    @total_configured_nodes.setter
    def total_configured_nodes(self, total_configured_nodes):
        """Sets the total_configured_nodes of this PoolsPoolStatusStatus.

        The number of nodes configured in the Network Pool.  # noqa: E501

        :param total_configured_nodes: The total_configured_nodes of this PoolsPoolStatusStatus.  # noqa: E501
        :type: int
        """
        if total_configured_nodes is None:
            raise ValueError("Invalid value for `total_configured_nodes`, must not be `None`")  # noqa: E501
        if total_configured_nodes is not None and total_configured_nodes > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `total_configured_nodes`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if total_configured_nodes is not None and total_configured_nodes < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_configured_nodes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_configured_nodes = total_configured_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolsPoolStatusStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
