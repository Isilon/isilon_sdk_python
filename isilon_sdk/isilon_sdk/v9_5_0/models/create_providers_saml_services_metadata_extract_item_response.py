# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.create_providers_saml_services_metadata_extract_item_response_login_endpoint import CreateProvidersSamlServicesMetadataExtractItemResponseLoginEndpoint  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.create_providers_saml_services_metadata_extract_item_response_logout_endpoint import CreateProvidersSamlServicesMetadataExtractItemResponseLogoutEndpoint  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.create_providers_saml_services_metadata_extract_item_response_signing_certificate import CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate  # noqa: F401,E501


class CreateProvidersSamlServicesMetadataExtractItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'login_endpoints': 'list[CreateProvidersSamlServicesMetadataExtractItemResponseLoginEndpoint]',
        'logout_endpoints': 'list[CreateProvidersSamlServicesMetadataExtractItemResponseLogoutEndpoint]',
        'signing_certificates': 'list[CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate]'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'login_endpoints': 'login_endpoints',
        'logout_endpoints': 'logout_endpoints',
        'signing_certificates': 'signing_certificates'
    }

    def __init__(self, entity_id=None, login_endpoints=None, logout_endpoints=None, signing_certificates=None):  # noqa: E501
        """CreateProvidersSamlServicesMetadataExtractItemResponse - a model defined in Swagger"""  # noqa: E501

        self._entity_id = None
        self._login_endpoints = None
        self._logout_endpoints = None
        self._signing_certificates = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if login_endpoints is not None:
            self.login_endpoints = login_endpoints
        if logout_endpoints is not None:
            self.logout_endpoints = logout_endpoints
        if signing_certificates is not None:
            self.signing_certificates = signing_certificates

    @property
    def entity_id(self):
        """Gets the entity_id of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501

        The SAML entity ID the rest of this object's properties are within.  # noqa: E501

        :return: The entity_id of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CreateProvidersSamlServicesMetadataExtractItemResponse.

        The SAML entity ID the rest of this object's properties are within.  # noqa: E501

        :param entity_id: The entity_id of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :type: str
        """
        if entity_id is not None and len(entity_id) > 1024:
            raise ValueError("Invalid value for `entity_id`, length must be less than or equal to `1024`")  # noqa: E501
        if entity_id is not None and len(entity_id) < 1:
            raise ValueError("Invalid value for `entity_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def login_endpoints(self):
        """Gets the login_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501

        A list of endpoints from the metadata that can be used as the login URL when creating an IDP on PowerScale.  # noqa: E501

        :return: The login_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :rtype: list[CreateProvidersSamlServicesMetadataExtractItemResponseLoginEndpoint]
        """
        return self._login_endpoints

    @login_endpoints.setter
    def login_endpoints(self, login_endpoints):
        """Sets the login_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.

        A list of endpoints from the metadata that can be used as the login URL when creating an IDP on PowerScale.  # noqa: E501

        :param login_endpoints: The login_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :type: list[CreateProvidersSamlServicesMetadataExtractItemResponseLoginEndpoint]
        """

        self._login_endpoints = login_endpoints

    @property
    def logout_endpoints(self):
        """Gets the logout_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501

        A list of endpoints from the metadata that can be used as the logout URL when creating an IDP on PowerScale.  # noqa: E501

        :return: The logout_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :rtype: list[CreateProvidersSamlServicesMetadataExtractItemResponseLogoutEndpoint]
        """
        return self._logout_endpoints

    @logout_endpoints.setter
    def logout_endpoints(self, logout_endpoints):
        """Sets the logout_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.

        A list of endpoints from the metadata that can be used as the logout URL when creating an IDP on PowerScale.  # noqa: E501

        :param logout_endpoints: The logout_endpoints of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :type: list[CreateProvidersSamlServicesMetadataExtractItemResponseLogoutEndpoint]
        """

        self._logout_endpoints = logout_endpoints

    @property
    def signing_certificates(self):
        """Gets the signing_certificates of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501

        A list of signing certificates from the metadata's IDP. Only signing certificates with a status property of valid can be used to create an IDP on PowerScale.  # noqa: E501

        :return: The signing_certificates of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :rtype: list[CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate]
        """
        return self._signing_certificates

    @signing_certificates.setter
    def signing_certificates(self, signing_certificates):
        """Sets the signing_certificates of this CreateProvidersSamlServicesMetadataExtractItemResponse.

        A list of signing certificates from the metadata's IDP. Only signing certificates with a status property of valid can be used to create an IDP on PowerScale.  # noqa: E501

        :param signing_certificates: The signing_certificates of this CreateProvidersSamlServicesMetadataExtractItemResponse.  # noqa: E501
        :type: list[CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate]
        """

        self._signing_certificates = signing_certificates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProvidersSamlServicesMetadataExtractItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
