# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.hardening_reports_profile_cluster_wide_rule_settings_comparisons_list_item import HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem  # noqa: F401,E501


class HardeningReportsProfileClusterWideRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'error_message': 'str',
        'name': 'str',
        'settings_comparisons_list': 'list[HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem]',
        'status': 'str'
    }

    attribute_map = {
        'description': 'description',
        'error_message': 'error_message',
        'name': 'name',
        'settings_comparisons_list': 'settings_comparisons_list',
        'status': 'status'
    }

    def __init__(self, description=None, error_message=None, name=None, settings_comparisons_list=None, status=None):  # noqa: E501
        """HardeningReportsProfileClusterWideRule - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._error_message = None
        self._name = None
        self._settings_comparisons_list = None
        self._status = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if error_message is not None:
            self.error_message = error_message
        if name is not None:
            self.name = name
        if settings_comparisons_list is not None:
            self.settings_comparisons_list = settings_comparisons_list
        if status is not None:
            self.status = status

    @property
    def description(self):
        """Gets the description of this HardeningReportsProfileClusterWideRule.  # noqa: E501


        :return: The description of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HardeningReportsProfileClusterWideRule.


        :param description: The description of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def error_message(self):
        """Gets the error_message of this HardeningReportsProfileClusterWideRule.  # noqa: E501


        :return: The error_message of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this HardeningReportsProfileClusterWideRule.


        :param error_message: The error_message of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :type: str
        """
        if error_message is not None and len(error_message) > 255:
            raise ValueError("Invalid value for `error_message`, length must be less than or equal to `255`")  # noqa: E501
        if error_message is not None and len(error_message) < 0:
            raise ValueError("Invalid value for `error_message`, length must be greater than or equal to `0`")  # noqa: E501

        self._error_message = error_message

    @property
    def name(self):
        """Gets the name of this HardeningReportsProfileClusterWideRule.  # noqa: E501


        :return: The name of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HardeningReportsProfileClusterWideRule.


        :param name: The name of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def settings_comparisons_list(self):
        """Gets the settings_comparisons_list of this HardeningReportsProfileClusterWideRule.  # noqa: E501

        Comparison values for settings.  # noqa: E501

        :return: The settings_comparisons_list of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :rtype: list[HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem]
        """
        return self._settings_comparisons_list

    @settings_comparisons_list.setter
    def settings_comparisons_list(self, settings_comparisons_list):
        """Sets the settings_comparisons_list of this HardeningReportsProfileClusterWideRule.

        Comparison values for settings.  # noqa: E501

        :param settings_comparisons_list: The settings_comparisons_list of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :type: list[HardeningReportsProfileClusterWideRuleSettingsComparisonsListItem]
        """

        self._settings_comparisons_list = settings_comparisons_list

    @property
    def status(self):
        """Gets the status of this HardeningReportsProfileClusterWideRule.  # noqa: E501


        :return: The status of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HardeningReportsProfileClusterWideRule.


        :param status: The status of this HardeningReportsProfileClusterWideRule.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningReportsProfileClusterWideRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
