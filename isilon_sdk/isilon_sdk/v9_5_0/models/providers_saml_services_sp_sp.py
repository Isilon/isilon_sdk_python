# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.create_providers_saml_services_metadata_extract_item_response_signing_certificate import CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate  # noqa: F401,E501


class ProvidersSamlServicesSpSp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acs_url': 'str',
        'email': 'str',
        'entity_id': 'str',
        'first_name': 'str',
        'hostname': 'str',
        'last_name': 'str',
        'login_url': 'str',
        'logout_url': 'str',
        'metadata_location': 'str',
        'signing_certificate': 'CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate',
        'signing_enabled': 'bool',
        'user_id': 'str'
    }

    attribute_map = {
        'acs_url': 'acs_url',
        'email': 'email',
        'entity_id': 'entity_id',
        'first_name': 'first_name',
        'hostname': 'hostname',
        'last_name': 'last_name',
        'login_url': 'login_url',
        'logout_url': 'logout_url',
        'metadata_location': 'metadata_location',
        'signing_certificate': 'signing_certificate',
        'signing_enabled': 'signing_enabled',
        'user_id': 'user_id'
    }

    def __init__(self, acs_url=None, email=None, entity_id=None, first_name=None, hostname=None, last_name=None, login_url=None, logout_url=None, metadata_location=None, signing_certificate=None, signing_enabled=None, user_id=None):  # noqa: E501
        """ProvidersSamlServicesSpSp - a model defined in Swagger"""  # noqa: E501

        self._acs_url = None
        self._email = None
        self._entity_id = None
        self._first_name = None
        self._hostname = None
        self._last_name = None
        self._login_url = None
        self._logout_url = None
        self._metadata_location = None
        self._signing_certificate = None
        self._signing_enabled = None
        self._user_id = None
        self.discriminator = None

        if acs_url is not None:
            self.acs_url = acs_url
        if email is not None:
            self.email = email
        if entity_id is not None:
            self.entity_id = entity_id
        if first_name is not None:
            self.first_name = first_name
        if hostname is not None:
            self.hostname = hostname
        if last_name is not None:
            self.last_name = last_name
        if login_url is not None:
            self.login_url = login_url
        if logout_url is not None:
            self.logout_url = logout_url
        if metadata_location is not None:
            self.metadata_location = metadata_location
        if signing_certificate is not None:
            self.signing_certificate = signing_certificate
        if signing_enabled is not None:
            self.signing_enabled = signing_enabled
        if user_id is not None:
            self.user_id = user_id

    @property
    def acs_url(self):
        """Gets the acs_url of this ProvidersSamlServicesSpSp.  # noqa: E501

        ACS URL of the SAML provider.  # noqa: E501

        :return: The acs_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._acs_url

    @acs_url.setter
    def acs_url(self, acs_url):
        """Sets the acs_url of this ProvidersSamlServicesSpSp.

        ACS URL of the SAML provider.  # noqa: E501

        :param acs_url: The acs_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if acs_url is not None and len(acs_url) > 2048:
            raise ValueError("Invalid value for `acs_url`, length must be less than or equal to `2048`")  # noqa: E501
        if acs_url is not None and len(acs_url) < 0:
            raise ValueError("Invalid value for `acs_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._acs_url = acs_url

    @property
    def email(self):
        """Gets the email of this ProvidersSamlServicesSpSp.  # noqa: E501

        Email address of SP maintainer.  # noqa: E501

        :return: The email of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProvidersSamlServicesSpSp.

        Email address of SP maintainer.  # noqa: E501

        :param email: The email of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")  # noqa: E501
        if email is not None and not re.search('[a-zA-Z0-9._%+-]{1,64}@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}', email):  # noqa: E501
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/[a-zA-Z0-9._%+-]{1,64}@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}/`")  # noqa: E501

        self._email = email

    @property
    def entity_id(self):
        """Gets the entity_id of this ProvidersSamlServicesSpSp.  # noqa: E501

        Unique identifier of the client (product).  # noqa: E501

        :return: The entity_id of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ProvidersSamlServicesSpSp.

        Unique identifier of the client (product).  # noqa: E501

        :param entity_id: The entity_id of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if entity_id is not None and len(entity_id) > 1024:
            raise ValueError("Invalid value for `entity_id`, length must be less than or equal to `1024`")  # noqa: E501
        if entity_id is not None and len(entity_id) < 0:
            raise ValueError("Invalid value for `entity_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def first_name(self):
        """Gets the first_name of this ProvidersSamlServicesSpSp.  # noqa: E501

        First name of SP maintainer.  # noqa: E501

        :return: The first_name of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ProvidersSamlServicesSpSp.

        First name of SP maintainer.  # noqa: E501

        :param first_name: The first_name of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")  # noqa: E501
        if first_name is not None and len(first_name) < 0:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._first_name = first_name

    @property
    def hostname(self):
        """Gets the hostname of this ProvidersSamlServicesSpSp.  # noqa: E501

        Resolvable hostname of the SP in an access zone.  # noqa: E501

        :return: The hostname of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ProvidersSamlServicesSpSp.

        Resolvable hostname of the SP in an access zone.  # noqa: E501

        :param hostname: The hostname of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if hostname is not None and len(hostname) > 2048:
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `2048`")  # noqa: E501
        if hostname is not None and len(hostname) < 0:
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `0`")  # noqa: E501

        self._hostname = hostname

    @property
    def last_name(self):
        """Gets the last_name of this ProvidersSamlServicesSpSp.  # noqa: E501

        Last name of SP maintainer.  # noqa: E501

        :return: The last_name of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ProvidersSamlServicesSpSp.

        Last name of SP maintainer.  # noqa: E501

        :param last_name: The last_name of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")  # noqa: E501
        if last_name is not None and len(last_name) < 0:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._last_name = last_name

    @property
    def login_url(self):
        """Gets the login_url of this ProvidersSamlServicesSpSp.  # noqa: E501

        Login URL of the SAML provider.  # noqa: E501

        :return: The login_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this ProvidersSamlServicesSpSp.

        Login URL of the SAML provider.  # noqa: E501

        :param login_url: The login_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if login_url is not None and len(login_url) > 2048:
            raise ValueError("Invalid value for `login_url`, length must be less than or equal to `2048`")  # noqa: E501
        if login_url is not None and len(login_url) < 0:
            raise ValueError("Invalid value for `login_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._login_url = login_url

    @property
    def logout_url(self):
        """Gets the logout_url of this ProvidersSamlServicesSpSp.  # noqa: E501

        Logout URL of the SAML provider.  # noqa: E501

        :return: The logout_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this ProvidersSamlServicesSpSp.

        Logout URL of the SAML provider.  # noqa: E501

        :param logout_url: The logout_url of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if logout_url is not None and len(logout_url) > 2048:
            raise ValueError("Invalid value for `logout_url`, length must be less than or equal to `2048`")  # noqa: E501
        if logout_url is not None and len(logout_url) < 0:
            raise ValueError("Invalid value for `logout_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._logout_url = logout_url

    @property
    def metadata_location(self):
        """Gets the metadata_location of this ProvidersSamlServicesSpSp.  # noqa: E501

        Metadata location of the SAML provider.  # noqa: E501

        :return: The metadata_location of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._metadata_location

    @metadata_location.setter
    def metadata_location(self, metadata_location):
        """Sets the metadata_location of this ProvidersSamlServicesSpSp.

        Metadata location of the SAML provider.  # noqa: E501

        :param metadata_location: The metadata_location of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if metadata_location is not None and len(metadata_location) > 2048:
            raise ValueError("Invalid value for `metadata_location`, length must be less than or equal to `2048`")  # noqa: E501
        if metadata_location is not None and len(metadata_location) < 0:
            raise ValueError("Invalid value for `metadata_location`, length must be greater than or equal to `0`")  # noqa: E501

        self._metadata_location = metadata_location

    @property
    def signing_certificate(self):
        """Gets the signing_certificate of this ProvidersSamlServicesSpSp.  # noqa: E501

        SAML request signing certificate.  # noqa: E501

        :return: The signing_certificate of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate
        """
        return self._signing_certificate

    @signing_certificate.setter
    def signing_certificate(self, signing_certificate):
        """Sets the signing_certificate of this ProvidersSamlServicesSpSp.

        SAML request signing certificate.  # noqa: E501

        :param signing_certificate: The signing_certificate of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate
        """

        self._signing_certificate = signing_certificate

    @property
    def signing_enabled(self):
        """Gets the signing_enabled of this ProvidersSamlServicesSpSp.  # noqa: E501

        Indicates whether signing of requests is enabled for the SP.  # noqa: E501

        :return: The signing_enabled of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: bool
        """
        return self._signing_enabled

    @signing_enabled.setter
    def signing_enabled(self, signing_enabled):
        """Sets the signing_enabled of this ProvidersSamlServicesSpSp.

        Indicates whether signing of requests is enabled for the SP.  # noqa: E501

        :param signing_enabled: The signing_enabled of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: bool
        """

        self._signing_enabled = signing_enabled

    @property
    def user_id(self):
        """Gets the user_id of this ProvidersSamlServicesSpSp.  # noqa: E501

        ID of SP maintainer.  # noqa: E501

        :return: The user_id of this ProvidersSamlServicesSpSp.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProvidersSamlServicesSpSp.

        ID of SP maintainer.  # noqa: E501

        :param user_id: The user_id of this ProvidersSamlServicesSpSp.  # noqa: E501
        :type: str
        """
        if user_id is not None and len(user_id) > 256:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `256`")  # noqa: E501
        if user_id is not None and len(user_id) < 0:
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvidersSamlServicesSpSp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
