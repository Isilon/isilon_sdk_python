# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.performance_settings_settings_client_impact import PerformanceSettingsSettingsClientImpact  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.performance_settings_settings_cpu_limit_us import PerformanceSettingsSettingsCpuLimitUs  # noqa: F401,E501


class PerformanceSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_impact': 'PerformanceSettingsSettingsClientImpact',
        'cpu_limit_us': 'PerformanceSettingsSettingsCpuLimitUs',
        'disk_read_limit': 'PerformanceSettingsSettingsCpuLimitUs',
        'disk_write_limit': 'PerformanceSettingsSettingsCpuLimitUs',
        'main_loop_timeout_sec': 'int',
        'max_dataset_count': 'int',
        'max_filter_count': 'int',
        'max_stat_size': 'int',
        'max_top_n_collection_count': 'int',
        'max_workload_count': 'int',
        'protocol_ops_limit_enabled': 'bool',
        'protocol_ops_limit_for_zero_curr_protocol_ops': 'int',
        'stats_d_query_interval_sec': 'int',
        'stats_d_query_timeout_sec': 'int',
        'target_disk_time_in_queue_ms': 'float',
        'target_protocol_read_latency_usec': 'float',
        'target_protocol_write_latency_usec': 'float',
        'top_n_collection_count': 'int'
    }

    attribute_map = {
        'client_impact': 'client_impact',
        'cpu_limit_us': 'cpu_limit_us',
        'disk_read_limit': 'disk_read_limit',
        'disk_write_limit': 'disk_write_limit',
        'main_loop_timeout_sec': 'main_loop_timeout_sec',
        'max_dataset_count': 'max_dataset_count',
        'max_filter_count': 'max_filter_count',
        'max_stat_size': 'max_stat_size',
        'max_top_n_collection_count': 'max_top_n_collection_count',
        'max_workload_count': 'max_workload_count',
        'protocol_ops_limit_enabled': 'protocol_ops_limit_enabled',
        'protocol_ops_limit_for_zero_curr_protocol_ops': 'protocol_ops_limit_for_zero_curr_protocol_ops',
        'stats_d_query_interval_sec': 'stats_d_query_interval_sec',
        'stats_d_query_timeout_sec': 'stats_d_query_timeout_sec',
        'target_disk_time_in_queue_ms': 'target_disk_time_in_queue_ms',
        'target_protocol_read_latency_usec': 'target_protocol_read_latency_usec',
        'target_protocol_write_latency_usec': 'target_protocol_write_latency_usec',
        'top_n_collection_count': 'top_n_collection_count'
    }

    def __init__(self, client_impact=None, cpu_limit_us=None, disk_read_limit=None, disk_write_limit=None, main_loop_timeout_sec=None, max_dataset_count=None, max_filter_count=None, max_stat_size=None, max_top_n_collection_count=None, max_workload_count=None, protocol_ops_limit_enabled=None, protocol_ops_limit_for_zero_curr_protocol_ops=None, stats_d_query_interval_sec=None, stats_d_query_timeout_sec=None, target_disk_time_in_queue_ms=None, target_protocol_read_latency_usec=None, target_protocol_write_latency_usec=None, top_n_collection_count=None):  # noqa: E501
        """PerformanceSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._client_impact = None
        self._cpu_limit_us = None
        self._disk_read_limit = None
        self._disk_write_limit = None
        self._main_loop_timeout_sec = None
        self._max_dataset_count = None
        self._max_filter_count = None
        self._max_stat_size = None
        self._max_top_n_collection_count = None
        self._max_workload_count = None
        self._protocol_ops_limit_enabled = None
        self._protocol_ops_limit_for_zero_curr_protocol_ops = None
        self._stats_d_query_interval_sec = None
        self._stats_d_query_timeout_sec = None
        self._target_disk_time_in_queue_ms = None
        self._target_protocol_read_latency_usec = None
        self._target_protocol_write_latency_usec = None
        self._top_n_collection_count = None
        self.discriminator = None

        if client_impact is not None:
            self.client_impact = client_impact
        if cpu_limit_us is not None:
            self.cpu_limit_us = cpu_limit_us
        if disk_read_limit is not None:
            self.disk_read_limit = disk_read_limit
        if disk_write_limit is not None:
            self.disk_write_limit = disk_write_limit
        if main_loop_timeout_sec is not None:
            self.main_loop_timeout_sec = main_loop_timeout_sec
        self.max_dataset_count = max_dataset_count
        self.max_filter_count = max_filter_count
        self.max_stat_size = max_stat_size
        self.max_top_n_collection_count = max_top_n_collection_count
        self.max_workload_count = max_workload_count
        if protocol_ops_limit_enabled is not None:
            self.protocol_ops_limit_enabled = protocol_ops_limit_enabled
        if protocol_ops_limit_for_zero_curr_protocol_ops is not None:
            self.protocol_ops_limit_for_zero_curr_protocol_ops = protocol_ops_limit_for_zero_curr_protocol_ops
        if stats_d_query_interval_sec is not None:
            self.stats_d_query_interval_sec = stats_d_query_interval_sec
        if stats_d_query_timeout_sec is not None:
            self.stats_d_query_timeout_sec = stats_d_query_timeout_sec
        if target_disk_time_in_queue_ms is not None:
            self.target_disk_time_in_queue_ms = target_disk_time_in_queue_ms
        if target_protocol_read_latency_usec is not None:
            self.target_protocol_read_latency_usec = target_protocol_read_latency_usec
        if target_protocol_write_latency_usec is not None:
            self.target_protocol_write_latency_usec = target_protocol_write_latency_usec
        self.top_n_collection_count = top_n_collection_count

    @property
    def client_impact(self):
        """Gets the client_impact of this PerformanceSettingsSettings.  # noqa: E501

        This indicates how much this workload can impact clients. The thresholds are added to the latency thresholds for computing the throttling limits.  # noqa: E501

        :return: The client_impact of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: PerformanceSettingsSettingsClientImpact
        """
        return self._client_impact

    @client_impact.setter
    def client_impact(self, client_impact):
        """Sets the client_impact of this PerformanceSettingsSettings.

        This indicates how much this workload can impact clients. The thresholds are added to the latency thresholds for computing the throttling limits.  # noqa: E501

        :param client_impact: The client_impact of this PerformanceSettingsSettings.  # noqa: E501
        :type: PerformanceSettingsSettingsClientImpact
        """

        self._client_impact = client_impact

    @property
    def cpu_limit_us(self):
        """Gets the cpu_limit_us of this PerformanceSettingsSettings.  # noqa: E501

          # noqa: E501

        :return: The cpu_limit_us of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: PerformanceSettingsSettingsCpuLimitUs
        """
        return self._cpu_limit_us

    @cpu_limit_us.setter
    def cpu_limit_us(self, cpu_limit_us):
        """Sets the cpu_limit_us of this PerformanceSettingsSettings.

          # noqa: E501

        :param cpu_limit_us: The cpu_limit_us of this PerformanceSettingsSettings.  # noqa: E501
        :type: PerformanceSettingsSettingsCpuLimitUs
        """

        self._cpu_limit_us = cpu_limit_us

    @property
    def disk_read_limit(self):
        """Gets the disk_read_limit of this PerformanceSettingsSettings.  # noqa: E501

          # noqa: E501

        :return: The disk_read_limit of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: PerformanceSettingsSettingsCpuLimitUs
        """
        return self._disk_read_limit

    @disk_read_limit.setter
    def disk_read_limit(self, disk_read_limit):
        """Sets the disk_read_limit of this PerformanceSettingsSettings.

          # noqa: E501

        :param disk_read_limit: The disk_read_limit of this PerformanceSettingsSettings.  # noqa: E501
        :type: PerformanceSettingsSettingsCpuLimitUs
        """

        self._disk_read_limit = disk_read_limit

    @property
    def disk_write_limit(self):
        """Gets the disk_write_limit of this PerformanceSettingsSettings.  # noqa: E501

          # noqa: E501

        :return: The disk_write_limit of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: PerformanceSettingsSettingsCpuLimitUs
        """
        return self._disk_write_limit

    @disk_write_limit.setter
    def disk_write_limit(self, disk_write_limit):
        """Sets the disk_write_limit of this PerformanceSettingsSettings.

          # noqa: E501

        :param disk_write_limit: The disk_write_limit of this PerformanceSettingsSettings.  # noqa: E501
        :type: PerformanceSettingsSettingsCpuLimitUs
        """

        self._disk_write_limit = disk_write_limit

    @property
    def main_loop_timeout_sec(self):
        """Gets the main_loop_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501

        Maximum time the main PP Leader's loop will take to complete, in seconds.  # noqa: E501

        :return: The main_loop_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._main_loop_timeout_sec

    @main_loop_timeout_sec.setter
    def main_loop_timeout_sec(self, main_loop_timeout_sec):
        """Sets the main_loop_timeout_sec of this PerformanceSettingsSettings.

        Maximum time the main PP Leader's loop will take to complete, in seconds.  # noqa: E501

        :param main_loop_timeout_sec: The main_loop_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if main_loop_timeout_sec is not None and main_loop_timeout_sec > 120:  # noqa: E501
            raise ValueError("Invalid value for `main_loop_timeout_sec`, must be a value less than or equal to `120`")  # noqa: E501
        if main_loop_timeout_sec is not None and main_loop_timeout_sec < 1:  # noqa: E501
            raise ValueError("Invalid value for `main_loop_timeout_sec`, must be a value greater than or equal to `1`")  # noqa: E501

        self._main_loop_timeout_sec = main_loop_timeout_sec

    @property
    def max_dataset_count(self):
        """Gets the max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of datasets that can be configured on the system.  # noqa: E501

        :return: The max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_dataset_count

    @max_dataset_count.setter
    def max_dataset_count(self, max_dataset_count):
        """Sets the max_dataset_count of this PerformanceSettingsSettings.

        The maximum number of datasets that can be configured on the system.  # noqa: E501

        :param max_dataset_count: The max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_dataset_count is None:
            raise ValueError("Invalid value for `max_dataset_count`, must not be `None`")  # noqa: E501
        if max_dataset_count is not None and max_dataset_count > 4:  # noqa: E501
            raise ValueError("Invalid value for `max_dataset_count`, must be a value less than or equal to `4`")  # noqa: E501
        if max_dataset_count is not None and max_dataset_count < 4:  # noqa: E501
            raise ValueError("Invalid value for `max_dataset_count`, must be a value greater than or equal to `4`")  # noqa: E501

        self._max_dataset_count = max_dataset_count

    @property
    def max_filter_count(self):
        """Gets the max_filter_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of filters that can be applied to a configured performance dataset.  # noqa: E501

        :return: The max_filter_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_filter_count

    @max_filter_count.setter
    def max_filter_count(self, max_filter_count):
        """Sets the max_filter_count of this PerformanceSettingsSettings.

        The maximum number of filters that can be applied to a configured performance dataset.  # noqa: E501

        :param max_filter_count: The max_filter_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_filter_count is None:
            raise ValueError("Invalid value for `max_filter_count`, must not be `None`")  # noqa: E501
        if max_filter_count is not None and max_filter_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_filter_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_filter_count is not None and max_filter_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_filter_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_filter_count = max_filter_count

    @property
    def max_stat_size(self):
        """Gets the max_stat_size of this PerformanceSettingsSettings.  # noqa: E501

        The maximum size in bytes of a single performance dataset sample.  # noqa: E501

        :return: The max_stat_size of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_stat_size

    @max_stat_size.setter
    def max_stat_size(self, max_stat_size):
        """Sets the max_stat_size of this PerformanceSettingsSettings.

        The maximum size in bytes of a single performance dataset sample.  # noqa: E501

        :param max_stat_size: The max_stat_size of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_stat_size is None:
            raise ValueError("Invalid value for `max_stat_size`, must not be `None`")  # noqa: E501
        if max_stat_size is not None and max_stat_size > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_stat_size`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_stat_size is not None and max_stat_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_stat_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_stat_size = max_stat_size

    @property
    def max_top_n_collection_count(self):
        """Gets the max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum valid value for the 'top_n_collection_count' setting.  # noqa: E501

        :return: The max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_top_n_collection_count

    @max_top_n_collection_count.setter
    def max_top_n_collection_count(self, max_top_n_collection_count):
        """Sets the max_top_n_collection_count of this PerformanceSettingsSettings.

        The maximum valid value for the 'top_n_collection_count' setting.  # noqa: E501

        :param max_top_n_collection_count: The max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_top_n_collection_count is None:
            raise ValueError("Invalid value for `max_top_n_collection_count`, must not be `None`")  # noqa: E501
        if max_top_n_collection_count is not None and max_top_n_collection_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_top_n_collection_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_top_n_collection_count is not None and max_top_n_collection_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_top_n_collection_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_top_n_collection_count = max_top_n_collection_count

    @property
    def max_workload_count(self):
        """Gets the max_workload_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of workloads that can be pinned to a configured performance dataset.  # noqa: E501

        :return: The max_workload_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_workload_count

    @max_workload_count.setter
    def max_workload_count(self, max_workload_count):
        """Sets the max_workload_count of this PerformanceSettingsSettings.

        The maximum number of workloads that can be pinned to a configured performance dataset.  # noqa: E501

        :param max_workload_count: The max_workload_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_workload_count is None:
            raise ValueError("Invalid value for `max_workload_count`, must not be `None`")  # noqa: E501
        if max_workload_count is not None and max_workload_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_workload_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_workload_count is not None and max_workload_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_workload_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_workload_count = max_workload_count

    @property
    def protocol_ops_limit_enabled(self):
        """Gets the protocol_ops_limit_enabled of this PerformanceSettingsSettings.  # noqa: E501

        Limit workload performance by protocol ops.  # noqa: E501

        :return: The protocol_ops_limit_enabled of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._protocol_ops_limit_enabled

    @protocol_ops_limit_enabled.setter
    def protocol_ops_limit_enabled(self, protocol_ops_limit_enabled):
        """Sets the protocol_ops_limit_enabled of this PerformanceSettingsSettings.

        Limit workload performance by protocol ops.  # noqa: E501

        :param protocol_ops_limit_enabled: The protocol_ops_limit_enabled of this PerformanceSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._protocol_ops_limit_enabled = protocol_ops_limit_enabled

    @property
    def protocol_ops_limit_for_zero_curr_protocol_ops(self):
        """Gets the protocol_ops_limit_for_zero_curr_protocol_ops of this PerformanceSettingsSettings.  # noqa: E501

        Protocol ops limit to set when current protocol ops on a node is zero.  # noqa: E501

        :return: The protocol_ops_limit_for_zero_curr_protocol_ops of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._protocol_ops_limit_for_zero_curr_protocol_ops

    @protocol_ops_limit_for_zero_curr_protocol_ops.setter
    def protocol_ops_limit_for_zero_curr_protocol_ops(self, protocol_ops_limit_for_zero_curr_protocol_ops):
        """Sets the protocol_ops_limit_for_zero_curr_protocol_ops of this PerformanceSettingsSettings.

        Protocol ops limit to set when current protocol ops on a node is zero.  # noqa: E501

        :param protocol_ops_limit_for_zero_curr_protocol_ops: The protocol_ops_limit_for_zero_curr_protocol_ops of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if protocol_ops_limit_for_zero_curr_protocol_ops is not None and protocol_ops_limit_for_zero_curr_protocol_ops > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `protocol_ops_limit_for_zero_curr_protocol_ops`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if protocol_ops_limit_for_zero_curr_protocol_ops is not None and protocol_ops_limit_for_zero_curr_protocol_ops < 0:  # noqa: E501
            raise ValueError("Invalid value for `protocol_ops_limit_for_zero_curr_protocol_ops`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protocol_ops_limit_for_zero_curr_protocol_ops = protocol_ops_limit_for_zero_curr_protocol_ops

    @property
    def stats_d_query_interval_sec(self):
        """Gets the stats_d_query_interval_sec of this PerformanceSettingsSettings.  # noqa: E501

        The number of seconds between consecutive queries to isi_stats_d.  # noqa: E501

        :return: The stats_d_query_interval_sec of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._stats_d_query_interval_sec

    @stats_d_query_interval_sec.setter
    def stats_d_query_interval_sec(self, stats_d_query_interval_sec):
        """Sets the stats_d_query_interval_sec of this PerformanceSettingsSettings.

        The number of seconds between consecutive queries to isi_stats_d.  # noqa: E501

        :param stats_d_query_interval_sec: The stats_d_query_interval_sec of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if stats_d_query_interval_sec is not None and stats_d_query_interval_sec > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `stats_d_query_interval_sec`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if stats_d_query_interval_sec is not None and stats_d_query_interval_sec < 0:  # noqa: E501
            raise ValueError("Invalid value for `stats_d_query_interval_sec`, must be a value greater than or equal to `0`")  # noqa: E501

        self._stats_d_query_interval_sec = stats_d_query_interval_sec

    @property
    def stats_d_query_timeout_sec(self):
        """Gets the stats_d_query_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501

        The number of seconds before a query to isi_stats_d times out.  # noqa: E501

        :return: The stats_d_query_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._stats_d_query_timeout_sec

    @stats_d_query_timeout_sec.setter
    def stats_d_query_timeout_sec(self, stats_d_query_timeout_sec):
        """Sets the stats_d_query_timeout_sec of this PerformanceSettingsSettings.

        The number of seconds before a query to isi_stats_d times out.  # noqa: E501

        :param stats_d_query_timeout_sec: The stats_d_query_timeout_sec of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if stats_d_query_timeout_sec is not None and stats_d_query_timeout_sec > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `stats_d_query_timeout_sec`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if stats_d_query_timeout_sec is not None and stats_d_query_timeout_sec < 0:  # noqa: E501
            raise ValueError("Invalid value for `stats_d_query_timeout_sec`, must be a value greater than or equal to `0`")  # noqa: E501

        self._stats_d_query_timeout_sec = stats_d_query_timeout_sec

    @property
    def target_disk_time_in_queue_ms(self):
        """Gets the target_disk_time_in_queue_ms of this PerformanceSettingsSettings.  # noqa: E501

        The time in disk queue threshold (in milliseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :return: The target_disk_time_in_queue_ms of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: float
        """
        return self._target_disk_time_in_queue_ms

    @target_disk_time_in_queue_ms.setter
    def target_disk_time_in_queue_ms(self, target_disk_time_in_queue_ms):
        """Sets the target_disk_time_in_queue_ms of this PerformanceSettingsSettings.

        The time in disk queue threshold (in milliseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :param target_disk_time_in_queue_ms: The target_disk_time_in_queue_ms of this PerformanceSettingsSettings.  # noqa: E501
        :type: float
        """
        if target_disk_time_in_queue_ms is not None and target_disk_time_in_queue_ms > 100.0:  # noqa: E501
            raise ValueError("Invalid value for `target_disk_time_in_queue_ms`, must be a value less than or equal to `100.0`")  # noqa: E501
        if target_disk_time_in_queue_ms is not None and target_disk_time_in_queue_ms < 1.0:  # noqa: E501
            raise ValueError("Invalid value for `target_disk_time_in_queue_ms`, must be a value greater than or equal to `1.0`")  # noqa: E501

        self._target_disk_time_in_queue_ms = target_disk_time_in_queue_ms

    @property
    def target_protocol_read_latency_usec(self):
        """Gets the target_protocol_read_latency_usec of this PerformanceSettingsSettings.  # noqa: E501

        The read latency threshold (in microseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :return: The target_protocol_read_latency_usec of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: float
        """
        return self._target_protocol_read_latency_usec

    @target_protocol_read_latency_usec.setter
    def target_protocol_read_latency_usec(self, target_protocol_read_latency_usec):
        """Sets the target_protocol_read_latency_usec of this PerformanceSettingsSettings.

        The read latency threshold (in microseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :param target_protocol_read_latency_usec: The target_protocol_read_latency_usec of this PerformanceSettingsSettings.  # noqa: E501
        :type: float
        """
        if target_protocol_read_latency_usec is not None and target_protocol_read_latency_usec > 1.79769E+308:  # noqa: E501
            raise ValueError("Invalid value for `target_protocol_read_latency_usec`, must be a value less than or equal to `1.79769E+308`")  # noqa: E501
        if target_protocol_read_latency_usec is not None and target_protocol_read_latency_usec < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `target_protocol_read_latency_usec`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._target_protocol_read_latency_usec = target_protocol_read_latency_usec

    @property
    def target_protocol_write_latency_usec(self):
        """Gets the target_protocol_write_latency_usec of this PerformanceSettingsSettings.  # noqa: E501

        The write latency threshold (in microseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :return: The target_protocol_write_latency_usec of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: float
        """
        return self._target_protocol_write_latency_usec

    @target_protocol_write_latency_usec.setter
    def target_protocol_write_latency_usec(self, target_protocol_write_latency_usec):
        """Sets the target_protocol_write_latency_usec of this PerformanceSettingsSettings.

        The write latency threshold (in microseconds) beyond which Partitioned Performance considers a node to be degraded.  # noqa: E501

        :param target_protocol_write_latency_usec: The target_protocol_write_latency_usec of this PerformanceSettingsSettings.  # noqa: E501
        :type: float
        """
        if target_protocol_write_latency_usec is not None and target_protocol_write_latency_usec > 1.79769E+308:  # noqa: E501
            raise ValueError("Invalid value for `target_protocol_write_latency_usec`, must be a value less than or equal to `1.79769E+308`")  # noqa: E501
        if target_protocol_write_latency_usec is not None and target_protocol_write_latency_usec < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `target_protocol_write_latency_usec`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._target_protocol_write_latency_usec = target_protocol_write_latency_usec

    @property
    def top_n_collection_count(self):
        """Gets the top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501

        The number of highest resource-consuming workloads tracked and collected by the system per configured performance dataset. The number of workloads pinned to a configured performance dataset does not count towards this value.  # noqa: E501

        :return: The top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._top_n_collection_count

    @top_n_collection_count.setter
    def top_n_collection_count(self, top_n_collection_count):
        """Sets the top_n_collection_count of this PerformanceSettingsSettings.

        The number of highest resource-consuming workloads tracked and collected by the system per configured performance dataset. The number of workloads pinned to a configured performance dataset does not count towards this value.  # noqa: E501

        :param top_n_collection_count: The top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if top_n_collection_count is None:
            raise ValueError("Invalid value for `top_n_collection_count`, must not be `None`")  # noqa: E501
        if top_n_collection_count is not None and top_n_collection_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `top_n_collection_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if top_n_collection_count is not None and top_n_collection_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `top_n_collection_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._top_n_collection_count = top_n_collection_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
