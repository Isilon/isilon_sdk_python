# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.certificates_ca_certificate_fingerprint import CertificatesCaCertificateFingerprint  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.providers_saml_services_cert_extract_settings_certificate_info_value import ProvidersSamlServicesCertExtractSettingsCertificateInfoValue  # noqa: F401,E501


class CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fingerprints': 'list[CertificatesCaCertificateFingerprint]',
        'issuer': 'str',
        'not_after': 'int',
        'not_before': 'int',
        'status': 'str',
        'subject': 'str',
        'value': 'ProvidersSamlServicesCertExtractSettingsCertificateInfoValue'
    }

    attribute_map = {
        'fingerprints': 'fingerprints',
        'issuer': 'issuer',
        'not_after': 'not_after',
        'not_before': 'not_before',
        'status': 'status',
        'subject': 'subject',
        'value': 'value'
    }

    def __init__(self, fingerprints=None, issuer=None, not_after=None, not_before=None, status=None, subject=None, value=None):  # noqa: E501
        """CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate - a model defined in Swagger"""  # noqa: E501

        self._fingerprints = None
        self._issuer = None
        self._not_after = None
        self._not_before = None
        self._status = None
        self._subject = None
        self._value = None
        self.discriminator = None

        if fingerprints is not None:
            self.fingerprints = fingerprints
        if issuer is not None:
            self.issuer = issuer
        if not_after is not None:
            self.not_after = not_after
        if not_before is not None:
            self.not_before = not_before
        if status is not None:
            self.status = status
        if subject is not None:
            self.subject = subject
        if value is not None:
            self.value = value

    @property
    def fingerprints(self):
        """Gets the fingerprints of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        A list of zero or more certificate fingerprints which can be used for certificate identification.  # noqa: E501

        :return: The fingerprints of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: list[CertificatesCaCertificateFingerprint]
        """
        return self._fingerprints

    @fingerprints.setter
    def fingerprints(self, fingerprints):
        """Sets the fingerprints of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        A list of zero or more certificate fingerprints which can be used for certificate identification.  # noqa: E501

        :param fingerprints: The fingerprints of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: list[CertificatesCaCertificateFingerprint]
        """

        self._fingerprints = fingerprints

    @property
    def issuer(self):
        """Gets the issuer of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate issuer field extracted from the certificate.  # noqa: E501

        :return: The issuer of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate issuer field extracted from the certificate.  # noqa: E501

        :param issuer: The issuer of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: str
        """
        if issuer is not None and len(issuer) > 2048:
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `2048`")  # noqa: E501
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")  # noqa: E501

        self._issuer = issuer

    @property
    def not_after(self):
        """Gets the not_after of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate notAfter field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid after this timestamp.  # noqa: E501

        :return: The not_after of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: int
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate notAfter field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid after this timestamp.  # noqa: E501

        :param not_after: The not_after of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: int
        """
        if not_after is not None and not_after > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `not_after`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if not_after is not None and not_after < 0:  # noqa: E501
            raise ValueError("Invalid value for `not_after`, must be a value greater than or equal to `0`")  # noqa: E501

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate notBefore field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid before this timestamp.  # noqa: E501

        :return: The not_before of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate notBefore field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid before this timestamp.  # noqa: E501

        :param not_before: The not_before of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: int
        """
        if not_before is not None and not_before > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `not_before`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if not_before is not None and not_before < 0:  # noqa: E501
            raise ValueError("Invalid value for `not_before`, must be a value greater than or equal to `0`")  # noqa: E501

        self._not_before = not_before

    @property
    def status(self):
        """Gets the status of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate validity status  # noqa: E501

        :return: The status of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate validity status  # noqa: E501

        :param status: The status of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["valid", "invalid", "expired", "expiring"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate subject field extracted from the certificate.  # noqa: E501

        :return: The subject of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate subject field extracted from the certificate.  # noqa: E501

        :param subject: The subject of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: str
        """
        if subject is not None and len(subject) > 2048:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `2048`")  # noqa: E501
        if subject is not None and len(subject) < 1:
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")  # noqa: E501

        self._subject = subject

    @property
    def value(self):
        """Gets the value of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501

        Certificate data.  # noqa: E501

        :return: The value of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :rtype: ProvidersSamlServicesCertExtractSettingsCertificateInfoValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.

        Certificate data.  # noqa: E501

        :param value: The value of this CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate.  # noqa: E501
        :type: ProvidersSamlServicesCertExtractSettingsCertificateInfoValue
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProvidersSamlServicesMetadataExtractItemResponseSigningCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
