# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.performance_settings_settings_cpu_limit_us_health_modifier import PerformanceSettingsSettingsCpuLimitUsHealthModifier  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.performance_settings_settings_cpu_limit_us_impact_multiplier import PerformanceSettingsSettingsCpuLimitUsImpactMultiplier  # noqa: F401,E501


class PerformanceSettingsSettingsCpuLimitUs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_limit': 'int',
        'health_modifier': 'PerformanceSettingsSettingsCpuLimitUsHealthModifier',
        'impact_multiplier': 'PerformanceSettingsSettingsCpuLimitUsImpactMultiplier',
        'max_health_multiplier_unhealthy': 'float',
        'min_health_multiplier': 'float',
        'starting_health_multiplier': 'float'
    }

    attribute_map = {
        'base_limit': 'base_limit',
        'health_modifier': 'health_modifier',
        'impact_multiplier': 'impact_multiplier',
        'max_health_multiplier_unhealthy': 'max_health_multiplier_unhealthy',
        'min_health_multiplier': 'min_health_multiplier',
        'starting_health_multiplier': 'starting_health_multiplier'
    }

    def __init__(self, base_limit=None, health_modifier=None, impact_multiplier=None, max_health_multiplier_unhealthy=None, min_health_multiplier=None, starting_health_multiplier=None):  # noqa: E501
        """PerformanceSettingsSettingsCpuLimitUs - a model defined in Swagger"""  # noqa: E501

        self._base_limit = None
        self._health_modifier = None
        self._impact_multiplier = None
        self._max_health_multiplier_unhealthy = None
        self._min_health_multiplier = None
        self._starting_health_multiplier = None
        self.discriminator = None

        if base_limit is not None:
            self.base_limit = base_limit
        if health_modifier is not None:
            self.health_modifier = health_modifier
        if impact_multiplier is not None:
            self.impact_multiplier = impact_multiplier
        if max_health_multiplier_unhealthy is not None:
            self.max_health_multiplier_unhealthy = max_health_multiplier_unhealthy
        if min_health_multiplier is not None:
            self.min_health_multiplier = min_health_multiplier
        if starting_health_multiplier is not None:
            self.starting_health_multiplier = starting_health_multiplier

    @property
    def base_limit(self):
        """Gets the base_limit of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

        Base value for the resource limit. This value will be used to compute final workload's limits.  # noqa: E501

        :return: The base_limit of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: int
        """
        return self._base_limit

    @base_limit.setter
    def base_limit(self, base_limit):
        """Sets the base_limit of this PerformanceSettingsSettingsCpuLimitUs.

        Base value for the resource limit. This value will be used to compute final workload's limits.  # noqa: E501

        :param base_limit: The base_limit of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: int
        """
        if base_limit is not None and base_limit > 30000000:  # noqa: E501
            raise ValueError("Invalid value for `base_limit`, must be a value less than or equal to `30000000`")  # noqa: E501
        if base_limit is not None and base_limit < 10:  # noqa: E501
            raise ValueError("Invalid value for `base_limit`, must be a value greater than or equal to `10`")  # noqa: E501

        self._base_limit = base_limit

    @property
    def health_modifier(self):
        """Gets the health_modifier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

          # noqa: E501

        :return: The health_modifier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: PerformanceSettingsSettingsCpuLimitUsHealthModifier
        """
        return self._health_modifier

    @health_modifier.setter
    def health_modifier(self, health_modifier):
        """Sets the health_modifier of this PerformanceSettingsSettingsCpuLimitUs.

          # noqa: E501

        :param health_modifier: The health_modifier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: PerformanceSettingsSettingsCpuLimitUsHealthModifier
        """

        self._health_modifier = health_modifier

    @property
    def impact_multiplier(self):
        """Gets the impact_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

          # noqa: E501

        :return: The impact_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: PerformanceSettingsSettingsCpuLimitUsImpactMultiplier
        """
        return self._impact_multiplier

    @impact_multiplier.setter
    def impact_multiplier(self, impact_multiplier):
        """Sets the impact_multiplier of this PerformanceSettingsSettingsCpuLimitUs.

          # noqa: E501

        :param impact_multiplier: The impact_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: PerformanceSettingsSettingsCpuLimitUsImpactMultiplier
        """

        self._impact_multiplier = impact_multiplier

    @property
    def max_health_multiplier_unhealthy(self):
        """Gets the max_health_multiplier_unhealthy of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

        Maximum multiplier computed from cluster's health when the cluster is not healthy  # noqa: E501

        :return: The max_health_multiplier_unhealthy of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: float
        """
        return self._max_health_multiplier_unhealthy

    @max_health_multiplier_unhealthy.setter
    def max_health_multiplier_unhealthy(self, max_health_multiplier_unhealthy):
        """Sets the max_health_multiplier_unhealthy of this PerformanceSettingsSettingsCpuLimitUs.

        Maximum multiplier computed from cluster's health when the cluster is not healthy  # noqa: E501

        :param max_health_multiplier_unhealthy: The max_health_multiplier_unhealthy of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: float
        """
        if max_health_multiplier_unhealthy is not None and max_health_multiplier_unhealthy > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `max_health_multiplier_unhealthy`, must be a value less than or equal to `10.0`")  # noqa: E501
        if max_health_multiplier_unhealthy is not None and max_health_multiplier_unhealthy < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `max_health_multiplier_unhealthy`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._max_health_multiplier_unhealthy = max_health_multiplier_unhealthy

    @property
    def min_health_multiplier(self):
        """Gets the min_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

        Minimum multiplier computed from cluster's health.  # noqa: E501

        :return: The min_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: float
        """
        return self._min_health_multiplier

    @min_health_multiplier.setter
    def min_health_multiplier(self, min_health_multiplier):
        """Sets the min_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.

        Minimum multiplier computed from cluster's health.  # noqa: E501

        :param min_health_multiplier: The min_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: float
        """
        if min_health_multiplier is not None and min_health_multiplier > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `min_health_multiplier`, must be a value less than or equal to `10.0`")  # noqa: E501
        if min_health_multiplier is not None and min_health_multiplier < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `min_health_multiplier`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._min_health_multiplier = min_health_multiplier

    @property
    def starting_health_multiplier(self):
        """Gets the starting_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501

        Starting health multiplier when the workload is created  # noqa: E501

        :return: The starting_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :rtype: float
        """
        return self._starting_health_multiplier

    @starting_health_multiplier.setter
    def starting_health_multiplier(self, starting_health_multiplier):
        """Sets the starting_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.

        Starting health multiplier when the workload is created  # noqa: E501

        :param starting_health_multiplier: The starting_health_multiplier of this PerformanceSettingsSettingsCpuLimitUs.  # noqa: E501
        :type: float
        """
        if starting_health_multiplier is not None and starting_health_multiplier > 10.0:  # noqa: E501
            raise ValueError("Invalid value for `starting_health_multiplier`, must be a value less than or equal to `10.0`")  # noqa: E501
        if starting_health_multiplier is not None and starting_health_multiplier < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `starting_health_multiplier`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._starting_health_multiplier = starting_health_multiplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceSettingsSettingsCpuLimitUs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
