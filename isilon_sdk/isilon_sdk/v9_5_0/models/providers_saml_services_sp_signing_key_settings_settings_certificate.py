# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_5_0.models.providers_saml_services_sp_signing_key_settings_settings_certificate_key import ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateKey  # noqa: F401,E501
from isilon_sdk.v9_5_0.models.providers_saml_services_sp_signing_key_settings_settings_certificate_subject import ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject  # noqa: F401,E501


class ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration': 'int',
        'key': 'ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateKey',
        'subject': 'ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject'
    }

    attribute_map = {
        'expiration': 'expiration',
        'key': 'key',
        'subject': 'subject'
    }

    def __init__(self, expiration=None, key=None, subject=None):  # noqa: E501
        """ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate - a model defined in Swagger"""  # noqa: E501

        self._expiration = None
        self._key = None
        self._subject = None
        self.discriminator = None

        if expiration is not None:
            self.expiration = expiration
        if key is not None:
            self.key = key
        if subject is not None:
            self.subject = subject

    @property
    def expiration(self):
        """Gets the expiration of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501

        The number of seconds the certificate is valid for after it is created.  # noqa: E501

        :return: The expiration of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.

        The number of seconds the certificate is valid for after it is created.  # noqa: E501

        :param expiration: The expiration of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :type: int
        """
        if expiration is not None and expiration > 3122064000:  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must be a value less than or equal to `3122064000`")  # noqa: E501
        if expiration is not None and expiration < 1800:  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must be a value greater than or equal to `1800`")  # noqa: E501

        self._expiration = expiration

    @property
    def key(self):
        """Gets the key of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501

        Specifies the key parameters used when generating a new certificate.  # noqa: E501

        :return: The key of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :rtype: ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.

        Specifies the key parameters used when generating a new certificate.  # noqa: E501

        :param key: The key of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :type: ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateKey
        """

        self._key = key

    @property
    def subject(self):
        """Gets the subject of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501

        Specifies the subject used when generating a new certificate.  # noqa: E501

        :return: The subject of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :rtype: ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.

        Specifies the subject used when generating a new certificate.  # noqa: E501

        :param subject: The subject of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate.  # noqa: E501
        :type: ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvidersSamlServicesSpSigningKeySettingsSettingsCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
