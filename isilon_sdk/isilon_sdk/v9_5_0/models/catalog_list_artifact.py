# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CatalogListArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        'desc': 'str',
        'hash': 'str',
        'onefs_version': 'int',
        'readme': 'bool',
        'reference': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'desc': 'desc',
        'hash': 'hash',
        'onefs_version': 'onefs_version',
        'readme': 'readme',
        'reference': 'reference'
    }

    def __init__(self, content_type=None, desc=None, hash=None, onefs_version=None, readme=None, reference=None):  # noqa: E501
        """CatalogListArtifact - a model defined in Swagger"""  # noqa: E501

        self._content_type = None
        self._desc = None
        self._hash = None
        self._onefs_version = None
        self._readme = None
        self._reference = None
        self.discriminator = None

        if content_type is not None:
            self.content_type = content_type
        if desc is not None:
            self.desc = desc
        if hash is not None:
            self.hash = hash
        if onefs_version is not None:
            self.onefs_version = onefs_version
        if readme is not None:
            self.readme = readme
        if reference is not None:
            self.reference = reference

    @property
    def content_type(self):
        """Gets the content_type of this CatalogListArtifact.  # noqa: E501

        the type of upgrade  # noqa: E501

        :return: The content_type of this CatalogListArtifact.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CatalogListArtifact.

        the type of upgrade  # noqa: E501

        :param content_type: The content_type of this CatalogListArtifact.  # noqa: E501
        :type: str
        """
        if content_type is not None and len(content_type) > 128:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `128`")  # noqa: E501
        if content_type is not None and len(content_type) < 3:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `3`")  # noqa: E501

        self._content_type = content_type

    @property
    def desc(self):
        """Gets the desc of this CatalogListArtifact.  # noqa: E501

        description of package  # noqa: E501

        :return: The desc of this CatalogListArtifact.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this CatalogListArtifact.

        description of package  # noqa: E501

        :param desc: The desc of this CatalogListArtifact.  # noqa: E501
        :type: str
        """
        if desc is not None and len(desc) > 128:
            raise ValueError("Invalid value for `desc`, length must be less than or equal to `128`")  # noqa: E501
        if desc is not None and len(desc) < 3:
            raise ValueError("Invalid value for `desc`, length must be greater than or equal to `3`")  # noqa: E501

        self._desc = desc

    @property
    def hash(self):
        """Gets the hash of this CatalogListArtifact.  # noqa: E501

        hash associated with artifact  # noqa: E501

        :return: The hash of this CatalogListArtifact.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this CatalogListArtifact.

        hash associated with artifact  # noqa: E501

        :param hash: The hash of this CatalogListArtifact.  # noqa: E501
        :type: str
        """
        if hash is not None and len(hash) > 128:
            raise ValueError("Invalid value for `hash`, length must be less than or equal to `128`")  # noqa: E501
        if hash is not None and len(hash) < 3:
            raise ValueError("Invalid value for `hash`, length must be greater than or equal to `3`")  # noqa: E501

        self._hash = hash

    @property
    def onefs_version(self):
        """Gets the onefs_version of this CatalogListArtifact.  # noqa: E501

        onefs version  # noqa: E501

        :return: The onefs_version of this CatalogListArtifact.  # noqa: E501
        :rtype: int
        """
        return self._onefs_version

    @onefs_version.setter
    def onefs_version(self, onefs_version):
        """Sets the onefs_version of this CatalogListArtifact.

        onefs version  # noqa: E501

        :param onefs_version: The onefs_version of this CatalogListArtifact.  # noqa: E501
        :type: int
        """
        if onefs_version is not None and onefs_version > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `onefs_version`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if onefs_version is not None and onefs_version < 0:  # noqa: E501
            raise ValueError("Invalid value for `onefs_version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._onefs_version = onefs_version

    @property
    def readme(self):
        """Gets the readme of this CatalogListArtifact.  # noqa: E501

        value describing that README file exists  # noqa: E501

        :return: The readme of this CatalogListArtifact.  # noqa: E501
        :rtype: bool
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this CatalogListArtifact.

        value describing that README file exists  # noqa: E501

        :param readme: The readme of this CatalogListArtifact.  # noqa: E501
        :type: bool
        """

        self._readme = readme

    @property
    def reference(self):
        """Gets the reference of this CatalogListArtifact.  # noqa: E501

        onefs component that references this entry.  # noqa: E501

        :return: The reference of this CatalogListArtifact.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CatalogListArtifact.

        onefs component that references this entry.  # noqa: E501

        :param reference: The reference of this CatalogListArtifact.  # noqa: E501
        :type: str
        """
        if reference is not None and len(reference) > 128:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `128`")  # noqa: E501
        if reference is not None and len(reference) < 1:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `1`")  # noqa: E501

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogListArtifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
