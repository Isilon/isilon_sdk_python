# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_name': 'str',
        'country': 'str',
        'locality': 'str',
        'organization_units': 'list[str]',
        'organizations': 'list[str]',
        'state_or_province': 'str'
    }

    attribute_map = {
        'common_name': 'common_name',
        'country': 'country',
        'locality': 'locality',
        'organization_units': 'organization_units',
        'organizations': 'organizations',
        'state_or_province': 'state_or_province'
    }

    def __init__(self, common_name=None, country=None, locality=None, organization_units=None, organizations=None, state_or_province=None):  # noqa: E501
        """ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject - a model defined in Swagger"""  # noqa: E501

        self._common_name = None
        self._country = None
        self._locality = None
        self._organization_units = None
        self._organizations = None
        self._state_or_province = None
        self.discriminator = None

        if common_name is not None:
            self.common_name = common_name
        if country is not None:
            self.country = country
        if locality is not None:
            self.locality = locality
        if organization_units is not None:
            self.organization_units = organization_units
        if organizations is not None:
            self.organizations = organizations
        if state_or_province is not None:
            self.state_or_province = state_or_province

    @property
    def common_name(self):
        """Gets the common_name of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501


        :return: The common_name of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.


        :param common_name: The common_name of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: str
        """
        if common_name is not None and len(common_name) > 64:
            raise ValueError("Invalid value for `common_name`, length must be less than or equal to `64`")  # noqa: E501
        if common_name is not None and len(common_name) < 1:
            raise ValueError("Invalid value for `common_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._common_name = common_name

    @property
    def country(self):
        """Gets the country of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501


        :return: The country of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.


        :param country: The country of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")  # noqa: E501

        self._country = country

    @property
    def locality(self):
        """Gets the locality of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501


        :return: The locality of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.


        :param locality: The locality of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: str
        """
        if locality is not None and len(locality) > 128:
            raise ValueError("Invalid value for `locality`, length must be less than or equal to `128`")  # noqa: E501
        if locality is not None and len(locality) < 1:
            raise ValueError("Invalid value for `locality`, length must be greater than or equal to `1`")  # noqa: E501

        self._locality = locality

    @property
    def organization_units(self):
        """Gets the organization_units of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501

        The organization unit(s), OU, to use when generating a new certificate.  # noqa: E501

        :return: The organization_units of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_units

    @organization_units.setter
    def organization_units(self, organization_units):
        """Sets the organization_units of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.

        The organization unit(s), OU, to use when generating a new certificate.  # noqa: E501

        :param organization_units: The organization_units of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: list[str]
        """

        self._organization_units = organization_units

    @property
    def organizations(self):
        """Gets the organizations of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501

        The organization(s), O, to use when generating a new certificate.  # noqa: E501

        :return: The organizations of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.

        The organization(s), O, to use when generating a new certificate.  # noqa: E501

        :param organizations: The organizations of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501


        :return: The state_or_province of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.


        :param state_or_province: The state_or_province of this ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject.  # noqa: E501
        :type: str
        """
        if state_or_province is not None and len(state_or_province) > 128:
            raise ValueError("Invalid value for `state_or_province`, length must be less than or equal to `128`")  # noqa: E501
        if state_or_province is not None and len(state_or_province) < 1:
            raise ValueError("Invalid value for `state_or_province`, length must be greater than or equal to `1`")  # noqa: E501

        self._state_or_province = state_or_province

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvidersSamlServicesSpSigningKeySettingsSettingsCertificateSubject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
