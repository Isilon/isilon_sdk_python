# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 16
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistSettingsContactPrimary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'language': 'str',
        'last_name': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'first_name',
        'language': 'language',
        'last_name': 'last_name',
        'phone': 'phone'
    }

    def __init__(self, email='', first_name='', language='', last_name='', phone=''):  # noqa: E501
        """SupportassistSettingsContactPrimary - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._first_name = None
        self._language = None
        self._last_name = None
        self._phone = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if language is not None:
            self.language = language
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone

    @property
    def email(self):
        """Gets the email of this SupportassistSettingsContactPrimary.  # noqa: E501

        Contact's email address.  # noqa: E501

        :return: The email of this SupportassistSettingsContactPrimary.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SupportassistSettingsContactPrimary.

        Contact's email address.  # noqa: E501

        :param email: The email of this SupportassistSettingsContactPrimary.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 320:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `320`")  # noqa: E501
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")  # noqa: E501
        if email is not None and not re.search('(^$|^([a-zA-Z0-9._%-]+@([a-zA-Z0-9-]+\\.)+[a-zA-Z0-9]+$))', email):  # noqa: E501
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/(^$|^([a-zA-Z0-9._%-]+@([a-zA-Z0-9-]+\\.)+[a-zA-Z0-9]+$))/`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this SupportassistSettingsContactPrimary.  # noqa: E501

        Contact's first name.  # noqa: E501

        :return: The first_name of this SupportassistSettingsContactPrimary.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SupportassistSettingsContactPrimary.

        Contact's first name.  # noqa: E501

        :param first_name: The first_name of this SupportassistSettingsContactPrimary.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 50:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")  # noqa: E501
        if first_name is not None and len(first_name) < 0:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `0`")  # noqa: E501
        if first_name is not None and not re.search('[\\p{L}\\p{M}*\\-\\.\\\' ]*', first_name):  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/[\\p{L}\\p{M}*\\-\\.\\' ]*/`")  # noqa: E501

        self._first_name = first_name

    @property
    def language(self):
        """Gets the language of this SupportassistSettingsContactPrimary.  # noqa: E501


        :return: The language of this SupportassistSettingsContactPrimary.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SupportassistSettingsContactPrimary.


        :param language: The language of this SupportassistSettingsContactPrimary.  # noqa: E501
        :type: str
        """
        allowed_values = ["Cs", "Da", "De", "El", "En", "Es", "es-LA", "Fi", "fr-CA", "He", "It", "Ja", "Ko", "Nl", "No", "Pl", "Pt", "pt-BR", "Ru", "Sk", "Sv", "Th", "Tr", "zh-CN", "zh-TW"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this SupportassistSettingsContactPrimary.  # noqa: E501

        Contact's last name.  # noqa: E501

        :return: The last_name of this SupportassistSettingsContactPrimary.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SupportassistSettingsContactPrimary.

        Contact's last name.  # noqa: E501

        :param last_name: The last_name of this SupportassistSettingsContactPrimary.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 50:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")  # noqa: E501
        if last_name is not None and len(last_name) < 0:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `0`")  # noqa: E501
        if last_name is not None and not re.search('[\\p{L}\\p{M}*\\-\\.\\\' ]*', last_name):  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/[\\p{L}\\p{M}*\\-\\.\\' ]*/`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this SupportassistSettingsContactPrimary.  # noqa: E501

        Contact's phone number.  # noqa: E501

        :return: The phone of this SupportassistSettingsContactPrimary.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SupportassistSettingsContactPrimary.

        Contact's phone number.  # noqa: E501

        :param phone: The phone of this SupportassistSettingsContactPrimary.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) > 40:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `40`")  # noqa: E501
        if phone is not None and len(phone) < 0:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `0`")  # noqa: E501
        if phone is not None and not re.search('(^$|([\\.\\-\\+\/\\sxX]*([0-9]+|[\\(\\d+\\)])+)+)', phone):  # noqa: E501
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/(^$|([\\.\\-\\+\/\\sxX]*([0-9]+|[\\(\\d+\\)])+)+)/`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistSettingsContactPrimary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
