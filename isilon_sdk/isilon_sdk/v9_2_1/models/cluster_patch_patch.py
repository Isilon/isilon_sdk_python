# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 12
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterPatchPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'str',
        'patch': 'str',
        'process_type': 'str'
    }

    attribute_map = {
        'location': 'location',
        'patch': 'patch',
        'process_type': 'process_type'
    }

    def __init__(self, location=None, patch=None, process_type=None):  # noqa: E501
        """ClusterPatchPatch - a model defined in Swagger"""  # noqa: E501

        self._location = None
        self._patch = None
        self._process_type = None
        self.discriminator = None

        if location is not None:
            self.location = location
        self.patch = patch
        if process_type is not None:
            self.process_type = process_type

    @property
    def location(self):
        """Gets the location of this ClusterPatchPatch.  # noqa: E501

        The path location of the patch file.  # noqa: E501

        :return: The location of this ClusterPatchPatch.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ClusterPatchPatch.

        The path location of the patch file.  # noqa: E501

        :param location: The location of this ClusterPatchPatch.  # noqa: E501
        :type: str
        """
        if location is not None and len(location) > 4096:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `4096`")  # noqa: E501
        if location is not None and len(location) < 0:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `0`")  # noqa: E501

        self._location = location

    @property
    def patch(self):
        """Gets the patch of this ClusterPatchPatch.  # noqa: E501

        The id or filename of the patch to install.  # noqa: E501

        :return: The patch of this ClusterPatchPatch.  # noqa: E501
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ClusterPatchPatch.

        The id or filename of the patch to install.  # noqa: E501

        :param patch: The patch of this ClusterPatchPatch.  # noqa: E501
        :type: str
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501
        if patch is not None and len(patch) > 255:
            raise ValueError("Invalid value for `patch`, length must be less than or equal to `255`")  # noqa: E501
        if patch is not None and len(patch) < 0:
            raise ValueError("Invalid value for `patch`, length must be greater than or equal to `0`")  # noqa: E501

        self._patch = patch

    @property
    def process_type(self):
        """Gets the process_type of this ClusterPatchPatch.  # noqa: E501

        Process type can be 'simultaneous', 'rolling', or 'parallel'  # noqa: E501

        :return: The process_type of this ClusterPatchPatch.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this ClusterPatchPatch.

        Process type can be 'simultaneous', 'rolling', or 'parallel'  # noqa: E501

        :param process_type: The process_type of this ClusterPatchPatch.  # noqa: E501
        :type: str
        """
        if process_type is not None and len(process_type) > 255:
            raise ValueError("Invalid value for `process_type`, length must be less than or equal to `255`")  # noqa: E501
        if process_type is not None and len(process_type) < 6:
            raise ValueError("Invalid value for `process_type`, length must be greater than or equal to `6`")  # noqa: E501

        self._process_type = process_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterPatchPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
