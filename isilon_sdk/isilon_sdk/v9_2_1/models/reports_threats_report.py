# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 12
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportsThreatsReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'id': 'str',
        'policy_id': 'str',
        'remediation': 'str',
        'scan_id': 'str',
        'threat': 'str',
        'time': 'int'
    }

    attribute_map = {
        'file': 'file',
        'id': 'id',
        'policy_id': 'policy_id',
        'remediation': 'remediation',
        'scan_id': 'scan_id',
        'threat': 'threat',
        'time': 'time'
    }

    def __init__(self, file=None, id=None, policy_id=None, remediation=None, scan_id=None, threat=None, time=None):  # noqa: E501
        """ReportsThreatsReport - a model defined in Swagger"""  # noqa: E501

        self._file = None
        self._id = None
        self._policy_id = None
        self._remediation = None
        self._scan_id = None
        self._threat = None
        self._time = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if id is not None:
            self.id = id
        if policy_id is not None:
            self.policy_id = policy_id
        if remediation is not None:
            self.remediation = remediation
        if scan_id is not None:
            self.scan_id = scan_id
        if threat is not None:
            self.threat = threat
        if time is not None:
            self.time = time

    @property
    def file(self):
        """Gets the file of this ReportsThreatsReport.  # noqa: E501

        The file that contained the threat.  # noqa: E501

        :return: The file of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReportsThreatsReport.

        The file that contained the threat.  # noqa: E501

        :param file: The file of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if file is not None and len(file) > 4096:
            raise ValueError("Invalid value for `file`, length must be less than or equal to `4096`")  # noqa: E501
        if file is not None and len(file) < 0:
            raise ValueError("Invalid value for `file`, length must be greater than or equal to `0`")  # noqa: E501

        self._file = file

    @property
    def id(self):
        """Gets the id of this ReportsThreatsReport.  # noqa: E501

        A unique identifier for the report.  # noqa: E501

        :return: The id of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportsThreatsReport.

        A unique identifier for the report.  # noqa: E501

        :param id: The id of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def policy_id(self):
        """Gets the policy_id of this ReportsThreatsReport.  # noqa: E501

        The id of the policy that found this threat.  # noqa: E501

        :return: The policy_id of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ReportsThreatsReport.

        The id of the policy that found this threat.  # noqa: E501

        :param policy_id: The policy_id of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if policy_id is not None and len(policy_id) > 255:
            raise ValueError("Invalid value for `policy_id`, length must be less than or equal to `255`")  # noqa: E501
        if policy_id is not None and len(policy_id) < 0:
            raise ValueError("Invalid value for `policy_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._policy_id = policy_id

    @property
    def remediation(self):
        """Gets the remediation of this ReportsThreatsReport.  # noqa: E501

        The action that was taken to remediate the threat.  # noqa: E501

        :return: The remediation of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this ReportsThreatsReport.

        The action that was taken to remediate the threat.  # noqa: E501

        :param remediation: The remediation of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if remediation is not None and len(remediation) > 255:
            raise ValueError("Invalid value for `remediation`, length must be less than or equal to `255`")  # noqa: E501
        if remediation is not None and len(remediation) < 0:
            raise ValueError("Invalid value for `remediation`, length must be greater than or equal to `0`")  # noqa: E501

        self._remediation = remediation

    @property
    def scan_id(self):
        """Gets the scan_id of this ReportsThreatsReport.  # noqa: E501

        The id of the scan report this threat is associated with.  # noqa: E501

        :return: The scan_id of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this ReportsThreatsReport.

        The id of the scan report this threat is associated with.  # noqa: E501

        :param scan_id: The scan_id of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if scan_id is not None and len(scan_id) > 255:
            raise ValueError("Invalid value for `scan_id`, length must be less than or equal to `255`")  # noqa: E501
        if scan_id is not None and len(scan_id) < 0:
            raise ValueError("Invalid value for `scan_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._scan_id = scan_id

    @property
    def threat(self):
        """Gets the threat of this ReportsThreatsReport.  # noqa: E501

        A description of the threat that was found.  # noqa: E501

        :return: The threat of this ReportsThreatsReport.  # noqa: E501
        :rtype: str
        """
        return self._threat

    @threat.setter
    def threat(self, threat):
        """Sets the threat of this ReportsThreatsReport.

        A description of the threat that was found.  # noqa: E501

        :param threat: The threat of this ReportsThreatsReport.  # noqa: E501
        :type: str
        """
        if threat is not None and len(threat) > 255:
            raise ValueError("Invalid value for `threat`, length must be less than or equal to `255`")  # noqa: E501
        if threat is not None and len(threat) < 0:
            raise ValueError("Invalid value for `threat`, length must be greater than or equal to `0`")  # noqa: E501

        self._threat = threat

    @property
    def time(self):
        """Gets the time of this ReportsThreatsReport.  # noqa: E501


        :return: The time of this ReportsThreatsReport.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ReportsThreatsReport.


        :param time: The time of this ReportsThreatsReport.  # noqa: E501
        :type: int
        """
        if time is not None and time > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if time is not None and time < 0:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsThreatsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
