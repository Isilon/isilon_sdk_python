# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 12
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SedSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kmip_enabled': 'bool',
        'kmip_server': 'str',
        'supported': 'bool'
    }

    attribute_map = {
        'kmip_enabled': 'kmip_enabled',
        'kmip_server': 'kmip_server',
        'supported': 'supported'
    }

    def __init__(self, kmip_enabled=None, kmip_server=None, supported=None):  # noqa: E501
        """SedSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._kmip_enabled = None
        self._kmip_server = None
        self._supported = None
        self.discriminator = None

        self.kmip_enabled = kmip_enabled
        self.kmip_server = kmip_server
        self.supported = supported

    @property
    def kmip_enabled(self):
        """Gets the kmip_enabled of this SedSettingsSettings.  # noqa: E501

        True if the KMIP SEDS feature is enabled and migration is allowed. When set to false, the KMIP SEDS feature is disabled, migration is not allowed. User can disable the feature only when ALL keys are in LOCAL status.  # noqa: E501

        :return: The kmip_enabled of this SedSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._kmip_enabled

    @kmip_enabled.setter
    def kmip_enabled(self, kmip_enabled):
        """Sets the kmip_enabled of this SedSettingsSettings.

        True if the KMIP SEDS feature is enabled and migration is allowed. When set to false, the KMIP SEDS feature is disabled, migration is not allowed. User can disable the feature only when ALL keys are in LOCAL status.  # noqa: E501

        :param kmip_enabled: The kmip_enabled of this SedSettingsSettings.  # noqa: E501
        :type: bool
        """
        if kmip_enabled is None:
            raise ValueError("Invalid value for `kmip_enabled`, must not be `None`")  # noqa: E501

        self._kmip_enabled = kmip_enabled

    @property
    def kmip_server(self):
        """Gets the kmip_server of this SedSettingsSettings.  # noqa: E501

        Current kmip server.  # noqa: E501

        :return: The kmip_server of this SedSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._kmip_server

    @kmip_server.setter
    def kmip_server(self, kmip_server):
        """Sets the kmip_server of this SedSettingsSettings.

        Current kmip server.  # noqa: E501

        :param kmip_server: The kmip_server of this SedSettingsSettings.  # noqa: E501
        :type: str
        """
        if kmip_server is None:
            raise ValueError("Invalid value for `kmip_server`, must not be `None`")  # noqa: E501
        if kmip_server is not None and len(kmip_server) > 255:
            raise ValueError("Invalid value for `kmip_server`, length must be less than or equal to `255`")  # noqa: E501
        if kmip_server is not None and len(kmip_server) < 0:
            raise ValueError("Invalid value for `kmip_server`, length must be greater than or equal to `0`")  # noqa: E501

        self._kmip_server = kmip_server

    @property
    def supported(self):
        """Gets the supported of this SedSettingsSettings.  # noqa: E501

        True if the SEDS is supported by the platform.  # noqa: E501

        :return: The supported of this SedSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this SedSettingsSettings.

        True if the SEDS is supported by the platform.  # noqa: E501

        :param supported: The supported of this SedSettingsSettings.  # noqa: E501
        :type: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")  # noqa: E501

        self._supported = supported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SedSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
