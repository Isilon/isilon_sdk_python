# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 12
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventEventgroupDefinitionsEventgroupDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'channels': 'list[int]',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'no_ignore': 'bool',
        'node': 'bool',
        'rules': 'list[str]',
        'suppressed': 'bool'
    }

    attribute_map = {
        'category': 'category',
        'channels': 'channels',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'no_ignore': 'no_ignore',
        'node': 'node',
        'rules': 'rules',
        'suppressed': 'suppressed'
    }

    def __init__(self, category=None, channels=None, description=None, id=None, name=None, no_ignore=None, node=None, rules=None, suppressed=None):  # noqa: E501
        """EventEventgroupDefinitionsEventgroupDefinition - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._channels = None
        self._description = None
        self._id = None
        self._name = None
        self._no_ignore = None
        self._node = None
        self._rules = None
        self._suppressed = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if channels is not None:
            self.channels = channels
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if no_ignore is not None:
            self.no_ignore = no_ignore
        if node is not None:
            self.node = node
        if rules is not None:
            self.rules = rules
        if suppressed is not None:
            self.suppressed = suppressed

    @property
    def category(self):
        """Gets the category of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        ID of eventgroup category: all, 100000000 (SYS_DISK_EVENTS), 200000000 (NODE_STATUS_EVENTS), 300000000 (REBOOT_EVENTS), 400000000 (SW_EVENTS), 500000000 (QUOTA_EVENTS), 600000000 (SNAP_EVENTS), 700000000 (WINNET_EVENTS), 800000000 (FILESYS_EVENTS), 900000000 (HW_EVENTS), 1100000000 (CPOOL_EVENTS).  # noqa: E501

        :return: The category of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventEventgroupDefinitionsEventgroupDefinition.

        ID of eventgroup category: all, 100000000 (SYS_DISK_EVENTS), 200000000 (NODE_STATUS_EVENTS), 300000000 (REBOOT_EVENTS), 400000000 (SW_EVENTS), 500000000 (QUOTA_EVENTS), 600000000 (SNAP_EVENTS), 700000000 (WINNET_EVENTS), 800000000 (FILESYS_EVENTS), 900000000 (HW_EVENTS), 1100000000 (CPOOL_EVENTS).  # noqa: E501

        :param category: The category of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "100000000", "200000000", "300000000", "400000000", "500000000", "600000000", "700000000", "800000000", "900000000", "1100000000", "Unknown"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def channels(self):
        """Gets the channels of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        Channels by which this eventgroup type can be alerted.  # noqa: E501

        :return: The channels of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this EventEventgroupDefinitionsEventgroupDefinition.

        Channels by which this eventgroup type can be alerted.  # noqa: E501

        :param channels: The channels of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: list[int]
        """

        self._channels = channels

    @property
    def description(self):
        """Gets the description of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        Human readable description - may contain value placeholders.  # noqa: E501

        :return: The description of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventEventgroupDefinitionsEventgroupDefinition.

        Human readable description - may contain value placeholders.  # noqa: E501

        :param description: The description of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        Unique Identifier.  # noqa: E501

        :return: The id of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventEventgroupDefinitionsEventgroupDefinition.

        Unique Identifier.  # noqa: E501

        :param id: The id of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        Name for eventgroup.  # noqa: E501

        :return: The name of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventEventgroupDefinitionsEventgroupDefinition.

        Name for eventgroup.  # noqa: E501

        :param name: The name of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def no_ignore(self):
        """Gets the no_ignore of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        True if event should not be ignored.  # noqa: E501

        :return: The no_ignore of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._no_ignore

    @no_ignore.setter
    def no_ignore(self, no_ignore):
        """Sets the no_ignore of this EventEventgroupDefinitionsEventgroupDefinition.

        True if event should not be ignored.  # noqa: E501

        :param no_ignore: The no_ignore of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: bool
        """

        self._no_ignore = no_ignore

    @property
    def node(self):
        """Gets the node of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        True if this eventgroup type is node specific, false cluster wide.  # noqa: E501

        :return: The node of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this EventEventgroupDefinitionsEventgroupDefinition.

        True if this eventgroup type is node specific, false cluster wide.  # noqa: E501

        :param node: The node of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: bool
        """

        self._node = node

    @property
    def rules(self):
        """Gets the rules of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        Alert rules involving this eventgroup type.  # noqa: E501

        :return: The rules of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this EventEventgroupDefinitionsEventgroupDefinition.

        Alert rules involving this eventgroup type.  # noqa: E501

        :param rules: The rules of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: list[str]
        """

        self._rules = rules

    @property
    def suppressed(self):
        """Gets the suppressed of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501

        True if alerting is suppressed for this eventgroup type.  # noqa: E501

        :return: The suppressed of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this EventEventgroupDefinitionsEventgroupDefinition.

        True if alerting is suppressed for this eventgroup type.  # noqa: E501

        :param suppressed: The suppressed of this EventEventgroupDefinitionsEventgroupDefinition.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventEventgroupDefinitionsEventgroupDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
