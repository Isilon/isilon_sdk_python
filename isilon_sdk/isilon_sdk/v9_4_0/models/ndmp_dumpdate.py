# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NdmpDumpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date': 'int',
        'id': 'str',
        'level': 'int',
        'path': 'str',
        'snapid': 'int'
    }

    attribute_map = {
        'date': 'date',
        'id': 'id',
        'level': 'level',
        'path': 'path',
        'snapid': 'snapid'
    }

    def __init__(self, date=None, id=None, level=None, path=None, snapid=None):  # noqa: E501
        """NdmpDumpdate - a model defined in Swagger"""  # noqa: E501

        self._date = None
        self._id = None
        self._level = None
        self._path = None
        self._snapid = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if path is not None:
            self.path = path
        if snapid is not None:
            self.snapid = snapid

    @property
    def date(self):
        """Gets the date of this NdmpDumpdate.  # noqa: E501

        The backup time since epoch.  # noqa: E501

        :return: The date of this NdmpDumpdate.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this NdmpDumpdate.

        The backup time since epoch.  # noqa: E501

        :param date: The date of this NdmpDumpdate.  # noqa: E501
        :type: int
        """

        self._date = date

    @property
    def id(self):
        """Gets the id of this NdmpDumpdate.  # noqa: E501

        The unique display id.  # noqa: E501

        :return: The id of this NdmpDumpdate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NdmpDumpdate.

        The unique display id.  # noqa: E501

        :param id: The id of this NdmpDumpdate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this NdmpDumpdate.  # noqa: E501

        The level of the backup.  # noqa: E501

        :return: The level of this NdmpDumpdate.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this NdmpDumpdate.

        The level of the backup.  # noqa: E501

        :param level: The level of this NdmpDumpdate.  # noqa: E501
        :type: int
        """
        if level is not None and level > 10:  # noqa: E501
            raise ValueError("Invalid value for `level`, must be a value less than or equal to `10`")  # noqa: E501
        if level is not None and level < 0:  # noqa: E501
            raise ValueError("Invalid value for `level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._level = level

    @property
    def path(self):
        """Gets the path of this NdmpDumpdate.  # noqa: E501

        The path specified by NDMP environment variable FILESYSTEM.  # noqa: E501

        :return: The path of this NdmpDumpdate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NdmpDumpdate.

        The path specified by NDMP environment variable FILESYSTEM.  # noqa: E501

        :param path: The path of this NdmpDumpdate.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def snapid(self):
        """Gets the snapid of this NdmpDumpdate.  # noqa: E501

        The snapshot ID used for a faster incremental backup. 0 means a regular backup.  # noqa: E501

        :return: The snapid of this NdmpDumpdate.  # noqa: E501
        :rtype: int
        """
        return self._snapid

    @snapid.setter
    def snapid(self, snapid):
        """Sets the snapid of this NdmpDumpdate.

        The snapshot ID used for a faster incremental backup. 0 means a regular backup.  # noqa: E501

        :param snapid: The snapid of this NdmpDumpdate.  # noqa: E501
        :type: int
        """

        self._snapid = snapid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NdmpDumpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
