# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_4_0.models.throttling_bw_rule import ThrottlingBwRule  # noqa: F401,E501


class ThrottlingBwRuleCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bw_limit': 'int',
        'netmask': 'str',
        'rule_type': 'str'
    }

    attribute_map = {
        'bw_limit': 'bw_limit',
        'netmask': 'netmask',
        'rule_type': 'rule_type'
    }

    def __init__(self, bw_limit=None, netmask=None, rule_type=None):  # noqa: E501
        """ThrottlingBwRuleCreateParams - a model defined in Swagger"""  # noqa: E501

        self._bw_limit = None
        self._netmask = None
        self._rule_type = None
        self.discriminator = None

        self.bw_limit = bw_limit
        self.netmask = netmask
        self.rule_type = rule_type

    @property
    def bw_limit(self):
        """Gets the bw_limit of this ThrottlingBwRuleCreateParams.  # noqa: E501

        Bandwidth limit, in bytes/s  # noqa: E501

        :return: The bw_limit of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._bw_limit

    @bw_limit.setter
    def bw_limit(self, bw_limit):
        """Sets the bw_limit of this ThrottlingBwRuleCreateParams.

        Bandwidth limit, in bytes/s  # noqa: E501

        :param bw_limit: The bw_limit of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :type: int
        """
        if bw_limit is None:
            raise ValueError("Invalid value for `bw_limit`, must not be `None`")  # noqa: E501
        if bw_limit is not None and bw_limit > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `bw_limit`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if bw_limit is not None and bw_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `bw_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bw_limit = bw_limit

    @property
    def netmask(self):
        """Gets the netmask of this ThrottlingBwRuleCreateParams.  # noqa: E501

        Netmask in the presentation format, e.g. 192.168.0.100/16 or 2001:0db8:85a3:0000:0000:8a2e:0370:7334/64  # noqa: E501

        :return: The netmask of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this ThrottlingBwRuleCreateParams.

        Netmask in the presentation format, e.g. 192.168.0.100/16 or 2001:0db8:85a3:0000:0000:8a2e:0370:7334/64  # noqa: E501

        :param netmask: The netmask of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :type: str
        """
        if netmask is None:
            raise ValueError("Invalid value for `netmask`, must not be `None`")  # noqa: E501
        if netmask is not None and len(netmask) > 255:
            raise ValueError("Invalid value for `netmask`, length must be less than or equal to `255`")  # noqa: E501
        if netmask is not None and len(netmask) < 1:
            raise ValueError("Invalid value for `netmask`, length must be greater than or equal to `1`")  # noqa: E501

        self._netmask = netmask

    @property
    def rule_type(self):
        """Gets the rule_type of this ThrottlingBwRuleCreateParams.  # noqa: E501

        Type of Bandwidth throttling rule.  # noqa: E501

        :return: The rule_type of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this ThrottlingBwRuleCreateParams.

        Type of Bandwidth throttling rule.  # noqa: E501

        :param rule_type: The rule_type of this ThrottlingBwRuleCreateParams.  # noqa: E501
        :type: str
        """
        if rule_type is None:
            raise ValueError("Invalid value for `rule_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NETMASK"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThrottlingBwRuleCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
