# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthNetgroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domainname': 'str',
        'hostname': 'str',
        'id': 'int',
        'netgroup': 'str',
        'username': 'str'
    }

    attribute_map = {
        'domainname': 'domainname',
        'hostname': 'hostname',
        'id': 'id',
        'netgroup': 'netgroup',
        'username': 'username'
    }

    def __init__(self, domainname=None, hostname=None, id=None, netgroup=None, username=None):  # noqa: E501
        """AuthNetgroup - a model defined in Swagger"""  # noqa: E501

        self._domainname = None
        self._hostname = None
        self._id = None
        self._netgroup = None
        self._username = None
        self.discriminator = None

        if domainname is not None:
            self.domainname = domainname
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if netgroup is not None:
            self.netgroup = netgroup
        if username is not None:
            self.username = username

    @property
    def domainname(self):
        """Gets the domainname of this AuthNetgroup.  # noqa: E501


        :return: The domainname of this AuthNetgroup.  # noqa: E501
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname):
        """Sets the domainname of this AuthNetgroup.


        :param domainname: The domainname of this AuthNetgroup.  # noqa: E501
        :type: str
        """
        if domainname is not None and len(domainname) > 255:
            raise ValueError("Invalid value for `domainname`, length must be less than or equal to `255`")  # noqa: E501
        if domainname is not None and len(domainname) < 0:
            raise ValueError("Invalid value for `domainname`, length must be greater than or equal to `0`")  # noqa: E501

        self._domainname = domainname

    @property
    def hostname(self):
        """Gets the hostname of this AuthNetgroup.  # noqa: E501


        :return: The hostname of this AuthNetgroup.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AuthNetgroup.


        :param hostname: The hostname of this AuthNetgroup.  # noqa: E501
        :type: str
        """
        if hostname is not None and len(hostname) > 255:
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `255`")  # noqa: E501
        if hostname is not None and len(hostname) < 0:
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `0`")  # noqa: E501

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this AuthNetgroup.  # noqa: E501


        :return: The id of this AuthNetgroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthNetgroup.


        :param id: The id of this AuthNetgroup.  # noqa: E501
        :type: int
        """
        if id is not None and id > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def netgroup(self):
        """Gets the netgroup of this AuthNetgroup.  # noqa: E501


        :return: The netgroup of this AuthNetgroup.  # noqa: E501
        :rtype: str
        """
        return self._netgroup

    @netgroup.setter
    def netgroup(self, netgroup):
        """Sets the netgroup of this AuthNetgroup.


        :param netgroup: The netgroup of this AuthNetgroup.  # noqa: E501
        :type: str
        """
        if netgroup is not None and len(netgroup) > 255:
            raise ValueError("Invalid value for `netgroup`, length must be less than or equal to `255`")  # noqa: E501
        if netgroup is not None and len(netgroup) < 0:
            raise ValueError("Invalid value for `netgroup`, length must be greater than or equal to `0`")  # noqa: E501

        self._netgroup = netgroup

    @property
    def username(self):
        """Gets the username of this AuthNetgroup.  # noqa: E501


        :return: The username of this AuthNetgroup.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuthNetgroup.


        :param username: The username of this AuthNetgroup.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 255:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `255`")  # noqa: E501
        if username is not None and len(username) < 0:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `0`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthNetgroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
