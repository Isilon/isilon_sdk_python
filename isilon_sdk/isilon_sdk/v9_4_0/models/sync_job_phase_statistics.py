# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SyncJobPhaseStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_dir_links': 'str',
        'corrected_lins': 'str',
        'deleted_dirs': 'str',
        'deleted_files': 'str',
        'dirs': 'str',
        'files': 'str',
        'flipped_lins': 'str',
        'hash_exceptions': 'str',
        'linked_dirs': 'str',
        'linked_files': 'str',
        'marked_directories': 'str',
        'marked_files': 'str',
        'modified_dirs': 'str',
        'modified_files': 'str',
        'modified_lins': 'str',
        'new_compliance_dirs': 'str',
        'new_dirs': 'str',
        'new_files': 'str',
        'new_resynced_files': 'str',
        'resynced_file_links': 'str',
        'resynced_lins': 'str',
        'unlinked_files': 'str'
    }

    attribute_map = {
        'compliance_dir_links': 'compliance_dir_links',
        'corrected_lins': 'corrected_lins',
        'deleted_dirs': 'deleted_dirs',
        'deleted_files': 'deleted_files',
        'dirs': 'dirs',
        'files': 'files',
        'flipped_lins': 'flipped_lins',
        'hash_exceptions': 'hash_exceptions',
        'linked_dirs': 'linked_dirs',
        'linked_files': 'linked_files',
        'marked_directories': 'marked_directories',
        'marked_files': 'marked_files',
        'modified_dirs': 'modified_dirs',
        'modified_files': 'modified_files',
        'modified_lins': 'modified_lins',
        'new_compliance_dirs': 'new_compliance_dirs',
        'new_dirs': 'new_dirs',
        'new_files': 'new_files',
        'new_resynced_files': 'new_resynced_files',
        'resynced_file_links': 'resynced_file_links',
        'resynced_lins': 'resynced_lins',
        'unlinked_files': 'unlinked_files'
    }

    def __init__(self, compliance_dir_links=None, corrected_lins=None, deleted_dirs=None, deleted_files=None, dirs=None, files=None, flipped_lins=None, hash_exceptions=None, linked_dirs=None, linked_files=None, marked_directories=None, marked_files=None, modified_dirs=None, modified_files=None, modified_lins=None, new_compliance_dirs=None, new_dirs=None, new_files=None, new_resynced_files=None, resynced_file_links=None, resynced_lins=None, unlinked_files=None):  # noqa: E501
        """SyncJobPhaseStatistics - a model defined in Swagger"""  # noqa: E501

        self._compliance_dir_links = None
        self._corrected_lins = None
        self._deleted_dirs = None
        self._deleted_files = None
        self._dirs = None
        self._files = None
        self._flipped_lins = None
        self._hash_exceptions = None
        self._linked_dirs = None
        self._linked_files = None
        self._marked_directories = None
        self._marked_files = None
        self._modified_dirs = None
        self._modified_files = None
        self._modified_lins = None
        self._new_compliance_dirs = None
        self._new_dirs = None
        self._new_files = None
        self._new_resynced_files = None
        self._resynced_file_links = None
        self._resynced_lins = None
        self._unlinked_files = None
        self.discriminator = None

        if compliance_dir_links is not None:
            self.compliance_dir_links = compliance_dir_links
        if corrected_lins is not None:
            self.corrected_lins = corrected_lins
        if deleted_dirs is not None:
            self.deleted_dirs = deleted_dirs
        if deleted_files is not None:
            self.deleted_files = deleted_files
        if dirs is not None:
            self.dirs = dirs
        if files is not None:
            self.files = files
        if flipped_lins is not None:
            self.flipped_lins = flipped_lins
        if hash_exceptions is not None:
            self.hash_exceptions = hash_exceptions
        if linked_dirs is not None:
            self.linked_dirs = linked_dirs
        if linked_files is not None:
            self.linked_files = linked_files
        if marked_directories is not None:
            self.marked_directories = marked_directories
        if marked_files is not None:
            self.marked_files = marked_files
        if modified_dirs is not None:
            self.modified_dirs = modified_dirs
        if modified_files is not None:
            self.modified_files = modified_files
        if modified_lins is not None:
            self.modified_lins = modified_lins
        if new_compliance_dirs is not None:
            self.new_compliance_dirs = new_compliance_dirs
        if new_dirs is not None:
            self.new_dirs = new_dirs
        if new_files is not None:
            self.new_files = new_files
        if new_resynced_files is not None:
            self.new_resynced_files = new_resynced_files
        if resynced_file_links is not None:
            self.resynced_file_links = resynced_file_links
        if resynced_lins is not None:
            self.resynced_lins = resynced_lins
        if unlinked_files is not None:
            self.unlinked_files = unlinked_files

    @property
    def compliance_dir_links(self):
        """Gets the compliance_dir_links of this SyncJobPhaseStatistics.  # noqa: E501

        Compliance Dir Links  # noqa: E501

        :return: The compliance_dir_links of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._compliance_dir_links

    @compliance_dir_links.setter
    def compliance_dir_links(self, compliance_dir_links):
        """Sets the compliance_dir_links of this SyncJobPhaseStatistics.

        Compliance Dir Links  # noqa: E501

        :param compliance_dir_links: The compliance_dir_links of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if compliance_dir_links is not None and len(compliance_dir_links) > 255:
            raise ValueError("Invalid value for `compliance_dir_links`, length must be less than or equal to `255`")  # noqa: E501
        if compliance_dir_links is not None and len(compliance_dir_links) < 0:
            raise ValueError("Invalid value for `compliance_dir_links`, length must be greater than or equal to `0`")  # noqa: E501

        self._compliance_dir_links = compliance_dir_links

    @property
    def corrected_lins(self):
        """Gets the corrected_lins of this SyncJobPhaseStatistics.  # noqa: E501

        Corrected LINs  # noqa: E501

        :return: The corrected_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._corrected_lins

    @corrected_lins.setter
    def corrected_lins(self, corrected_lins):
        """Sets the corrected_lins of this SyncJobPhaseStatistics.

        Corrected LINs  # noqa: E501

        :param corrected_lins: The corrected_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if corrected_lins is not None and len(corrected_lins) > 255:
            raise ValueError("Invalid value for `corrected_lins`, length must be less than or equal to `255`")  # noqa: E501
        if corrected_lins is not None and len(corrected_lins) < 0:
            raise ValueError("Invalid value for `corrected_lins`, length must be greater than or equal to `0`")  # noqa: E501

        self._corrected_lins = corrected_lins

    @property
    def deleted_dirs(self):
        """Gets the deleted_dirs of this SyncJobPhaseStatistics.  # noqa: E501

        Deleted Dirs  # noqa: E501

        :return: The deleted_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._deleted_dirs

    @deleted_dirs.setter
    def deleted_dirs(self, deleted_dirs):
        """Sets the deleted_dirs of this SyncJobPhaseStatistics.

        Deleted Dirs  # noqa: E501

        :param deleted_dirs: The deleted_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if deleted_dirs is not None and len(deleted_dirs) > 255:
            raise ValueError("Invalid value for `deleted_dirs`, length must be less than or equal to `255`")  # noqa: E501
        if deleted_dirs is not None and len(deleted_dirs) < 0:
            raise ValueError("Invalid value for `deleted_dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._deleted_dirs = deleted_dirs

    @property
    def deleted_files(self):
        """Gets the deleted_files of this SyncJobPhaseStatistics.  # noqa: E501

        Deleted Files  # noqa: E501

        :return: The deleted_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._deleted_files

    @deleted_files.setter
    def deleted_files(self, deleted_files):
        """Sets the deleted_files of this SyncJobPhaseStatistics.

        Deleted Files  # noqa: E501

        :param deleted_files: The deleted_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if deleted_files is not None and len(deleted_files) > 255:
            raise ValueError("Invalid value for `deleted_files`, length must be less than or equal to `255`")  # noqa: E501
        if deleted_files is not None and len(deleted_files) < 0:
            raise ValueError("Invalid value for `deleted_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._deleted_files = deleted_files

    @property
    def dirs(self):
        """Gets the dirs of this SyncJobPhaseStatistics.  # noqa: E501

        Dirs  # noqa: E501

        :return: The dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._dirs

    @dirs.setter
    def dirs(self, dirs):
        """Sets the dirs of this SyncJobPhaseStatistics.

        Dirs  # noqa: E501

        :param dirs: The dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if dirs is not None and len(dirs) > 255:
            raise ValueError("Invalid value for `dirs`, length must be less than or equal to `255`")  # noqa: E501
        if dirs is not None and len(dirs) < 0:
            raise ValueError("Invalid value for `dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._dirs = dirs

    @property
    def files(self):
        """Gets the files of this SyncJobPhaseStatistics.  # noqa: E501

        Files  # noqa: E501

        :return: The files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SyncJobPhaseStatistics.

        Files  # noqa: E501

        :param files: The files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if files is not None and len(files) > 255:
            raise ValueError("Invalid value for `files`, length must be less than or equal to `255`")  # noqa: E501
        if files is not None and len(files) < 0:
            raise ValueError("Invalid value for `files`, length must be greater than or equal to `0`")  # noqa: E501

        self._files = files

    @property
    def flipped_lins(self):
        """Gets the flipped_lins of this SyncJobPhaseStatistics.  # noqa: E501

        Flipped LINs  # noqa: E501

        :return: The flipped_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._flipped_lins

    @flipped_lins.setter
    def flipped_lins(self, flipped_lins):
        """Sets the flipped_lins of this SyncJobPhaseStatistics.

        Flipped LINs  # noqa: E501

        :param flipped_lins: The flipped_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if flipped_lins is not None and len(flipped_lins) > 255:
            raise ValueError("Invalid value for `flipped_lins`, length must be less than or equal to `255`")  # noqa: E501
        if flipped_lins is not None and len(flipped_lins) < 0:
            raise ValueError("Invalid value for `flipped_lins`, length must be greater than or equal to `0`")  # noqa: E501

        self._flipped_lins = flipped_lins

    @property
    def hash_exceptions(self):
        """Gets the hash_exceptions of this SyncJobPhaseStatistics.  # noqa: E501

        Hash Exceptions  # noqa: E501

        :return: The hash_exceptions of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._hash_exceptions

    @hash_exceptions.setter
    def hash_exceptions(self, hash_exceptions):
        """Sets the hash_exceptions of this SyncJobPhaseStatistics.

        Hash Exceptions  # noqa: E501

        :param hash_exceptions: The hash_exceptions of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if hash_exceptions is not None and len(hash_exceptions) > 255:
            raise ValueError("Invalid value for `hash_exceptions`, length must be less than or equal to `255`")  # noqa: E501
        if hash_exceptions is not None and len(hash_exceptions) < 0:
            raise ValueError("Invalid value for `hash_exceptions`, length must be greater than or equal to `0`")  # noqa: E501

        self._hash_exceptions = hash_exceptions

    @property
    def linked_dirs(self):
        """Gets the linked_dirs of this SyncJobPhaseStatistics.  # noqa: E501

        Linked Dirs  # noqa: E501

        :return: The linked_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._linked_dirs

    @linked_dirs.setter
    def linked_dirs(self, linked_dirs):
        """Sets the linked_dirs of this SyncJobPhaseStatistics.

        Linked Dirs  # noqa: E501

        :param linked_dirs: The linked_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if linked_dirs is not None and len(linked_dirs) > 255:
            raise ValueError("Invalid value for `linked_dirs`, length must be less than or equal to `255`")  # noqa: E501
        if linked_dirs is not None and len(linked_dirs) < 0:
            raise ValueError("Invalid value for `linked_dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._linked_dirs = linked_dirs

    @property
    def linked_files(self):
        """Gets the linked_files of this SyncJobPhaseStatistics.  # noqa: E501

        Linked Files  # noqa: E501

        :return: The linked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._linked_files

    @linked_files.setter
    def linked_files(self, linked_files):
        """Sets the linked_files of this SyncJobPhaseStatistics.

        Linked Files  # noqa: E501

        :param linked_files: The linked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if linked_files is not None and len(linked_files) > 255:
            raise ValueError("Invalid value for `linked_files`, length must be less than or equal to `255`")  # noqa: E501
        if linked_files is not None and len(linked_files) < 0:
            raise ValueError("Invalid value for `linked_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._linked_files = linked_files

    @property
    def marked_directories(self):
        """Gets the marked_directories of this SyncJobPhaseStatistics.  # noqa: E501

        Marked Directories  # noqa: E501

        :return: The marked_directories of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._marked_directories

    @marked_directories.setter
    def marked_directories(self, marked_directories):
        """Sets the marked_directories of this SyncJobPhaseStatistics.

        Marked Directories  # noqa: E501

        :param marked_directories: The marked_directories of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if marked_directories is not None and len(marked_directories) > 255:
            raise ValueError("Invalid value for `marked_directories`, length must be less than or equal to `255`")  # noqa: E501
        if marked_directories is not None and len(marked_directories) < 0:
            raise ValueError("Invalid value for `marked_directories`, length must be greater than or equal to `0`")  # noqa: E501

        self._marked_directories = marked_directories

    @property
    def marked_files(self):
        """Gets the marked_files of this SyncJobPhaseStatistics.  # noqa: E501

        Marked Files  # noqa: E501

        :return: The marked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._marked_files

    @marked_files.setter
    def marked_files(self, marked_files):
        """Sets the marked_files of this SyncJobPhaseStatistics.

        Marked Files  # noqa: E501

        :param marked_files: The marked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if marked_files is not None and len(marked_files) > 255:
            raise ValueError("Invalid value for `marked_files`, length must be less than or equal to `255`")  # noqa: E501
        if marked_files is not None and len(marked_files) < 0:
            raise ValueError("Invalid value for `marked_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._marked_files = marked_files

    @property
    def modified_dirs(self):
        """Gets the modified_dirs of this SyncJobPhaseStatistics.  # noqa: E501

        Modified Dirs  # noqa: E501

        :return: The modified_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._modified_dirs

    @modified_dirs.setter
    def modified_dirs(self, modified_dirs):
        """Sets the modified_dirs of this SyncJobPhaseStatistics.

        Modified Dirs  # noqa: E501

        :param modified_dirs: The modified_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if modified_dirs is not None and len(modified_dirs) > 255:
            raise ValueError("Invalid value for `modified_dirs`, length must be less than or equal to `255`")  # noqa: E501
        if modified_dirs is not None and len(modified_dirs) < 0:
            raise ValueError("Invalid value for `modified_dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._modified_dirs = modified_dirs

    @property
    def modified_files(self):
        """Gets the modified_files of this SyncJobPhaseStatistics.  # noqa: E501

        Modified Files  # noqa: E501

        :return: The modified_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._modified_files

    @modified_files.setter
    def modified_files(self, modified_files):
        """Sets the modified_files of this SyncJobPhaseStatistics.

        Modified Files  # noqa: E501

        :param modified_files: The modified_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if modified_files is not None and len(modified_files) > 255:
            raise ValueError("Invalid value for `modified_files`, length must be less than or equal to `255`")  # noqa: E501
        if modified_files is not None and len(modified_files) < 0:
            raise ValueError("Invalid value for `modified_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._modified_files = modified_files

    @property
    def modified_lins(self):
        """Gets the modified_lins of this SyncJobPhaseStatistics.  # noqa: E501

        Modified LINs  # noqa: E501

        :return: The modified_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._modified_lins

    @modified_lins.setter
    def modified_lins(self, modified_lins):
        """Sets the modified_lins of this SyncJobPhaseStatistics.

        Modified LINs  # noqa: E501

        :param modified_lins: The modified_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if modified_lins is not None and len(modified_lins) > 255:
            raise ValueError("Invalid value for `modified_lins`, length must be less than or equal to `255`")  # noqa: E501
        if modified_lins is not None and len(modified_lins) < 0:
            raise ValueError("Invalid value for `modified_lins`, length must be greater than or equal to `0`")  # noqa: E501

        self._modified_lins = modified_lins

    @property
    def new_compliance_dirs(self):
        """Gets the new_compliance_dirs of this SyncJobPhaseStatistics.  # noqa: E501

        New Compliance Dirs  # noqa: E501

        :return: The new_compliance_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._new_compliance_dirs

    @new_compliance_dirs.setter
    def new_compliance_dirs(self, new_compliance_dirs):
        """Sets the new_compliance_dirs of this SyncJobPhaseStatistics.

        New Compliance Dirs  # noqa: E501

        :param new_compliance_dirs: The new_compliance_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if new_compliance_dirs is not None and len(new_compliance_dirs) > 255:
            raise ValueError("Invalid value for `new_compliance_dirs`, length must be less than or equal to `255`")  # noqa: E501
        if new_compliance_dirs is not None and len(new_compliance_dirs) < 0:
            raise ValueError("Invalid value for `new_compliance_dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._new_compliance_dirs = new_compliance_dirs

    @property
    def new_dirs(self):
        """Gets the new_dirs of this SyncJobPhaseStatistics.  # noqa: E501

        New Dirs  # noqa: E501

        :return: The new_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._new_dirs

    @new_dirs.setter
    def new_dirs(self, new_dirs):
        """Sets the new_dirs of this SyncJobPhaseStatistics.

        New Dirs  # noqa: E501

        :param new_dirs: The new_dirs of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if new_dirs is not None and len(new_dirs) > 255:
            raise ValueError("Invalid value for `new_dirs`, length must be less than or equal to `255`")  # noqa: E501
        if new_dirs is not None and len(new_dirs) < 0:
            raise ValueError("Invalid value for `new_dirs`, length must be greater than or equal to `0`")  # noqa: E501

        self._new_dirs = new_dirs

    @property
    def new_files(self):
        """Gets the new_files of this SyncJobPhaseStatistics.  # noqa: E501

        New Files  # noqa: E501

        :return: The new_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._new_files

    @new_files.setter
    def new_files(self, new_files):
        """Sets the new_files of this SyncJobPhaseStatistics.

        New Files  # noqa: E501

        :param new_files: The new_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if new_files is not None and len(new_files) > 255:
            raise ValueError("Invalid value for `new_files`, length must be less than or equal to `255`")  # noqa: E501
        if new_files is not None and len(new_files) < 0:
            raise ValueError("Invalid value for `new_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._new_files = new_files

    @property
    def new_resynced_files(self):
        """Gets the new_resynced_files of this SyncJobPhaseStatistics.  # noqa: E501

        New Resynced Files  # noqa: E501

        :return: The new_resynced_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._new_resynced_files

    @new_resynced_files.setter
    def new_resynced_files(self, new_resynced_files):
        """Sets the new_resynced_files of this SyncJobPhaseStatistics.

        New Resynced Files  # noqa: E501

        :param new_resynced_files: The new_resynced_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if new_resynced_files is not None and len(new_resynced_files) > 255:
            raise ValueError("Invalid value for `new_resynced_files`, length must be less than or equal to `255`")  # noqa: E501
        if new_resynced_files is not None and len(new_resynced_files) < 0:
            raise ValueError("Invalid value for `new_resynced_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._new_resynced_files = new_resynced_files

    @property
    def resynced_file_links(self):
        """Gets the resynced_file_links of this SyncJobPhaseStatistics.  # noqa: E501

        Resynced File Links  # noqa: E501

        :return: The resynced_file_links of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._resynced_file_links

    @resynced_file_links.setter
    def resynced_file_links(self, resynced_file_links):
        """Sets the resynced_file_links of this SyncJobPhaseStatistics.

        Resynced File Links  # noqa: E501

        :param resynced_file_links: The resynced_file_links of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if resynced_file_links is not None and len(resynced_file_links) > 255:
            raise ValueError("Invalid value for `resynced_file_links`, length must be less than or equal to `255`")  # noqa: E501
        if resynced_file_links is not None and len(resynced_file_links) < 0:
            raise ValueError("Invalid value for `resynced_file_links`, length must be greater than or equal to `0`")  # noqa: E501

        self._resynced_file_links = resynced_file_links

    @property
    def resynced_lins(self):
        """Gets the resynced_lins of this SyncJobPhaseStatistics.  # noqa: E501

        Resynced LINs  # noqa: E501

        :return: The resynced_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._resynced_lins

    @resynced_lins.setter
    def resynced_lins(self, resynced_lins):
        """Sets the resynced_lins of this SyncJobPhaseStatistics.

        Resynced LINs  # noqa: E501

        :param resynced_lins: The resynced_lins of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if resynced_lins is not None and len(resynced_lins) > 255:
            raise ValueError("Invalid value for `resynced_lins`, length must be less than or equal to `255`")  # noqa: E501
        if resynced_lins is not None and len(resynced_lins) < 0:
            raise ValueError("Invalid value for `resynced_lins`, length must be greater than or equal to `0`")  # noqa: E501

        self._resynced_lins = resynced_lins

    @property
    def unlinked_files(self):
        """Gets the unlinked_files of this SyncJobPhaseStatistics.  # noqa: E501

        Unlinked Files  # noqa: E501

        :return: The unlinked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :rtype: str
        """
        return self._unlinked_files

    @unlinked_files.setter
    def unlinked_files(self, unlinked_files):
        """Sets the unlinked_files of this SyncJobPhaseStatistics.

        Unlinked Files  # noqa: E501

        :param unlinked_files: The unlinked_files of this SyncJobPhaseStatistics.  # noqa: E501
        :type: str
        """
        if unlinked_files is not None and len(unlinked_files) > 255:
            raise ValueError("Invalid value for `unlinked_files`, length must be less than or equal to `255`")  # noqa: E501
        if unlinked_files is not None and len(unlinked_files) < 0:
            raise ValueError("Invalid value for `unlinked_files`, length must be greater than or equal to `0`")  # noqa: E501

        self._unlinked_files = unlinked_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncJobPhaseStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
