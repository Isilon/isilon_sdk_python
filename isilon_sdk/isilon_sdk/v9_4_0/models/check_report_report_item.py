# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CheckReportReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'check_failed': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'category': 'category',
        'check_failed': 'check_failed',
        'reason': 'reason'
    }

    def __init__(self, category=None, check_failed=None, reason=None):  # noqa: E501
        """CheckReportReportItem - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._check_failed = None
        self._reason = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if check_failed is not None:
            self.check_failed = check_failed
        if reason is not None:
            self.reason = reason

    @property
    def category(self):
        """Gets the category of this CheckReportReportItem.  # noqa: E501

        Specifies the category of the failed security check.  # noqa: E501

        :return: The category of this CheckReportReportItem.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CheckReportReportItem.

        Specifies the category of the failed security check.  # noqa: E501

        :param category: The category of this CheckReportReportItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEALTHCHECK", "PERIODIC", "STIG"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def check_failed(self):
        """Gets the check_failed of this CheckReportReportItem.  # noqa: E501

        Specifies the name of the failed security check.  # noqa: E501

        :return: The check_failed of this CheckReportReportItem.  # noqa: E501
        :rtype: str
        """
        return self._check_failed

    @check_failed.setter
    def check_failed(self, check_failed):
        """Sets the check_failed of this CheckReportReportItem.

        Specifies the name of the failed security check.  # noqa: E501

        :param check_failed: The check_failed of this CheckReportReportItem.  # noqa: E501
        :type: str
        """
        if check_failed is not None and len(check_failed) > 255:
            raise ValueError("Invalid value for `check_failed`, length must be less than or equal to `255`")  # noqa: E501
        if check_failed is not None and len(check_failed) < 1:
            raise ValueError("Invalid value for `check_failed`, length must be greater than or equal to `1`")  # noqa: E501

        self._check_failed = check_failed

    @property
    def reason(self):
        """Gets the reason of this CheckReportReportItem.  # noqa: E501

        Specifies the reason due to which the security check has failed.  # noqa: E501

        :return: The reason of this CheckReportReportItem.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckReportReportItem.

        Specifies the reason due to which the security check has failed.  # noqa: E501

        :param reason: The reason of this CheckReportReportItem.  # noqa: E501
        :type: str
        """
        if reason is not None and len(reason) > 8192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `8192`")  # noqa: E501
        if reason is not None and len(reason) < 1:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckReportReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
