# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterAcs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failed_nodes_sn': 'list[str]',
        'joined_nodes': 'int',
        'license_status': 'str',
        'srs_status': 'str',
        'total_nodes': 'int',
        'unresponsive_sn': 'list[str]'
    }

    attribute_map = {
        'failed_nodes_sn': 'failed_nodes_sn',
        'joined_nodes': 'joined_nodes',
        'license_status': 'license_status',
        'srs_status': 'srs_status',
        'total_nodes': 'total_nodes',
        'unresponsive_sn': 'unresponsive_sn'
    }

    def __init__(self, failed_nodes_sn=None, joined_nodes=None, license_status=None, srs_status=None, total_nodes=None, unresponsive_sn=None):  # noqa: E501
        """ClusterAcs - a model defined in Swagger"""  # noqa: E501

        self._failed_nodes_sn = None
        self._joined_nodes = None
        self._license_status = None
        self._srs_status = None
        self._total_nodes = None
        self._unresponsive_sn = None
        self.discriminator = None

        if failed_nodes_sn is not None:
            self.failed_nodes_sn = failed_nodes_sn
        if joined_nodes is not None:
            self.joined_nodes = joined_nodes
        if license_status is not None:
            self.license_status = license_status
        if srs_status is not None:
            self.srs_status = srs_status
        if total_nodes is not None:
            self.total_nodes = total_nodes
        if unresponsive_sn is not None:
            self.unresponsive_sn = unresponsive_sn

    @property
    def failed_nodes_sn(self):
        """Gets the failed_nodes_sn of this ClusterAcs.  # noqa: E501

        list of failed nodes serial number.  # noqa: E501

        :return: The failed_nodes_sn of this ClusterAcs.  # noqa: E501
        :rtype: list[str]
        """
        return self._failed_nodes_sn

    @failed_nodes_sn.setter
    def failed_nodes_sn(self, failed_nodes_sn):
        """Sets the failed_nodes_sn of this ClusterAcs.

        list of failed nodes serial number.  # noqa: E501

        :param failed_nodes_sn: The failed_nodes_sn of this ClusterAcs.  # noqa: E501
        :type: list[str]
        """

        self._failed_nodes_sn = failed_nodes_sn

    @property
    def joined_nodes(self):
        """Gets the joined_nodes of this ClusterAcs.  # noqa: E501

        the number of joined nodes.  # noqa: E501

        :return: The joined_nodes of this ClusterAcs.  # noqa: E501
        :rtype: int
        """
        return self._joined_nodes

    @joined_nodes.setter
    def joined_nodes(self, joined_nodes):
        """Sets the joined_nodes of this ClusterAcs.

        the number of joined nodes.  # noqa: E501

        :param joined_nodes: The joined_nodes of this ClusterAcs.  # noqa: E501
        :type: int
        """
        if joined_nodes is not None and joined_nodes > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `joined_nodes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if joined_nodes is not None and joined_nodes < 0:  # noqa: E501
            raise ValueError("Invalid value for `joined_nodes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._joined_nodes = joined_nodes

    @property
    def license_status(self):
        """Gets the license_status of this ClusterAcs.  # noqa: E501

        the status of license activation.  # noqa: E501

        :return: The license_status of this ClusterAcs.  # noqa: E501
        :rtype: str
        """
        return self._license_status

    @license_status.setter
    def license_status(self, license_status):
        """Sets the license_status of this ClusterAcs.

        the status of license activation.  # noqa: E501

        :param license_status: The license_status of this ClusterAcs.  # noqa: E501
        :type: str
        """
        if license_status is not None and len(license_status) > 255:
            raise ValueError("Invalid value for `license_status`, length must be less than or equal to `255`")  # noqa: E501
        if license_status is not None and len(license_status) < 1:
            raise ValueError("Invalid value for `license_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._license_status = license_status

    @property
    def srs_status(self):
        """Gets the srs_status of this ClusterAcs.  # noqa: E501

        the status of SRS enablement.  # noqa: E501

        :return: The srs_status of this ClusterAcs.  # noqa: E501
        :rtype: str
        """
        return self._srs_status

    @srs_status.setter
    def srs_status(self, srs_status):
        """Sets the srs_status of this ClusterAcs.

        the status of SRS enablement.  # noqa: E501

        :param srs_status: The srs_status of this ClusterAcs.  # noqa: E501
        :type: str
        """
        if srs_status is not None and len(srs_status) > 255:
            raise ValueError("Invalid value for `srs_status`, length must be less than or equal to `255`")  # noqa: E501
        if srs_status is not None and len(srs_status) < 1:
            raise ValueError("Invalid value for `srs_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._srs_status = srs_status

    @property
    def total_nodes(self):
        """Gets the total_nodes of this ClusterAcs.  # noqa: E501

        total nodes number of the cluster.  # noqa: E501

        :return: The total_nodes of this ClusterAcs.  # noqa: E501
        :rtype: int
        """
        return self._total_nodes

    @total_nodes.setter
    def total_nodes(self, total_nodes):
        """Sets the total_nodes of this ClusterAcs.

        total nodes number of the cluster.  # noqa: E501

        :param total_nodes: The total_nodes of this ClusterAcs.  # noqa: E501
        :type: int
        """
        if total_nodes is not None and total_nodes > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `total_nodes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if total_nodes is not None and total_nodes < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_nodes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_nodes = total_nodes

    @property
    def unresponsive_sn(self):
        """Gets the unresponsive_sn of this ClusterAcs.  # noqa: E501

        list of unresponsive nodes serial number.  # noqa: E501

        :return: The unresponsive_sn of this ClusterAcs.  # noqa: E501
        :rtype: list[str]
        """
        return self._unresponsive_sn

    @unresponsive_sn.setter
    def unresponsive_sn(self, unresponsive_sn):
        """Sets the unresponsive_sn of this ClusterAcs.

        list of unresponsive nodes serial number.  # noqa: E501

        :param unresponsive_sn: The unresponsive_sn of this ClusterAcs.  # noqa: E501
        :type: list[str]
        """

        self._unresponsive_sn = unresponsive_sn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterAcs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
