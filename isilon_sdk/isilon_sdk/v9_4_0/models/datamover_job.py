# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_4_0.models.datamover_job_job_type_specific_attrs import DatamoverJobJobTypeSpecificAttrs  # noqa: F401,E501


class DatamoverJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'job_control_request': 'str',
        'job_end_time': 'int',
        'job_policy_id': 'int',
        'job_priority': 'str',
        'job_start_time': 'int',
        'job_state': 'str',
        'job_state_flags': 'int',
        'job_type_specific_attrs': 'DatamoverJobJobTypeSpecificAttrs'
    }

    attribute_map = {
        'id': 'id',
        'job_control_request': 'job_control_request',
        'job_end_time': 'job_end_time',
        'job_policy_id': 'job_policy_id',
        'job_priority': 'job_priority',
        'job_start_time': 'job_start_time',
        'job_state': 'job_state',
        'job_state_flags': 'job_state_flags',
        'job_type_specific_attrs': 'job_type_specific_attrs'
    }

    def __init__(self, id=None, job_control_request=None, job_end_time=None, job_policy_id=None, job_priority=None, job_start_time=None, job_state=None, job_state_flags=None, job_type_specific_attrs=None):  # noqa: E501
        """DatamoverJob - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._job_control_request = None
        self._job_end_time = None
        self._job_policy_id = None
        self._job_priority = None
        self._job_start_time = None
        self._job_state = None
        self._job_state_flags = None
        self._job_type_specific_attrs = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if job_control_request is not None:
            self.job_control_request = job_control_request
        if job_end_time is not None:
            self.job_end_time = job_end_time
        if job_policy_id is not None:
            self.job_policy_id = job_policy_id
        if job_priority is not None:
            self.job_priority = job_priority
        if job_start_time is not None:
            self.job_start_time = job_start_time
        if job_state is not None:
            self.job_state = job_state
        if job_state_flags is not None:
            self.job_state_flags = job_state_flags
        if job_type_specific_attrs is not None:
            self.job_type_specific_attrs = job_type_specific_attrs

    @property
    def id(self):
        """Gets the id of this DatamoverJob.  # noqa: E501

        Unique Job ID.  # noqa: E501

        :return: The id of this DatamoverJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatamoverJob.

        Unique Job ID.  # noqa: E501

        :param id: The id of this DatamoverJob.  # noqa: E501
        :type: int
        """
        if id is not None and id > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def job_control_request(self):
        """Gets the job_control_request of this DatamoverJob.  # noqa: E501

        Job control request.  # noqa: E501

        :return: The job_control_request of this DatamoverJob.  # noqa: E501
        :rtype: str
        """
        return self._job_control_request

    @job_control_request.setter
    def job_control_request(self, job_control_request):
        """Sets the job_control_request of this DatamoverJob.

        Job control request.  # noqa: E501

        :param job_control_request: The job_control_request of this DatamoverJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "PAUSE_JOB", "RESUME_JOB", "CANCEL_JOB", "COMPLETE_PARTIAL_JOB"]  # noqa: E501
        if job_control_request not in allowed_values:
            raise ValueError(
                "Invalid value for `job_control_request` ({0}), must be one of {1}"  # noqa: E501
                .format(job_control_request, allowed_values)
            )

        self._job_control_request = job_control_request

    @property
    def job_end_time(self):
        """Gets the job_end_time of this DatamoverJob.  # noqa: E501

        The time in seconds past the epoch  # noqa: E501

        :return: The job_end_time of this DatamoverJob.  # noqa: E501
        :rtype: int
        """
        return self._job_end_time

    @job_end_time.setter
    def job_end_time(self, job_end_time):
        """Sets the job_end_time of this DatamoverJob.

        The time in seconds past the epoch  # noqa: E501

        :param job_end_time: The job_end_time of this DatamoverJob.  # noqa: E501
        :type: int
        """
        if job_end_time is not None and job_end_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `job_end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if job_end_time is not None and job_end_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `job_end_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._job_end_time = job_end_time

    @property
    def job_policy_id(self):
        """Gets the job_policy_id of this DatamoverJob.  # noqa: E501

        Policy ID associated with this job.  # noqa: E501

        :return: The job_policy_id of this DatamoverJob.  # noqa: E501
        :rtype: int
        """
        return self._job_policy_id

    @job_policy_id.setter
    def job_policy_id(self, job_policy_id):
        """Sets the job_policy_id of this DatamoverJob.

        Policy ID associated with this job.  # noqa: E501

        :param job_policy_id: The job_policy_id of this DatamoverJob.  # noqa: E501
        :type: int
        """
        if job_policy_id is not None and job_policy_id > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `job_policy_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if job_policy_id is not None and job_policy_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `job_policy_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._job_policy_id = job_policy_id

    @property
    def job_priority(self):
        """Gets the job_priority of this DatamoverJob.  # noqa: E501

        The relative priority of the job.  # noqa: E501

        :return: The job_priority of this DatamoverJob.  # noqa: E501
        :rtype: str
        """
        return self._job_priority

    @job_priority.setter
    def job_priority(self, job_priority):
        """Sets the job_priority of this DatamoverJob.

        The relative priority of the job.  # noqa: E501

        :param job_priority: The job_priority of this DatamoverJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOW", "NORMAL", "HIGH"]  # noqa: E501
        if job_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `job_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(job_priority, allowed_values)
            )

        self._job_priority = job_priority

    @property
    def job_start_time(self):
        """Gets the job_start_time of this DatamoverJob.  # noqa: E501

        The time in seconds past the epoch  # noqa: E501

        :return: The job_start_time of this DatamoverJob.  # noqa: E501
        :rtype: int
        """
        return self._job_start_time

    @job_start_time.setter
    def job_start_time(self, job_start_time):
        """Sets the job_start_time of this DatamoverJob.

        The time in seconds past the epoch  # noqa: E501

        :param job_start_time: The job_start_time of this DatamoverJob.  # noqa: E501
        :type: int
        """
        if job_start_time is not None and job_start_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `job_start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if job_start_time is not None and job_start_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `job_start_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._job_start_time = job_start_time

    @property
    def job_state(self):
        """Gets the job_state of this DatamoverJob.  # noqa: E501

        Job state  # noqa: E501

        :return: The job_state of this DatamoverJob.  # noqa: E501
        :rtype: str
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this DatamoverJob.

        Job state  # noqa: E501

        :param job_state: The job_state of this DatamoverJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "PENDING", "RUNNING", "PAUSED", "FINISHING", "FAILING", "CANCELLING", "CANCELLED", "FAILED", "FINISHED", "SHADOW_JOB"]  # noqa: E501
        if job_state not in allowed_values:
            raise ValueError(
                "Invalid value for `job_state` ({0}), must be one of {1}"  # noqa: E501
                .format(job_state, allowed_values)
            )

        self._job_state = job_state

    @property
    def job_state_flags(self):
        """Gets the job_state_flags of this DatamoverJob.  # noqa: E501

        This shows if job has some failure and failure code/info: DM_JOB_HAS_NO_FAILURE = 0, DM_JOB_FAILURE_ENCOUNTERED = 1, DM_JOB_CANNOT_COMPLETE = 2, DM_JOB_ALREADY_RUNNING = 4.  # noqa: E501

        :return: The job_state_flags of this DatamoverJob.  # noqa: E501
        :rtype: int
        """
        return self._job_state_flags

    @job_state_flags.setter
    def job_state_flags(self, job_state_flags):
        """Sets the job_state_flags of this DatamoverJob.

        This shows if job has some failure and failure code/info: DM_JOB_HAS_NO_FAILURE = 0, DM_JOB_FAILURE_ENCOUNTERED = 1, DM_JOB_CANNOT_COMPLETE = 2, DM_JOB_ALREADY_RUNNING = 4.  # noqa: E501

        :param job_state_flags: The job_state_flags of this DatamoverJob.  # noqa: E501
        :type: int
        """
        if job_state_flags is not None and job_state_flags > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `job_state_flags`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if job_state_flags is not None and job_state_flags < 0:  # noqa: E501
            raise ValueError("Invalid value for `job_state_flags`, must be a value greater than or equal to `0`")  # noqa: E501

        self._job_state_flags = job_state_flags

    @property
    def job_type_specific_attrs(self):
        """Gets the job_type_specific_attrs of this DatamoverJob.  # noqa: E501

        Job type specific attributes.  # noqa: E501

        :return: The job_type_specific_attrs of this DatamoverJob.  # noqa: E501
        :rtype: DatamoverJobJobTypeSpecificAttrs
        """
        return self._job_type_specific_attrs

    @job_type_specific_attrs.setter
    def job_type_specific_attrs(self, job_type_specific_attrs):
        """Sets the job_type_specific_attrs of this DatamoverJob.

        Job type specific attributes.  # noqa: E501

        :param job_type_specific_attrs: The job_type_specific_attrs of this DatamoverJob.  # noqa: E501
        :type: DatamoverJobJobTypeSpecificAttrs
        """

        self._job_type_specific_attrs = job_type_specific_attrs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
