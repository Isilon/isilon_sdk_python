# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_4_0.models.result_top_files_file import ResultTopFilesFile  # noqa: F401,E501


class ResultTopFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atime_enabled': 'bool',
        'change': 'int',
        'dir_atime_enabled': 'bool',
        'files': 'list[ResultTopFilesFile]',
        'top_n_max': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'atime_enabled': 'atime_enabled',
        'change': 'change',
        'dir_atime_enabled': 'dir_atime_enabled',
        'files': 'files',
        'top_n_max': 'top_n_max',
        'total_count': 'total_count'
    }

    def __init__(self, atime_enabled=None, change=None, dir_atime_enabled=None, files=None, top_n_max=None, total_count=None):  # noqa: E501
        """ResultTopFiles - a model defined in Swagger"""  # noqa: E501

        self._atime_enabled = None
        self._change = None
        self._dir_atime_enabled = None
        self._files = None
        self._top_n_max = None
        self._total_count = None
        self.discriminator = None

        self.atime_enabled = atime_enabled
        if change is not None:
            self.change = change
        self.dir_atime_enabled = dir_atime_enabled
        self.files = files
        self.top_n_max = top_n_max
        self.total_count = total_count

    @property
    def atime_enabled(self):
        """Gets the atime_enabled of this ResultTopFiles.  # noqa: E501

        Access time enabled.  # noqa: E501

        :return: The atime_enabled of this ResultTopFiles.  # noqa: E501
        :rtype: bool
        """
        return self._atime_enabled

    @atime_enabled.setter
    def atime_enabled(self, atime_enabled):
        """Sets the atime_enabled of this ResultTopFiles.

        Access time enabled.  # noqa: E501

        :param atime_enabled: The atime_enabled of this ResultTopFiles.  # noqa: E501
        :type: bool
        """
        if atime_enabled is None:
            raise ValueError("Invalid value for `atime_enabled`, must not be `None`")  # noqa: E501

        self._atime_enabled = atime_enabled

    @property
    def change(self):
        """Gets the change of this ResultTopFiles.  # noqa: E501

        Change in file ranking from result set comparison.  # noqa: E501

        :return: The change of this ResultTopFiles.  # noqa: E501
        :rtype: int
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this ResultTopFiles.

        Change in file ranking from result set comparison.  # noqa: E501

        :param change: The change of this ResultTopFiles.  # noqa: E501
        :type: int
        """

        self._change = change

    @property
    def dir_atime_enabled(self):
        """Gets the dir_atime_enabled of this ResultTopFiles.  # noqa: E501

        Directory access time enabled.  # noqa: E501

        :return: The dir_atime_enabled of this ResultTopFiles.  # noqa: E501
        :rtype: bool
        """
        return self._dir_atime_enabled

    @dir_atime_enabled.setter
    def dir_atime_enabled(self, dir_atime_enabled):
        """Sets the dir_atime_enabled of this ResultTopFiles.

        Directory access time enabled.  # noqa: E501

        :param dir_atime_enabled: The dir_atime_enabled of this ResultTopFiles.  # noqa: E501
        :type: bool
        """
        if dir_atime_enabled is None:
            raise ValueError("Invalid value for `dir_atime_enabled`, must not be `None`")  # noqa: E501

        self._dir_atime_enabled = dir_atime_enabled

    @property
    def files(self):
        """Gets the files of this ResultTopFiles.  # noqa: E501

        Files listing.  # noqa: E501

        :return: The files of this ResultTopFiles.  # noqa: E501
        :rtype: list[ResultTopFilesFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ResultTopFiles.

        Files listing.  # noqa: E501

        :param files: The files of this ResultTopFiles.  # noqa: E501
        :type: list[ResultTopFilesFile]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def top_n_max(self):
        """Gets the top_n_max of this ResultTopFiles.  # noqa: E501

        Limit on number of top results.  # noqa: E501

        :return: The top_n_max of this ResultTopFiles.  # noqa: E501
        :rtype: int
        """
        return self._top_n_max

    @top_n_max.setter
    def top_n_max(self, top_n_max):
        """Sets the top_n_max of this ResultTopFiles.

        Limit on number of top results.  # noqa: E501

        :param top_n_max: The top_n_max of this ResultTopFiles.  # noqa: E501
        :type: int
        """
        if top_n_max is None:
            raise ValueError("Invalid value for `top_n_max`, must not be `None`")  # noqa: E501

        self._top_n_max = top_n_max

    @property
    def total_count(self):
        """Gets the total_count of this ResultTopFiles.  # noqa: E501

        Total count of file results.  # noqa: E501

        :return: The total_count of this ResultTopFiles.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ResultTopFiles.

        Total count of file results.  # noqa: E501

        :param total_count: The total_count of this ResultTopFiles.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultTopFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
