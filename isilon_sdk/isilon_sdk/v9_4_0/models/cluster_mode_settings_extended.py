# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterModeSettingsExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_storage_console': 'str',
        'monitoring': 'str',
        'support': 'str'
    }

    attribute_map = {
        'cloud_storage_console': 'cloud_storage_console',
        'monitoring': 'monitoring',
        'support': 'support'
    }

    def __init__(self, cloud_storage_console=None, monitoring=None, support=None):  # noqa: E501
        """ClusterModeSettingsExtended - a model defined in Swagger"""  # noqa: E501

        self._cloud_storage_console = None
        self._monitoring = None
        self._support = None
        self.discriminator = None

        if cloud_storage_console is not None:
            self.cloud_storage_console = cloud_storage_console
        if monitoring is not None:
            self.monitoring = monitoring
        if support is not None:
            self.support = support

    @property
    def cloud_storage_console(self):
        """Gets the cloud_storage_console of this ClusterModeSettingsExtended.  # noqa: E501


        :return: The cloud_storage_console of this ClusterModeSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_console

    @cloud_storage_console.setter
    def cloud_storage_console(self, cloud_storage_console):
        """Sets the cloud_storage_console of this ClusterModeSettingsExtended.


        :param cloud_storage_console: The cloud_storage_console of this ClusterModeSettingsExtended.  # noqa: E501
        :type: str
        """
        if cloud_storage_console is not None and len(cloud_storage_console) > 2048:
            raise ValueError("Invalid value for `cloud_storage_console`, length must be less than or equal to `2048`")  # noqa: E501
        if cloud_storage_console is not None and len(cloud_storage_console) < 11:
            raise ValueError("Invalid value for `cloud_storage_console`, length must be greater than or equal to `11`")  # noqa: E501
        if cloud_storage_console is not None and not re.search('^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$', cloud_storage_console):  # noqa: E501
            raise ValueError("Invalid value for `cloud_storage_console`, must be a follow pattern or equal to `/^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$/`")  # noqa: E501

        self._cloud_storage_console = cloud_storage_console

    @property
    def monitoring(self):
        """Gets the monitoring of this ClusterModeSettingsExtended.  # noqa: E501


        :return: The monitoring of this ClusterModeSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this ClusterModeSettingsExtended.


        :param monitoring: The monitoring of this ClusterModeSettingsExtended.  # noqa: E501
        :type: str
        """
        if monitoring is not None and len(monitoring) > 2048:
            raise ValueError("Invalid value for `monitoring`, length must be less than or equal to `2048`")  # noqa: E501
        if monitoring is not None and len(monitoring) < 11:
            raise ValueError("Invalid value for `monitoring`, length must be greater than or equal to `11`")  # noqa: E501
        if monitoring is not None and not re.search('^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$', monitoring):  # noqa: E501
            raise ValueError("Invalid value for `monitoring`, must be a follow pattern or equal to `/^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$/`")  # noqa: E501

        self._monitoring = monitoring

    @property
    def support(self):
        """Gets the support of this ClusterModeSettingsExtended.  # noqa: E501


        :return: The support of this ClusterModeSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this ClusterModeSettingsExtended.


        :param support: The support of this ClusterModeSettingsExtended.  # noqa: E501
        :type: str
        """
        if support is not None and len(support) > 2048:
            raise ValueError("Invalid value for `support`, length must be less than or equal to `2048`")  # noqa: E501
        if support is not None and len(support) < 11:
            raise ValueError("Invalid value for `support`, length must be greater than or equal to `11`")  # noqa: E501
        if support is not None and not re.search('^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$', support):  # noqa: E501
            raise ValueError("Invalid value for `support`, must be a follow pattern or equal to `/^(http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)[a-z0-9]+([-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\/[^ ]*)?$|^((http:\/\/www\\.|https:\/\/www\\.|http:\/\/|https:\/\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\:[0-9]{0,4})?(\/[a-zA-Z0-9_]*)?$/`")  # noqa: E501

        self._support = support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterModeSettingsExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
