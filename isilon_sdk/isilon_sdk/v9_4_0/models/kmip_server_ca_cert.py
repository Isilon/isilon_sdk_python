# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KmipServerCaCert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'int',
        'fingerprint': 'str',
        'serial': 'int',
        'subject': 'str'
    }

    attribute_map = {
        'expiration_date': 'expiration_date',
        'fingerprint': 'fingerprint',
        'serial': 'serial',
        'subject': 'subject'
    }

    def __init__(self, expiration_date=None, fingerprint=None, serial=None, subject=None):  # noqa: E501
        """KmipServerCaCert - a model defined in Swagger"""  # noqa: E501

        self._expiration_date = None
        self._fingerprint = None
        self._serial = None
        self._subject = None
        self.discriminator = None

        if expiration_date is not None:
            self.expiration_date = expiration_date
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if serial is not None:
            self.serial = serial
        if subject is not None:
            self.subject = subject

    @property
    def expiration_date(self):
        """Gets the expiration_date of this KmipServerCaCert.  # noqa: E501

        Certificate Authority (CA) certificate expiration date in UNIX timestamp format.  # noqa: E501

        :return: The expiration_date of this KmipServerCaCert.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this KmipServerCaCert.

        Certificate Authority (CA) certificate expiration date in UNIX timestamp format.  # noqa: E501

        :param expiration_date: The expiration_date of this KmipServerCaCert.  # noqa: E501
        :type: int
        """
        if expiration_date is not None and expiration_date > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `expiration_date`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if expiration_date is not None and expiration_date < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `expiration_date`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def fingerprint(self):
        """Gets the fingerprint of this KmipServerCaCert.  # noqa: E501

        Certification Authority (CA) certificate sha256 fingerprint.  # noqa: E501

        :return: The fingerprint of this KmipServerCaCert.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this KmipServerCaCert.

        Certification Authority (CA) certificate sha256 fingerprint.  # noqa: E501

        :param fingerprint: The fingerprint of this KmipServerCaCert.  # noqa: E501
        :type: str
        """
        if fingerprint is not None and len(fingerprint) > 255:
            raise ValueError("Invalid value for `fingerprint`, length must be less than or equal to `255`")  # noqa: E501
        if fingerprint is not None and len(fingerprint) < 1:
            raise ValueError("Invalid value for `fingerprint`, length must be greater than or equal to `1`")  # noqa: E501

        self._fingerprint = fingerprint

    @property
    def serial(self):
        """Gets the serial of this KmipServerCaCert.  # noqa: E501

        Certification Authority (CA) certificate serial number field.  # noqa: E501

        :return: The serial of this KmipServerCaCert.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this KmipServerCaCert.

        Certification Authority (CA) certificate serial number field.  # noqa: E501

        :param serial: The serial of this KmipServerCaCert.  # noqa: E501
        :type: int
        """
        if serial is not None and serial > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `serial`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if serial is not None and serial < 0:  # noqa: E501
            raise ValueError("Invalid value for `serial`, must be a value greater than or equal to `0`")  # noqa: E501

        self._serial = serial

    @property
    def subject(self):
        """Gets the subject of this KmipServerCaCert.  # noqa: E501

        Certification Authority (CA) certificate subject field.  # noqa: E501

        :return: The subject of this KmipServerCaCert.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this KmipServerCaCert.

        Certification Authority (CA) certificate subject field.  # noqa: E501

        :param subject: The subject of this KmipServerCaCert.  # noqa: E501
        :type: str
        """
        if subject is not None and len(subject) > 255:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `255`")  # noqa: E501
        if subject is not None and len(subject) < 1:
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")  # noqa: E501

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmipServerCaCert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
