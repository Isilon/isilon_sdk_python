# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ZoneGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'int',
        'groupname': 'str',
        'gsid': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'groupname': 'groupname',
        'gsid': 'gsid'
    }

    def __init__(self, gid=None, groupname=None, gsid=None):  # noqa: E501
        """ZoneGroup - a model defined in Swagger"""  # noqa: E501

        self._gid = None
        self._groupname = None
        self._gsid = None
        self.discriminator = None

        if gid is not None:
            self.gid = gid
        if groupname is not None:
            self.groupname = groupname
        if gsid is not None:
            self.gsid = gsid

    @property
    def gid(self):
        """Gets the gid of this ZoneGroup.  # noqa: E501

        Specifies a numeric group identifier.  # noqa: E501

        :return: The gid of this ZoneGroup.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ZoneGroup.

        Specifies a numeric group identifier.  # noqa: E501

        :param gid: The gid of this ZoneGroup.  # noqa: E501
        :type: int
        """
        if gid is not None and gid > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if gid is not None and gid < 0:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gid = gid

    @property
    def groupname(self):
        """Gets the groupname of this ZoneGroup.  # noqa: E501

        The groupname associated with the gsid/gid.  # noqa: E501

        :return: The groupname of this ZoneGroup.  # noqa: E501
        :rtype: str
        """
        return self._groupname

    @groupname.setter
    def groupname(self, groupname):
        """Sets the groupname of this ZoneGroup.

        The groupname associated with the gsid/gid.  # noqa: E501

        :param groupname: The groupname of this ZoneGroup.  # noqa: E501
        :type: str
        """
        if groupname is not None and len(groupname) > 255:
            raise ValueError("Invalid value for `groupname`, length must be less than or equal to `255`")  # noqa: E501
        if groupname is not None and len(groupname) < 0:
            raise ValueError("Invalid value for `groupname`, length must be greater than or equal to `0`")  # noqa: E501

        self._groupname = groupname

    @property
    def gsid(self):
        """Gets the gsid of this ZoneGroup.  # noqa: E501

        Specifies a group security identifier.  # noqa: E501

        :return: The gsid of this ZoneGroup.  # noqa: E501
        :rtype: str
        """
        return self._gsid

    @gsid.setter
    def gsid(self, gsid):
        """Sets the gsid of this ZoneGroup.

        Specifies a group security identifier.  # noqa: E501

        :param gsid: The gsid of this ZoneGroup.  # noqa: E501
        :type: str
        """
        if gsid is not None and len(gsid) > 255:
            raise ValueError("Invalid value for `gsid`, length must be less than or equal to `255`")  # noqa: E501
        if gsid is not None and len(gsid) < 0:
            raise ValueError("Invalid value for `gsid`, length must be greater than or equal to `0`")  # noqa: E501

        self._gsid = gsid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
