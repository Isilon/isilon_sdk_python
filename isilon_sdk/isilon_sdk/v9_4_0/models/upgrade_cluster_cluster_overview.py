# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpgradeClusterClusterOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nodes_current': 'int',
        'nodes_total': 'int',
        'nodes_transitioning': 'int',
        'nodes_upgraded': 'int'
    }

    attribute_map = {
        'nodes_current': 'nodes_current',
        'nodes_total': 'nodes_total',
        'nodes_transitioning': 'nodes_transitioning',
        'nodes_upgraded': 'nodes_upgraded'
    }

    def __init__(self, nodes_current=None, nodes_total=None, nodes_transitioning=None, nodes_upgraded=None):  # noqa: E501
        """UpgradeClusterClusterOverview - a model defined in Swagger"""  # noqa: E501

        self._nodes_current = None
        self._nodes_total = None
        self._nodes_transitioning = None
        self._nodes_upgraded = None
        self.discriminator = None

        if nodes_current is not None:
            self.nodes_current = nodes_current
        if nodes_total is not None:
            self.nodes_total = nodes_total
        if nodes_transitioning is not None:
            self.nodes_transitioning = nodes_transitioning
        if nodes_upgraded is not None:
            self.nodes_upgraded = nodes_upgraded

    @property
    def nodes_current(self):
        """Gets the nodes_current of this UpgradeClusterClusterOverview.  # noqa: E501

        Number of nodes running the current OneFS version.  # noqa: E501

        :return: The nodes_current of this UpgradeClusterClusterOverview.  # noqa: E501
        :rtype: int
        """
        return self._nodes_current

    @nodes_current.setter
    def nodes_current(self, nodes_current):
        """Sets the nodes_current of this UpgradeClusterClusterOverview.

        Number of nodes running the current OneFS version.  # noqa: E501

        :param nodes_current: The nodes_current of this UpgradeClusterClusterOverview.  # noqa: E501
        :type: int
        """
        if nodes_current is not None and nodes_current > 576:  # noqa: E501
            raise ValueError("Invalid value for `nodes_current`, must be a value less than or equal to `576`")  # noqa: E501
        if nodes_current is not None and nodes_current < 1:  # noqa: E501
            raise ValueError("Invalid value for `nodes_current`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nodes_current = nodes_current

    @property
    def nodes_total(self):
        """Gets the nodes_total of this UpgradeClusterClusterOverview.  # noqa: E501

        Total number of nodes on the cluster.  # noqa: E501

        :return: The nodes_total of this UpgradeClusterClusterOverview.  # noqa: E501
        :rtype: int
        """
        return self._nodes_total

    @nodes_total.setter
    def nodes_total(self, nodes_total):
        """Sets the nodes_total of this UpgradeClusterClusterOverview.

        Total number of nodes on the cluster.  # noqa: E501

        :param nodes_total: The nodes_total of this UpgradeClusterClusterOverview.  # noqa: E501
        :type: int
        """
        if nodes_total is not None and nodes_total > 576:  # noqa: E501
            raise ValueError("Invalid value for `nodes_total`, must be a value less than or equal to `576`")  # noqa: E501
        if nodes_total is not None and nodes_total < 1:  # noqa: E501
            raise ValueError("Invalid value for `nodes_total`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nodes_total = nodes_total

    @property
    def nodes_transitioning(self):
        """Gets the nodes_transitioning of this UpgradeClusterClusterOverview.  # noqa: E501

        Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'  # noqa: E501

        :return: The nodes_transitioning of this UpgradeClusterClusterOverview.  # noqa: E501
        :rtype: int
        """
        return self._nodes_transitioning

    @nodes_transitioning.setter
    def nodes_transitioning(self, nodes_transitioning):
        """Sets the nodes_transitioning of this UpgradeClusterClusterOverview.

        Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'  # noqa: E501

        :param nodes_transitioning: The nodes_transitioning of this UpgradeClusterClusterOverview.  # noqa: E501
        :type: int
        """
        if nodes_transitioning is not None and nodes_transitioning > 576:  # noqa: E501
            raise ValueError("Invalid value for `nodes_transitioning`, must be a value less than or equal to `576`")  # noqa: E501
        if nodes_transitioning is not None and nodes_transitioning < 0:  # noqa: E501
            raise ValueError("Invalid value for `nodes_transitioning`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nodes_transitioning = nodes_transitioning

    @property
    def nodes_upgraded(self):
        """Gets the nodes_upgraded of this UpgradeClusterClusterOverview.  # noqa: E501

        Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'  # noqa: E501

        :return: The nodes_upgraded of this UpgradeClusterClusterOverview.  # noqa: E501
        :rtype: int
        """
        return self._nodes_upgraded

    @nodes_upgraded.setter
    def nodes_upgraded(self, nodes_upgraded):
        """Sets the nodes_upgraded of this UpgradeClusterClusterOverview.

        Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'  # noqa: E501

        :param nodes_upgraded: The nodes_upgraded of this UpgradeClusterClusterOverview.  # noqa: E501
        :type: int
        """
        if nodes_upgraded is not None and nodes_upgraded > 576:  # noqa: E501
            raise ValueError("Invalid value for `nodes_upgraded`, must be a value less than or equal to `576`")  # noqa: E501
        if nodes_upgraded is not None and nodes_upgraded < 0:  # noqa: E501
            raise ValueError("Invalid value for `nodes_upgraded`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nodes_upgraded = nodes_upgraded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeClusterClusterOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
