# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_4_0.models.datamover_account_credentials_certificate_extended import DatamoverAccountCredentialsCertificateExtended  # noqa: F401,E501
from isilon_sdk.v9_4_0.models.datamover_account_credentials_cloud_extended import DatamoverAccountCredentialsCloudExtended  # noqa: F401,E501


class DatamoverAccountCredentialsExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_mode': 'str',
        'certificate': 'DatamoverAccountCredentialsCertificateExtended',
        'cloud': 'DatamoverAccountCredentialsCloudExtended'
    }

    attribute_map = {
        'auth_mode': 'auth_mode',
        'certificate': 'certificate',
        'cloud': 'cloud'
    }

    def __init__(self, auth_mode=None, certificate=None, cloud=None):  # noqa: E501
        """DatamoverAccountCredentialsExtended - a model defined in Swagger"""  # noqa: E501

        self._auth_mode = None
        self._certificate = None
        self._cloud = None
        self.discriminator = None

        self.auth_mode = auth_mode
        if certificate is not None:
            self.certificate = certificate
        if cloud is not None:
            self.cloud = cloud

    @property
    def auth_mode(self):
        """Gets the auth_mode of this DatamoverAccountCredentialsExtended.  # noqa: E501

        The authentication mode for this account  # noqa: E501

        :return: The auth_mode of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this DatamoverAccountCredentialsExtended.

        The authentication mode for this account  # noqa: E501

        :param auth_mode: The auth_mode of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :type: str
        """
        if auth_mode is None:
            raise ValueError("Invalid value for `auth_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["CLOUD", "CERTIFICATE"]  # noqa: E501
        if auth_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_mode, allowed_values)
            )

        self._auth_mode = auth_mode

    @property
    def certificate(self):
        """Gets the certificate of this DatamoverAccountCredentialsExtended.  # noqa: E501

        Certificate-based authentication credentials  # noqa: E501

        :return: The certificate of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :rtype: DatamoverAccountCredentialsCertificateExtended
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this DatamoverAccountCredentialsExtended.

        Certificate-based authentication credentials  # noqa: E501

        :param certificate: The certificate of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :type: DatamoverAccountCredentialsCertificateExtended
        """

        self._certificate = certificate

    @property
    def cloud(self):
        """Gets the cloud of this DatamoverAccountCredentialsExtended.  # noqa: E501

        Cloud authentication credentials  # noqa: E501

        :return: The cloud of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :rtype: DatamoverAccountCredentialsCloudExtended
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this DatamoverAccountCredentialsExtended.

        Cloud authentication credentials  # noqa: E501

        :param cloud: The cloud of this DatamoverAccountCredentialsExtended.  # noqa: E501
        :type: DatamoverAccountCredentialsCloudExtended
        """

        self._cloud = cloud

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverAccountCredentialsExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
