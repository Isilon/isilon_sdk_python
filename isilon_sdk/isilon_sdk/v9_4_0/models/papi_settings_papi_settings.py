# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_4_0.models.papi_settings_papi_settings_child_settings import PapiSettingsPapiSettingsChildSettings  # noqa: F401,E501


class PapiSettingsPapiSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_configure_child_limit': 'bool',
        'child_settings': 'PapiSettingsPapiSettingsChildSettings'
    }

    attribute_map = {
        'auto_configure_child_limit': 'auto_configure_child_limit',
        'child_settings': 'child_settings'
    }

    def __init__(self, auto_configure_child_limit=True, child_settings=None):  # noqa: E501
        """PapiSettingsPapiSettings - a model defined in Swagger"""  # noqa: E501

        self._auto_configure_child_limit = None
        self._child_settings = None
        self.discriminator = None

        if auto_configure_child_limit is not None:
            self.auto_configure_child_limit = auto_configure_child_limit
        if child_settings is not None:
            self.child_settings = child_settings

    @property
    def auto_configure_child_limit(self):
        """Gets the auto_configure_child_limit of this PapiSettingsPapiSettings.  # noqa: E501

        If true, PAPI automatically configures the child limit.  # noqa: E501

        :return: The auto_configure_child_limit of this PapiSettingsPapiSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_configure_child_limit

    @auto_configure_child_limit.setter
    def auto_configure_child_limit(self, auto_configure_child_limit):
        """Sets the auto_configure_child_limit of this PapiSettingsPapiSettings.

        If true, PAPI automatically configures the child limit.  # noqa: E501

        :param auto_configure_child_limit: The auto_configure_child_limit of this PapiSettingsPapiSettings.  # noqa: E501
        :type: bool
        """

        self._auto_configure_child_limit = auto_configure_child_limit

    @property
    def child_settings(self):
        """Gets the child_settings of this PapiSettingsPapiSettings.  # noqa: E501

        This schema describes various values related to PAPI children.  # noqa: E501

        :return: The child_settings of this PapiSettingsPapiSettings.  # noqa: E501
        :rtype: PapiSettingsPapiSettingsChildSettings
        """
        return self._child_settings

    @child_settings.setter
    def child_settings(self, child_settings):
        """Sets the child_settings of this PapiSettingsPapiSettings.

        This schema describes various values related to PAPI children.  # noqa: E501

        :param child_settings: The child_settings of this PapiSettingsPapiSettings.  # noqa: E501
        :type: PapiSettingsPapiSettingsChildSettings
        """

        self._child_settings = child_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PapiSettingsPapiSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
