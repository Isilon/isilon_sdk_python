# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeStatusNvramNodeBattery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'id': 'int',
        'status': 'str',
        'voltage': 'str'
    }

    attribute_map = {
        'color': 'color',
        'id': 'id',
        'status': 'status',
        'voltage': 'voltage'
    }

    def __init__(self, color=None, id=None, status=None, voltage=None):  # noqa: E501
        """NodeStatusNvramNodeBattery - a model defined in Swagger"""  # noqa: E501

        self._color = None
        self._id = None
        self._status = None
        self._voltage = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if voltage is not None:
            self.voltage = voltage

    @property
    def color(self):
        """Gets the color of this NodeStatusNvramNodeBattery.  # noqa: E501

        The current status color of the NVRAM battery.  # noqa: E501

        :return: The color of this NodeStatusNvramNodeBattery.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this NodeStatusNvramNodeBattery.

        The current status color of the NVRAM battery.  # noqa: E501

        :param color: The color of this NodeStatusNvramNodeBattery.  # noqa: E501
        :type: str
        """
        if color is not None and len(color) > 255:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `255`")  # noqa: E501
        if color is not None and len(color) < 0:
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `0`")  # noqa: E501

        self._color = color

    @property
    def id(self):
        """Gets the id of this NodeStatusNvramNodeBattery.  # noqa: E501

        Identifying index for the NVRAM battery.  # noqa: E501

        :return: The id of this NodeStatusNvramNodeBattery.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeStatusNvramNodeBattery.

        Identifying index for the NVRAM battery.  # noqa: E501

        :param id: The id of this NodeStatusNvramNodeBattery.  # noqa: E501
        :type: int
        """
        if id is not None and id > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this NodeStatusNvramNodeBattery.  # noqa: E501

        The current status message of the NVRAM battery.  # noqa: E501

        :return: The status of this NodeStatusNvramNodeBattery.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeStatusNvramNodeBattery.

        The current status message of the NVRAM battery.  # noqa: E501

        :param status: The status of this NodeStatusNvramNodeBattery.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    @property
    def voltage(self):
        """Gets the voltage of this NodeStatusNvramNodeBattery.  # noqa: E501

        The current voltage of the NVRAM battery.  # noqa: E501

        :return: The voltage of this NodeStatusNvramNodeBattery.  # noqa: E501
        :rtype: str
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this NodeStatusNvramNodeBattery.

        The current voltage of the NVRAM battery.  # noqa: E501

        :param voltage: The voltage of this NodeStatusNvramNodeBattery.  # noqa: E501
        :type: str
        """
        if voltage is not None and len(voltage) > 255:
            raise ValueError("Invalid value for `voltage`, length must be less than or equal to `255`")  # noqa: E501
        if voltage is not None and len(voltage) < 0:
            raise ValueError("Invalid value for `voltage`, length must be greater than or equal to `0`")  # noqa: E501

        self._voltage = voltage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStatusNvramNodeBattery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
