# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeStatusNodeStatusServerStatusItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connections': 'int',
        'good_heartbeats': 'int',
        'heartbeat_rtt': 'int',
        'scan_requests': 'int',
        'scan_rtt': 'int',
        'server_name': 'str',
        'server_state': 'str'
    }

    attribute_map = {
        'connections': 'connections',
        'good_heartbeats': 'good_heartbeats',
        'heartbeat_rtt': 'heartbeat_rtt',
        'scan_requests': 'scan_requests',
        'scan_rtt': 'scan_rtt',
        'server_name': 'server_name',
        'server_state': 'server_state'
    }

    def __init__(self, connections=None, good_heartbeats=None, heartbeat_rtt=None, scan_requests=None, scan_rtt=None, server_name=None, server_state=None):  # noqa: E501
        """NodeStatusNodeStatusServerStatusItem - a model defined in Swagger"""  # noqa: E501

        self._connections = None
        self._good_heartbeats = None
        self._heartbeat_rtt = None
        self._scan_requests = None
        self._scan_rtt = None
        self._server_name = None
        self._server_state = None
        self.discriminator = None

        if connections is not None:
            self.connections = connections
        if good_heartbeats is not None:
            self.good_heartbeats = good_heartbeats
        if heartbeat_rtt is not None:
            self.heartbeat_rtt = heartbeat_rtt
        if scan_requests is not None:
            self.scan_requests = scan_requests
        if scan_rtt is not None:
            self.scan_rtt = scan_rtt
        if server_name is not None:
            self.server_name = server_name
        if server_state is not None:
            self.server_state = server_state

    @property
    def connections(self):
        """Gets the connections of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Total number of connections from the cluster node to CAVA servers.  # noqa: E501

        :return: The connections of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: int
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this NodeStatusNodeStatusServerStatusItem.

        Total number of connections from the cluster node to CAVA servers.  # noqa: E501

        :param connections: The connections of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: int
        """
        if connections is not None and connections > 100:  # noqa: E501
            raise ValueError("Invalid value for `connections`, must be a value less than or equal to `100`")  # noqa: E501
        if connections is not None and connections < 0:  # noqa: E501
            raise ValueError("Invalid value for `connections`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connections = connections

    @property
    def good_heartbeats(self):
        """Gets the good_heartbeats of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Number of good heartbeats exchanges between cluster node and CAVA server.  # noqa: E501

        :return: The good_heartbeats of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: int
        """
        return self._good_heartbeats

    @good_heartbeats.setter
    def good_heartbeats(self, good_heartbeats):
        """Sets the good_heartbeats of this NodeStatusNodeStatusServerStatusItem.

        Number of good heartbeats exchanges between cluster node and CAVA server.  # noqa: E501

        :param good_heartbeats: The good_heartbeats of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: int
        """
        if good_heartbeats is not None and good_heartbeats > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `good_heartbeats`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if good_heartbeats is not None and good_heartbeats < 0:  # noqa: E501
            raise ValueError("Invalid value for `good_heartbeats`, must be a value greater than or equal to `0`")  # noqa: E501

        self._good_heartbeats = good_heartbeats

    @property
    def heartbeat_rtt(self):
        """Gets the heartbeat_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Average round trip time (ms) for heartbeat messages between cluster node and CAVA server.  # noqa: E501

        :return: The heartbeat_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_rtt

    @heartbeat_rtt.setter
    def heartbeat_rtt(self, heartbeat_rtt):
        """Sets the heartbeat_rtt of this NodeStatusNodeStatusServerStatusItem.

        Average round trip time (ms) for heartbeat messages between cluster node and CAVA server.  # noqa: E501

        :param heartbeat_rtt: The heartbeat_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: int
        """
        if heartbeat_rtt is not None and heartbeat_rtt > 3600000:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_rtt`, must be a value less than or equal to `3600000`")  # noqa: E501
        if heartbeat_rtt is not None and heartbeat_rtt < 0:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_rtt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._heartbeat_rtt = heartbeat_rtt

    @property
    def scan_requests(self):
        """Gets the scan_requests of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Total number of scan requests received by the CAVA server.  # noqa: E501

        :return: The scan_requests of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: int
        """
        return self._scan_requests

    @scan_requests.setter
    def scan_requests(self, scan_requests):
        """Sets the scan_requests of this NodeStatusNodeStatusServerStatusItem.

        Total number of scan requests received by the CAVA server.  # noqa: E501

        :param scan_requests: The scan_requests of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: int
        """
        if scan_requests is not None and scan_requests > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `scan_requests`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if scan_requests is not None and scan_requests < 0:  # noqa: E501
            raise ValueError("Invalid value for `scan_requests`, must be a value greater than or equal to `0`")  # noqa: E501

        self._scan_requests = scan_requests

    @property
    def scan_rtt(self):
        """Gets the scan_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Average round trip time (ms) for scan request completion.  # noqa: E501

        :return: The scan_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: int
        """
        return self._scan_rtt

    @scan_rtt.setter
    def scan_rtt(self, scan_rtt):
        """Sets the scan_rtt of this NodeStatusNodeStatusServerStatusItem.

        Average round trip time (ms) for scan request completion.  # noqa: E501

        :param scan_rtt: The scan_rtt of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: int
        """
        if scan_rtt is not None and scan_rtt > 3600000:  # noqa: E501
            raise ValueError("Invalid value for `scan_rtt`, must be a value less than or equal to `3600000`")  # noqa: E501
        if scan_rtt is not None and scan_rtt < 0:  # noqa: E501
            raise ValueError("Invalid value for `scan_rtt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._scan_rtt = scan_rtt

    @property
    def server_name(self):
        """Gets the server_name of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        Name of the CAVA server as per the configuration.  # noqa: E501

        :return: The server_name of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this NodeStatusNodeStatusServerStatusItem.

        Name of the CAVA server as per the configuration.  # noqa: E501

        :param server_name: The server_name of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: str
        """
        if server_name is not None and len(server_name) > 255:
            raise ValueError("Invalid value for `server_name`, length must be less than or equal to `255`")  # noqa: E501
        if server_name is not None and len(server_name) < 1:
            raise ValueError("Invalid value for `server_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._server_name = server_name

    @property
    def server_state(self):
        """Gets the server_state of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501

        State of the CAVA server in string format.  # noqa: E501

        :return: The server_state of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :rtype: str
        """
        return self._server_state

    @server_state.setter
    def server_state(self, server_state):
        """Sets the server_state of this NodeStatusNodeStatusServerStatusItem.

        State of the CAVA server in string format.  # noqa: E501

        :param server_state: The server_state of this NodeStatusNodeStatusServerStatusItem.  # noqa: E501
        :type: str
        """
        if server_state is not None and len(server_state) > 255:
            raise ValueError("Invalid value for `server_state`, length must be less than or equal to `255`")  # noqa: E501
        if server_state is not None and len(server_state) < 1:
            raise ValueError("Invalid value for `server_state`, length must be greater than or equal to `1`")  # noqa: E501

        self._server_state = server_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStatusNodeStatusServerStatusItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
