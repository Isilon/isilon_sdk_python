# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PoolsPoolStatusSettingsScDnsOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'needs_attention': 'int',
        'resolvable': 'int',
        'sc_subnet': 'str'
    }

    attribute_map = {
        'needs_attention': 'needs_attention',
        'resolvable': 'resolvable',
        'sc_subnet': 'sc_subnet'
    }

    def __init__(self, needs_attention=None, resolvable=None, sc_subnet=None):  # noqa: E501
        """PoolsPoolStatusSettingsScDnsOverview - a model defined in Swagger"""  # noqa: E501

        self._needs_attention = None
        self._resolvable = None
        self._sc_subnet = None
        self.discriminator = None

        if needs_attention is not None:
            self.needs_attention = needs_attention
        if resolvable is not None:
            self.resolvable = resolvable
        if sc_subnet is not None:
            self.sc_subnet = sc_subnet

    @property
    def needs_attention(self):
        """Gets the needs_attention of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501

        The number of nodes that either are not resolvable via SmartConnect DNS or may need attention for other reasons such as an unusable Network Interface.  # noqa: E501

        :return: The needs_attention of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :rtype: int
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this PoolsPoolStatusSettingsScDnsOverview.

        The number of nodes that either are not resolvable via SmartConnect DNS or may need attention for other reasons such as an unusable Network Interface.  # noqa: E501

        :param needs_attention: The needs_attention of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :type: int
        """
        if needs_attention is not None and needs_attention > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `needs_attention`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if needs_attention is not None and needs_attention < 0:  # noqa: E501
            raise ValueError("Invalid value for `needs_attention`, must be a value greater than or equal to `0`")  # noqa: E501

        self._needs_attention = needs_attention

    @property
    def resolvable(self):
        """Gets the resolvable of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501

        The number of nodes that can be resolved via SmartConnect DNS.  # noqa: E501

        :return: The resolvable of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :rtype: int
        """
        return self._resolvable

    @resolvable.setter
    def resolvable(self, resolvable):
        """Sets the resolvable of this PoolsPoolStatusSettingsScDnsOverview.

        The number of nodes that can be resolved via SmartConnect DNS.  # noqa: E501

        :param resolvable: The resolvable of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :type: int
        """
        if resolvable is not None and resolvable > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `resolvable`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if resolvable is not None and resolvable < 0:  # noqa: E501
            raise ValueError("Invalid value for `resolvable`, must be a value greater than or equal to `0`")  # noqa: E501

        self._resolvable = resolvable

    @property
    def sc_subnet(self):
        """Gets the sc_subnet of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501

        The subnet responsible for DNS resolution for this pool.  # noqa: E501

        :return: The sc_subnet of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :rtype: str
        """
        return self._sc_subnet

    @sc_subnet.setter
    def sc_subnet(self, sc_subnet):
        """Sets the sc_subnet of this PoolsPoolStatusSettingsScDnsOverview.

        The subnet responsible for DNS resolution for this pool.  # noqa: E501

        :param sc_subnet: The sc_subnet of this PoolsPoolStatusSettingsScDnsOverview.  # noqa: E501
        :type: str
        """
        if sc_subnet is not None and len(sc_subnet) > 66:
            raise ValueError("Invalid value for `sc_subnet`, length must be less than or equal to `66`")  # noqa: E501
        if sc_subnet is not None and len(sc_subnet) < 1:
            raise ValueError("Invalid value for `sc_subnet`, length must be greater than or equal to `1`")  # noqa: E501

        self._sc_subnet = sc_subnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolsPoolStatusSettingsScDnsOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
