# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 15
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy': 'str',
        'priority': 'int',
        'state': 'str'
    }

    attribute_map = {
        'policy': 'policy',
        'priority': 'priority',
        'state': 'state'
    }

    def __init__(self, policy=None, priority=None, state=None):  # noqa: E501
        """JobJob - a model defined in Swagger"""  # noqa: E501

        self._policy = None
        self._priority = None
        self._state = None
        self.discriminator = None

        if policy is not None:
            self.policy = policy
        if priority is not None:
            self.priority = priority
        if state is not None:
            self.state = state

    @property
    def policy(self):
        """Gets the policy of this JobJob.  # noqa: E501

        Impact policy of this job instance.  # noqa: E501

        :return: The policy of this JobJob.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this JobJob.

        Impact policy of this job instance.  # noqa: E501

        :param policy: The policy of this JobJob.  # noqa: E501
        :type: str
        """
        if policy is not None and len(policy) > 254:
            raise ValueError("Invalid value for `policy`, length must be less than or equal to `254`")  # noqa: E501
        if policy is not None and len(policy) < 1:
            raise ValueError("Invalid value for `policy`, length must be greater than or equal to `1`")  # noqa: E501

        self._policy = policy

    @property
    def priority(self):
        """Gets the priority of this JobJob.  # noqa: E501

        Priority of this job instance; lower numbers preempt higher numbers.  # noqa: E501

        :return: The priority of this JobJob.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobJob.

        Priority of this job instance; lower numbers preempt higher numbers.  # noqa: E501

        :param priority: The priority of this JobJob.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 10:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `10`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this JobJob.  # noqa: E501

        Desired new state of this job instance.  # noqa: E501

        :return: The state of this JobJob.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobJob.

        Desired new state of this job instance.  # noqa: E501

        :param state: The state of this JobJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["run", "pause", "cancel"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
