# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_1_0.models.storagepool_status_unhealthy_item_affected_item_device import StoragepoolStatusUnhealthyItemAffectedItemDevice  # noqa: F401,E501


class StoragepoolStatusUnhealthyItemDiskpool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drives': 'list[StoragepoolStatusUnhealthyItemAffectedItemDevice]',
        'id': 'int',
        'name': 'str',
        'nodepool_id': 'int',
        'protection_policy': 'str',
        'ssd_drives': 'list[StoragepoolStatusUnhealthyItemAffectedItemDevice]'
    }

    attribute_map = {
        'drives': 'drives',
        'id': 'id',
        'name': 'name',
        'nodepool_id': 'nodepool_id',
        'protection_policy': 'protection_policy',
        'ssd_drives': 'ssd_drives'
    }

    def __init__(self, drives=None, id=None, name=None, nodepool_id=None, protection_policy=None, ssd_drives=None):  # noqa: E501
        """StoragepoolStatusUnhealthyItemDiskpool - a model defined in Swagger"""  # noqa: E501

        self._drives = None
        self._id = None
        self._name = None
        self._nodepool_id = None
        self._protection_policy = None
        self._ssd_drives = None
        self.discriminator = None

        self.drives = drives
        self.id = id
        self.name = name
        if nodepool_id is not None:
            self.nodepool_id = nodepool_id
        self.protection_policy = protection_policy
        self.ssd_drives = ssd_drives

    @property
    def drives(self):
        """Gets the drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The drives that are part of this disk pool.  # noqa: E501

        :return: The drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: list[StoragepoolStatusUnhealthyItemAffectedItemDevice]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this StoragepoolStatusUnhealthyItemDiskpool.

        The drives that are part of this disk pool.  # noqa: E501

        :param drives: The drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: list[StoragepoolStatusUnhealthyItemAffectedItemDevice]
        """
        if drives is None:
            raise ValueError("Invalid value for `drives`, must not be `None`")  # noqa: E501

        self._drives = drives

    @property
    def id(self):
        """Gets the id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The system ID given to the disk pool.  # noqa: E501

        :return: The id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoragepoolStatusUnhealthyItemDiskpool.

        The system ID given to the disk pool.  # noqa: E501

        :param id: The id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The disk pool name.  # noqa: E501

        :return: The name of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoragepoolStatusUnhealthyItemDiskpool.

        The disk pool name.  # noqa: E501

        :param name: The name of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nodepool_id(self):
        """Gets the nodepool_id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The system ID of the disk pool's node pool, if it is in a node pool.  # noqa: E501

        :return: The nodepool_id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: int
        """
        return self._nodepool_id

    @nodepool_id.setter
    def nodepool_id(self, nodepool_id):
        """Sets the nodepool_id of this StoragepoolStatusUnhealthyItemDiskpool.

        The system ID of the disk pool's node pool, if it is in a node pool.  # noqa: E501

        :param nodepool_id: The nodepool_id of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: int
        """

        self._nodepool_id = nodepool_id

    @property
    def protection_policy(self):
        """Gets the protection_policy of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The protection policy for the disk pool.  # noqa: E501

        :return: The protection_policy of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """Sets the protection_policy of this StoragepoolStatusUnhealthyItemDiskpool.

        The protection policy for the disk pool.  # noqa: E501

        :param protection_policy: The protection_policy of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: str
        """
        if protection_policy is None:
            raise ValueError("Invalid value for `protection_policy`, must not be `None`")  # noqa: E501

        self._protection_policy = protection_policy

    @property
    def ssd_drives(self):
        """Gets the ssd_drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501

        The SSDs that are part of this disk pool.  # noqa: E501

        :return: The ssd_drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :rtype: list[StoragepoolStatusUnhealthyItemAffectedItemDevice]
        """
        return self._ssd_drives

    @ssd_drives.setter
    def ssd_drives(self, ssd_drives):
        """Sets the ssd_drives of this StoragepoolStatusUnhealthyItemDiskpool.

        The SSDs that are part of this disk pool.  # noqa: E501

        :param ssd_drives: The ssd_drives of this StoragepoolStatusUnhealthyItemDiskpool.  # noqa: E501
        :type: list[StoragepoolStatusUnhealthyItemAffectedItemDevice]
        """
        if ssd_drives is None:
            raise ValueError("Invalid value for `ssd_drives`, must not be `None`")  # noqa: E501

        self._ssd_drives = ssd_drives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragepoolStatusUnhealthyItemDiskpool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
