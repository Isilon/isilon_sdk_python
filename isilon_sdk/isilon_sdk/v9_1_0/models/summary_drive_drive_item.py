# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SummaryDriveDriveItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_latency': 'float',
        'access_slow': 'float',
        'busy': 'float',
        'bytes_in': 'float',
        'bytes_out': 'float',
        'drive_id': 'str',
        'iosched_latency': 'float',
        'iosched_queue': 'float',
        'time': 'int',
        'type': 'str',
        'used_bytes_percent': 'float',
        'used_inodes': 'float',
        'xfer_size_in': 'float',
        'xfer_size_out': 'float',
        'xfers_in': 'float',
        'xfers_out': 'float'
    }

    attribute_map = {
        'access_latency': 'access_latency',
        'access_slow': 'access_slow',
        'busy': 'busy',
        'bytes_in': 'bytes_in',
        'bytes_out': 'bytes_out',
        'drive_id': 'drive_id',
        'iosched_latency': 'iosched_latency',
        'iosched_queue': 'iosched_queue',
        'time': 'time',
        'type': 'type',
        'used_bytes_percent': 'used_bytes_percent',
        'used_inodes': 'used_inodes',
        'xfer_size_in': 'xfer_size_in',
        'xfer_size_out': 'xfer_size_out',
        'xfers_in': 'xfers_in',
        'xfers_out': 'xfers_out'
    }

    def __init__(self, access_latency=None, access_slow=None, busy=None, bytes_in=None, bytes_out=None, drive_id=None, iosched_latency=None, iosched_queue=None, time=None, type=None, used_bytes_percent=None, used_inodes=None, xfer_size_in=None, xfer_size_out=None, xfers_in=None, xfers_out=None):  # noqa: E501
        """SummaryDriveDriveItem - a model defined in Swagger"""  # noqa: E501

        self._access_latency = None
        self._access_slow = None
        self._busy = None
        self._bytes_in = None
        self._bytes_out = None
        self._drive_id = None
        self._iosched_latency = None
        self._iosched_queue = None
        self._time = None
        self._type = None
        self._used_bytes_percent = None
        self._used_inodes = None
        self._xfer_size_in = None
        self._xfer_size_out = None
        self._xfers_in = None
        self._xfers_out = None
        self.discriminator = None

        self.access_latency = access_latency
        self.access_slow = access_slow
        self.busy = busy
        self.bytes_in = bytes_in
        self.bytes_out = bytes_out
        self.drive_id = drive_id
        self.iosched_latency = iosched_latency
        self.iosched_queue = iosched_queue
        self.time = time
        self.type = type
        self.used_bytes_percent = used_bytes_percent
        self.used_inodes = used_inodes
        self.xfer_size_in = xfer_size_in
        self.xfer_size_out = xfer_size_out
        self.xfers_in = xfers_in
        self.xfers_out = xfers_out

    @property
    def access_latency(self):
        """Gets the access_latency of this SummaryDriveDriveItem.  # noqa: E501

        The average operation latency.  # noqa: E501

        :return: The access_latency of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._access_latency

    @access_latency.setter
    def access_latency(self, access_latency):
        """Sets the access_latency of this SummaryDriveDriveItem.

        The average operation latency.  # noqa: E501

        :param access_latency: The access_latency of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if access_latency is None:
            raise ValueError("Invalid value for `access_latency`, must not be `None`")  # noqa: E501

        self._access_latency = access_latency

    @property
    def access_slow(self):
        """Gets the access_slow of this SummaryDriveDriveItem.  # noqa: E501

        The rate of slow (long-latency) operations.  # noqa: E501

        :return: The access_slow of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._access_slow

    @access_slow.setter
    def access_slow(self, access_slow):
        """Sets the access_slow of this SummaryDriveDriveItem.

        The rate of slow (long-latency) operations.  # noqa: E501

        :param access_slow: The access_slow of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if access_slow is None:
            raise ValueError("Invalid value for `access_slow`, must not be `None`")  # noqa: E501

        self._access_slow = access_slow

    @property
    def busy(self):
        """Gets the busy of this SummaryDriveDriveItem.  # noqa: E501

        The percentage of time the drive was busy.  # noqa: E501

        :return: The busy of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this SummaryDriveDriveItem.

        The percentage of time the drive was busy.  # noqa: E501

        :param busy: The busy of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if busy is None:
            raise ValueError("Invalid value for `busy`, must not be `None`")  # noqa: E501

        self._busy = busy

    @property
    def bytes_in(self):
        """Gets the bytes_in of this SummaryDriveDriveItem.  # noqa: E501

        The rate of bytes written.  # noqa: E501

        :return: The bytes_in of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this SummaryDriveDriveItem.

        The rate of bytes written.  # noqa: E501

        :param bytes_in: The bytes_in of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if bytes_in is None:
            raise ValueError("Invalid value for `bytes_in`, must not be `None`")  # noqa: E501

        self._bytes_in = bytes_in

    @property
    def bytes_out(self):
        """Gets the bytes_out of this SummaryDriveDriveItem.  # noqa: E501

        The rate of bytes read.  # noqa: E501

        :return: The bytes_out of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this SummaryDriveDriveItem.

        The rate of bytes read.  # noqa: E501

        :param bytes_out: The bytes_out of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if bytes_out is None:
            raise ValueError("Invalid value for `bytes_out`, must not be `None`")  # noqa: E501

        self._bytes_out = bytes_out

    @property
    def drive_id(self):
        """Gets the drive_id of this SummaryDriveDriveItem.  # noqa: E501

        Drive ID LNN:bay.  # noqa: E501

        :return: The drive_id of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this SummaryDriveDriveItem.

        Drive ID LNN:bay.  # noqa: E501

        :param drive_id: The drive_id of this SummaryDriveDriveItem.  # noqa: E501
        :type: str
        """
        if drive_id is None:
            raise ValueError("Invalid value for `drive_id`, must not be `None`")  # noqa: E501

        self._drive_id = drive_id

    @property
    def iosched_latency(self):
        """Gets the iosched_latency of this SummaryDriveDriveItem.  # noqa: E501

        The average time spent in the I/O scheduler.  # noqa: E501

        :return: The iosched_latency of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._iosched_latency

    @iosched_latency.setter
    def iosched_latency(self, iosched_latency):
        """Sets the iosched_latency of this SummaryDriveDriveItem.

        The average time spent in the I/O scheduler.  # noqa: E501

        :param iosched_latency: The iosched_latency of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if iosched_latency is None:
            raise ValueError("Invalid value for `iosched_latency`, must not be `None`")  # noqa: E501

        self._iosched_latency = iosched_latency

    @property
    def iosched_queue(self):
        """Gets the iosched_queue of this SummaryDriveDriveItem.  # noqa: E501

        The average length of the I/O scheduler queue.  # noqa: E501

        :return: The iosched_queue of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._iosched_queue

    @iosched_queue.setter
    def iosched_queue(self, iosched_queue):
        """Sets the iosched_queue of this SummaryDriveDriveItem.

        The average length of the I/O scheduler queue.  # noqa: E501

        :param iosched_queue: The iosched_queue of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if iosched_queue is None:
            raise ValueError("Invalid value for `iosched_queue`, must not be `None`")  # noqa: E501

        self._iosched_queue = iosched_queue

    @property
    def time(self):
        """Gets the time of this SummaryDriveDriveItem.  # noqa: E501

        Unix Epoch time in seconds of the request.  # noqa: E501

        :return: The time of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SummaryDriveDriveItem.

        Unix Epoch time in seconds of the request.  # noqa: E501

        :param time: The time of this SummaryDriveDriveItem.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def type(self):
        """Gets the type of this SummaryDriveDriveItem.  # noqa: E501

        The type of the drive.  # noqa: E501

        :return: The type of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SummaryDriveDriveItem.

        The type of the drive.  # noqa: E501

        :param type: The type of this SummaryDriveDriveItem.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def used_bytes_percent(self):
        """Gets the used_bytes_percent of this SummaryDriveDriveItem.  # noqa: E501

        The percent of blocks used on the drive.  # noqa: E501

        :return: The used_bytes_percent of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._used_bytes_percent

    @used_bytes_percent.setter
    def used_bytes_percent(self, used_bytes_percent):
        """Sets the used_bytes_percent of this SummaryDriveDriveItem.

        The percent of blocks used on the drive.  # noqa: E501

        :param used_bytes_percent: The used_bytes_percent of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if used_bytes_percent is None:
            raise ValueError("Invalid value for `used_bytes_percent`, must not be `None`")  # noqa: E501

        self._used_bytes_percent = used_bytes_percent

    @property
    def used_inodes(self):
        """Gets the used_inodes of this SummaryDriveDriveItem.  # noqa: E501

        The number of inodes allocated on the drive.  # noqa: E501

        :return: The used_inodes of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._used_inodes

    @used_inodes.setter
    def used_inodes(self, used_inodes):
        """Sets the used_inodes of this SummaryDriveDriveItem.

        The number of inodes allocated on the drive.  # noqa: E501

        :param used_inodes: The used_inodes of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if used_inodes is None:
            raise ValueError("Invalid value for `used_inodes`, must not be `None`")  # noqa: E501

        self._used_inodes = used_inodes

    @property
    def xfer_size_in(self):
        """Gets the xfer_size_in of this SummaryDriveDriveItem.  # noqa: E501

        The average size of write operations.  # noqa: E501

        :return: The xfer_size_in of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._xfer_size_in

    @xfer_size_in.setter
    def xfer_size_in(self, xfer_size_in):
        """Sets the xfer_size_in of this SummaryDriveDriveItem.

        The average size of write operations.  # noqa: E501

        :param xfer_size_in: The xfer_size_in of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if xfer_size_in is None:
            raise ValueError("Invalid value for `xfer_size_in`, must not be `None`")  # noqa: E501

        self._xfer_size_in = xfer_size_in

    @property
    def xfer_size_out(self):
        """Gets the xfer_size_out of this SummaryDriveDriveItem.  # noqa: E501

        The average size of read operations.  # noqa: E501

        :return: The xfer_size_out of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._xfer_size_out

    @xfer_size_out.setter
    def xfer_size_out(self, xfer_size_out):
        """Sets the xfer_size_out of this SummaryDriveDriveItem.

        The average size of read operations.  # noqa: E501

        :param xfer_size_out: The xfer_size_out of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if xfer_size_out is None:
            raise ValueError("Invalid value for `xfer_size_out`, must not be `None`")  # noqa: E501

        self._xfer_size_out = xfer_size_out

    @property
    def xfers_in(self):
        """Gets the xfers_in of this SummaryDriveDriveItem.  # noqa: E501

        The rate of write operations.  # noqa: E501

        :return: The xfers_in of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._xfers_in

    @xfers_in.setter
    def xfers_in(self, xfers_in):
        """Sets the xfers_in of this SummaryDriveDriveItem.

        The rate of write operations.  # noqa: E501

        :param xfers_in: The xfers_in of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if xfers_in is None:
            raise ValueError("Invalid value for `xfers_in`, must not be `None`")  # noqa: E501

        self._xfers_in = xfers_in

    @property
    def xfers_out(self):
        """Gets the xfers_out of this SummaryDriveDriveItem.  # noqa: E501

        The rate of read operations.  # noqa: E501

        :return: The xfers_out of this SummaryDriveDriveItem.  # noqa: E501
        :rtype: float
        """
        return self._xfers_out

    @xfers_out.setter
    def xfers_out(self, xfers_out):
        """Sets the xfers_out of this SummaryDriveDriveItem.

        The rate of read operations.  # noqa: E501

        :param xfers_out: The xfers_out of this SummaryDriveDriveItem.  # noqa: E501
        :type: float
        """
        if xfers_out is None:
            raise ValueError("Invalid value for `xfers_out`, must not be `None`")  # noqa: E501

        self._xfers_out = xfers_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryDriveDriveItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
