# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HardeningApplyItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'str',
        'report': 'bool'
    }

    attribute_map = {
        'profile': 'profile',
        'report': 'report'
    }

    def __init__(self, profile=None, report=None):  # noqa: E501
        """HardeningApplyItem - a model defined in Swagger"""  # noqa: E501

        self._profile = None
        self._report = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if report is not None:
            self.report = report

    @property
    def profile(self):
        """Gets the profile of this HardeningApplyItem.  # noqa: E501

        Hardening profile.  # noqa: E501

        :return: The profile of this HardeningApplyItem.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this HardeningApplyItem.

        Hardening profile.  # noqa: E501

        :param profile: The profile of this HardeningApplyItem.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def report(self):
        """Gets the report of this HardeningApplyItem.  # noqa: E501

        Option to only generate and display a report on current cluster configuration with respect to the expected configuration required to apply hardening. If this option is set to true, hardening is not applied after the report is displayed. By default, this option is false.  # noqa: E501

        :return: The report of this HardeningApplyItem.  # noqa: E501
        :rtype: bool
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this HardeningApplyItem.

        Option to only generate and display a report on current cluster configuration with respect to the expected configuration required to apply hardening. If this option is set to true, hardening is not applied after the report is displayed. By default, this option is false.  # noqa: E501

        :param report: The report of this HardeningApplyItem.  # noqa: E501
        :type: bool
        """

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningApplyItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
