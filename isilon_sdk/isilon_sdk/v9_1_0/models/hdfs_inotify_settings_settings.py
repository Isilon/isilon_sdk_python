# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 11
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HdfsInotifySettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'maximum_delay': 'int',
        'retention': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'maximum_delay': 'maximum_delay',
        'retention': 'retention'
    }

    def __init__(self, enabled=None, maximum_delay=None, retention=None):  # noqa: E501
        """HdfsInotifySettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._maximum_delay = None
        self._retention = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if maximum_delay is not None:
            self.maximum_delay = maximum_delay
        if retention is not None:
            self.retention = retention

    @property
    def enabled(self):
        """Gets the enabled of this HdfsInotifySettingsSettings.  # noqa: E501

        Enable or disable the collection of edits over HDFS and access to the edits via HDFS INotify stream.  # noqa: E501

        :return: The enabled of this HdfsInotifySettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this HdfsInotifySettingsSettings.

        Enable or disable the collection of edits over HDFS and access to the edits via HDFS INotify stream.  # noqa: E501

        :param enabled: The enabled of this HdfsInotifySettingsSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def maximum_delay(self):
        """Gets the maximum_delay of this HdfsInotifySettingsSettings.  # noqa: E501

        The maximum duration in seconds until an edit event is reported in INotify. The default is 60, which amounts to a minute.  # noqa: E501

        :return: The maximum_delay of this HdfsInotifySettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_delay

    @maximum_delay.setter
    def maximum_delay(self, maximum_delay):
        """Sets the maximum_delay of this HdfsInotifySettingsSettings.

        The maximum duration in seconds until an edit event is reported in INotify. The default is 60, which amounts to a minute.  # noqa: E501

        :param maximum_delay: The maximum_delay of this HdfsInotifySettingsSettings.  # noqa: E501
        :type: int
        """
        if maximum_delay is not None and maximum_delay > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `maximum_delay`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if maximum_delay is not None and maximum_delay < 0:  # noqa: E501
            raise ValueError("Invalid value for `maximum_delay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._maximum_delay = maximum_delay

    @property
    def retention(self):
        """Gets the retention of this HdfsInotifySettingsSettings.  # noqa: E501

        The minimum amount of time in seconds the edits will be retained. The default is 172800, which amounts to 48hr.  # noqa: E501

        :return: The retention of this HdfsInotifySettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this HdfsInotifySettingsSettings.

        The minimum amount of time in seconds the edits will be retained. The default is 172800, which amounts to 48hr.  # noqa: E501

        :param retention: The retention of this HdfsInotifySettingsSettings.  # noqa: E501
        :type: int
        """
        if retention is not None and retention > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `retention`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if retention is not None and retention < 0:  # noqa: E501
            raise ValueError("Invalid value for `retention`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention = retention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HdfsInotifySettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
