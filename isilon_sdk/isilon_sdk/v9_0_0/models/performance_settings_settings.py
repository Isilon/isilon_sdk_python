# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 10
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PerformanceSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_dataset_count': 'int',
        'max_filter_count': 'int',
        'max_stat_size': 'int',
        'max_top_n_collection_count': 'int',
        'max_workload_count': 'int',
        'top_n_collection_count': 'int'
    }

    attribute_map = {
        'max_dataset_count': 'max_dataset_count',
        'max_filter_count': 'max_filter_count',
        'max_stat_size': 'max_stat_size',
        'max_top_n_collection_count': 'max_top_n_collection_count',
        'max_workload_count': 'max_workload_count',
        'top_n_collection_count': 'top_n_collection_count'
    }

    def __init__(self, max_dataset_count=None, max_filter_count=None, max_stat_size=None, max_top_n_collection_count=None, max_workload_count=None, top_n_collection_count=None):  # noqa: E501
        """PerformanceSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._max_dataset_count = None
        self._max_filter_count = None
        self._max_stat_size = None
        self._max_top_n_collection_count = None
        self._max_workload_count = None
        self._top_n_collection_count = None
        self.discriminator = None

        self.max_dataset_count = max_dataset_count
        self.max_filter_count = max_filter_count
        self.max_stat_size = max_stat_size
        self.max_top_n_collection_count = max_top_n_collection_count
        self.max_workload_count = max_workload_count
        self.top_n_collection_count = top_n_collection_count

    @property
    def max_dataset_count(self):
        """Gets the max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of datasets that can be configured on the system.  # noqa: E501

        :return: The max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_dataset_count

    @max_dataset_count.setter
    def max_dataset_count(self, max_dataset_count):
        """Sets the max_dataset_count of this PerformanceSettingsSettings.

        The maximum number of datasets that can be configured on the system.  # noqa: E501

        :param max_dataset_count: The max_dataset_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_dataset_count is None:
            raise ValueError("Invalid value for `max_dataset_count`, must not be `None`")  # noqa: E501
        if max_dataset_count is not None and max_dataset_count > 4:  # noqa: E501
            raise ValueError("Invalid value for `max_dataset_count`, must be a value less than or equal to `4`")  # noqa: E501
        if max_dataset_count is not None and max_dataset_count < 4:  # noqa: E501
            raise ValueError("Invalid value for `max_dataset_count`, must be a value greater than or equal to `4`")  # noqa: E501

        self._max_dataset_count = max_dataset_count

    @property
    def max_filter_count(self):
        """Gets the max_filter_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of filters that can be applied to a configured performance dataset.  # noqa: E501

        :return: The max_filter_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_filter_count

    @max_filter_count.setter
    def max_filter_count(self, max_filter_count):
        """Sets the max_filter_count of this PerformanceSettingsSettings.

        The maximum number of filters that can be applied to a configured performance dataset.  # noqa: E501

        :param max_filter_count: The max_filter_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_filter_count is None:
            raise ValueError("Invalid value for `max_filter_count`, must not be `None`")  # noqa: E501
        if max_filter_count is not None and max_filter_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_filter_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_filter_count is not None and max_filter_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_filter_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_filter_count = max_filter_count

    @property
    def max_stat_size(self):
        """Gets the max_stat_size of this PerformanceSettingsSettings.  # noqa: E501

        The maximum size in bytes of a single performance dataset sample.  # noqa: E501

        :return: The max_stat_size of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_stat_size

    @max_stat_size.setter
    def max_stat_size(self, max_stat_size):
        """Sets the max_stat_size of this PerformanceSettingsSettings.

        The maximum size in bytes of a single performance dataset sample.  # noqa: E501

        :param max_stat_size: The max_stat_size of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_stat_size is None:
            raise ValueError("Invalid value for `max_stat_size`, must not be `None`")  # noqa: E501
        if max_stat_size is not None and max_stat_size > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_stat_size`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_stat_size is not None and max_stat_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_stat_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_stat_size = max_stat_size

    @property
    def max_top_n_collection_count(self):
        """Gets the max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum valid value for the 'top_n_collection_count' setting.  # noqa: E501

        :return: The max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_top_n_collection_count

    @max_top_n_collection_count.setter
    def max_top_n_collection_count(self, max_top_n_collection_count):
        """Sets the max_top_n_collection_count of this PerformanceSettingsSettings.

        The maximum valid value for the 'top_n_collection_count' setting.  # noqa: E501

        :param max_top_n_collection_count: The max_top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_top_n_collection_count is None:
            raise ValueError("Invalid value for `max_top_n_collection_count`, must not be `None`")  # noqa: E501
        if max_top_n_collection_count is not None and max_top_n_collection_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_top_n_collection_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_top_n_collection_count is not None and max_top_n_collection_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_top_n_collection_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_top_n_collection_count = max_top_n_collection_count

    @property
    def max_workload_count(self):
        """Gets the max_workload_count of this PerformanceSettingsSettings.  # noqa: E501

        The maximum number of workloads that can be pinned to a configured performance dataset.  # noqa: E501

        :return: The max_workload_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_workload_count

    @max_workload_count.setter
    def max_workload_count(self, max_workload_count):
        """Sets the max_workload_count of this PerformanceSettingsSettings.

        The maximum number of workloads that can be pinned to a configured performance dataset.  # noqa: E501

        :param max_workload_count: The max_workload_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if max_workload_count is None:
            raise ValueError("Invalid value for `max_workload_count`, must not be `None`")  # noqa: E501
        if max_workload_count is not None and max_workload_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `max_workload_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if max_workload_count is not None and max_workload_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_workload_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_workload_count = max_workload_count

    @property
    def top_n_collection_count(self):
        """Gets the top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501

        The number of highest resource-consuming workloads tracked and collected by the system per configured performance dataset. The number of workloads pinned to a configured performance dataset does not count towards this value.  # noqa: E501

        :return: The top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._top_n_collection_count

    @top_n_collection_count.setter
    def top_n_collection_count(self, top_n_collection_count):
        """Sets the top_n_collection_count of this PerformanceSettingsSettings.

        The number of highest resource-consuming workloads tracked and collected by the system per configured performance dataset. The number of workloads pinned to a configured performance dataset does not count towards this value.  # noqa: E501

        :param top_n_collection_count: The top_n_collection_count of this PerformanceSettingsSettings.  # noqa: E501
        :type: int
        """
        if top_n_collection_count is None:
            raise ValueError("Invalid value for `top_n_collection_count`, must not be `None`")  # noqa: E501
        if top_n_collection_count is not None and top_n_collection_count > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `top_n_collection_count`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if top_n_collection_count is not None and top_n_collection_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `top_n_collection_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._top_n_collection_count = top_n_collection_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
