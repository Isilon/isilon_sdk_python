# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 10
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HealthcheckChecklistItemThresholds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical': 'int',
        'ok': 'int',
        'warning': 'int'
    }

    attribute_map = {
        'critical': 'critical',
        'ok': 'ok',
        'warning': 'warning'
    }

    def __init__(self, critical=None, ok=None, warning=None):  # noqa: E501
        """HealthcheckChecklistItemThresholds - a model defined in Swagger"""  # noqa: E501

        self._critical = None
        self._ok = None
        self._warning = None
        self.discriminator = None

        if critical is not None:
            self.critical = critical
        if ok is not None:
            self.ok = ok
        if warning is not None:
            self.warning = warning

    @property
    def critical(self):
        """Gets the critical of this HealthcheckChecklistItemThresholds.  # noqa: E501

        Minimum value for CRITICAL - below this EMERGENCY  # noqa: E501

        :return: The critical of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :rtype: int
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this HealthcheckChecklistItemThresholds.

        Minimum value for CRITICAL - below this EMERGENCY  # noqa: E501

        :param critical: The critical of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :type: int
        """
        if critical is not None and critical > 100:  # noqa: E501
            raise ValueError("Invalid value for `critical`, must be a value less than or equal to `100`")  # noqa: E501
        if critical is not None and critical < 0:  # noqa: E501
            raise ValueError("Invalid value for `critical`, must be a value greater than or equal to `0`")  # noqa: E501

        self._critical = critical

    @property
    def ok(self):
        """Gets the ok of this HealthcheckChecklistItemThresholds.  # noqa: E501

        Minimum value for OK - must be > warning  # noqa: E501

        :return: The ok of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :rtype: int
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this HealthcheckChecklistItemThresholds.

        Minimum value for OK - must be > warning  # noqa: E501

        :param ok: The ok of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :type: int
        """
        if ok is not None and ok > 100:  # noqa: E501
            raise ValueError("Invalid value for `ok`, must be a value less than or equal to `100`")  # noqa: E501
        if ok is not None and ok < 0:  # noqa: E501
            raise ValueError("Invalid value for `ok`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ok = ok

    @property
    def warning(self):
        """Gets the warning of this HealthcheckChecklistItemThresholds.  # noqa: E501

        Minimum value for WARNING - must be > critical  # noqa: E501

        :return: The warning of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :rtype: int
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this HealthcheckChecklistItemThresholds.

        Minimum value for WARNING - must be > critical  # noqa: E501

        :param warning: The warning of this HealthcheckChecklistItemThresholds.  # noqa: E501
        :type: int
        """
        if warning is not None and warning > 100:  # noqa: E501
            raise ValueError("Invalid value for `warning`, must be a value less than or equal to `100`")  # noqa: E501
        if warning is not None and warning < 0:  # noqa: E501
            raise ValueError("Invalid value for `warning`, must be a value greater than or equal to `0`")  # noqa: E501

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthcheckChecklistItemThresholds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
