# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 10
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WormCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit_to_worm': 'bool',
        'worm_retention_date': 'str'
    }

    attribute_map = {
        'commit_to_worm': 'commit_to_worm',
        'worm_retention_date': 'worm_retention_date'
    }

    def __init__(self, commit_to_worm=False, worm_retention_date=None):  # noqa: E501
        """WormCreateParams - a model defined in Swagger"""  # noqa: E501

        self._commit_to_worm = None
        self._worm_retention_date = None
        self.discriminator = None

        if commit_to_worm is not None:
            self.commit_to_worm = commit_to_worm
        if worm_retention_date is not None:
            self.worm_retention_date = worm_retention_date

    @property
    def commit_to_worm(self):
        """Gets the commit_to_worm of this WormCreateParams.  # noqa: E501

        Specifies whether to commit the file to a WORM state after the retention date is set.  # noqa: E501

        :return: The commit_to_worm of this WormCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._commit_to_worm

    @commit_to_worm.setter
    def commit_to_worm(self, commit_to_worm):
        """Sets the commit_to_worm of this WormCreateParams.

        Specifies whether to commit the file to a WORM state after the retention date is set.  # noqa: E501

        :param commit_to_worm: The commit_to_worm of this WormCreateParams.  # noqa: E501
        :type: bool
        """

        self._commit_to_worm = commit_to_worm

    @property
    def worm_retention_date(self):
        """Gets the worm_retention_date of this WormCreateParams.  # noqa: E501

        Specifies the retention expiration date string in Coordinated Universal Time (UTC/GMT).  # noqa: E501

        :return: The worm_retention_date of this WormCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._worm_retention_date

    @worm_retention_date.setter
    def worm_retention_date(self, worm_retention_date):
        """Sets the worm_retention_date of this WormCreateParams.

        Specifies the retention expiration date string in Coordinated Universal Time (UTC/GMT).  # noqa: E501

        :param worm_retention_date: The worm_retention_date of this WormCreateParams.  # noqa: E501
        :type: str
        """

        self._worm_retention_date = worm_retention_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WormCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
