# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 10
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemotesupportConnectemcConnectemc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_customer_on_failure': 'bool',
        'enabled': 'bool',
        'gateway_access_pools': 'list[str]',
        'primary_esrs_gateway': 'str',
        'secondary_esrs_gateway': 'str',
        'use_smtp_failover': 'bool'
    }

    attribute_map = {
        'email_customer_on_failure': 'email_customer_on_failure',
        'enabled': 'enabled',
        'gateway_access_pools': 'gateway_access_pools',
        'primary_esrs_gateway': 'primary_esrs_gateway',
        'secondary_esrs_gateway': 'secondary_esrs_gateway',
        'use_smtp_failover': 'use_smtp_failover'
    }

    def __init__(self, email_customer_on_failure=None, enabled=None, gateway_access_pools=None, primary_esrs_gateway=None, secondary_esrs_gateway=None, use_smtp_failover=None):  # noqa: E501
        """RemotesupportConnectemcConnectemc - a model defined in Swagger"""  # noqa: E501

        self._email_customer_on_failure = None
        self._enabled = None
        self._gateway_access_pools = None
        self._primary_esrs_gateway = None
        self._secondary_esrs_gateway = None
        self._use_smtp_failover = None
        self.discriminator = None

        if email_customer_on_failure is not None:
            self.email_customer_on_failure = email_customer_on_failure
        if enabled is not None:
            self.enabled = enabled
        if gateway_access_pools is not None:
            self.gateway_access_pools = gateway_access_pools
        if primary_esrs_gateway is not None:
            self.primary_esrs_gateway = primary_esrs_gateway
        if secondary_esrs_gateway is not None:
            self.secondary_esrs_gateway = secondary_esrs_gateway
        if use_smtp_failover is not None:
            self.use_smtp_failover = use_smtp_failover

    @property
    def email_customer_on_failure(self):
        """Gets the email_customer_on_failure of this RemotesupportConnectemcConnectemc.  # noqa: E501

        Email the customer if all transmission methods fail.  # noqa: E501

        :return: The email_customer_on_failure of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: bool
        """
        return self._email_customer_on_failure

    @email_customer_on_failure.setter
    def email_customer_on_failure(self, email_customer_on_failure):
        """Sets the email_customer_on_failure of this RemotesupportConnectemcConnectemc.

        Email the customer if all transmission methods fail.  # noqa: E501

        :param email_customer_on_failure: The email_customer_on_failure of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: bool
        """

        self._email_customer_on_failure = email_customer_on_failure

    @property
    def enabled(self):
        """Gets the enabled of this RemotesupportConnectemcConnectemc.  # noqa: E501

        Enable ConnectEMC.  # noqa: E501

        :return: The enabled of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RemotesupportConnectemcConnectemc.

        Enable ConnectEMC.  # noqa: E501

        :param enabled: The enabled of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def gateway_access_pools(self):
        """Gets the gateway_access_pools of this RemotesupportConnectemcConnectemc.  # noqa: E501

        List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.  # noqa: E501

        :return: The gateway_access_pools of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_access_pools

    @gateway_access_pools.setter
    def gateway_access_pools(self, gateway_access_pools):
        """Sets the gateway_access_pools of this RemotesupportConnectemcConnectemc.

        List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.  # noqa: E501

        :param gateway_access_pools: The gateway_access_pools of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: list[str]
        """

        self._gateway_access_pools = gateway_access_pools

    @property
    def primary_esrs_gateway(self):
        """Gets the primary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501

        Primary ESRS Gateway. Necessary to enable ConnectEMC.  # noqa: E501

        :return: The primary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: str
        """
        return self._primary_esrs_gateway

    @primary_esrs_gateway.setter
    def primary_esrs_gateway(self, primary_esrs_gateway):
        """Sets the primary_esrs_gateway of this RemotesupportConnectemcConnectemc.

        Primary ESRS Gateway. Necessary to enable ConnectEMC.  # noqa: E501

        :param primary_esrs_gateway: The primary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: str
        """

        self._primary_esrs_gateway = primary_esrs_gateway

    @property
    def secondary_esrs_gateway(self):
        """Gets the secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501

        Secondary ESRS Gateway. Used if Primary is unavailable.  # noqa: E501

        :return: The secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: str
        """
        return self._secondary_esrs_gateway

    @secondary_esrs_gateway.setter
    def secondary_esrs_gateway(self, secondary_esrs_gateway):
        """Sets the secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.

        Secondary ESRS Gateway. Used if Primary is unavailable.  # noqa: E501

        :param secondary_esrs_gateway: The secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: str
        """

        self._secondary_esrs_gateway = secondary_esrs_gateway

    @property
    def use_smtp_failover(self):
        """Gets the use_smtp_failover of this RemotesupportConnectemcConnectemc.  # noqa: E501

        Use SMPT if primary and secondary gateways are unavailable.  # noqa: E501

        :return: The use_smtp_failover of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :rtype: bool
        """
        return self._use_smtp_failover

    @use_smtp_failover.setter
    def use_smtp_failover(self, use_smtp_failover):
        """Sets the use_smtp_failover of this RemotesupportConnectemcConnectemc.

        Use SMPT if primary and secondary gateways are unavailable.  # noqa: E501

        :param use_smtp_failover: The use_smtp_failover of this RemotesupportConnectemcConnectemc.  # noqa: E501
        :type: bool
        """

        self._use_smtp_failover = use_smtp_failover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemotesupportConnectemcConnectemc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
