# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 10
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterNodeStatusCpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'overtemp': 'str',
        'proc': 'str',
        'speed_limit': 'str'
    }

    attribute_map = {
        'model': 'model',
        'overtemp': 'overtemp',
        'proc': 'proc',
        'speed_limit': 'speed_limit'
    }

    def __init__(self, model=None, overtemp=None, proc=None, speed_limit=None):  # noqa: E501
        """ClusterNodeStatusCpu - a model defined in Swagger"""  # noqa: E501

        self._model = None
        self._overtemp = None
        self._proc = None
        self._speed_limit = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if overtemp is not None:
            self.overtemp = overtemp
        if proc is not None:
            self.proc = proc
        if speed_limit is not None:
            self.speed_limit = speed_limit

    @property
    def model(self):
        """Gets the model of this ClusterNodeStatusCpu.  # noqa: E501

        Manufacturer model description of this CPU.  # noqa: E501

        :return: The model of this ClusterNodeStatusCpu.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClusterNodeStatusCpu.

        Manufacturer model description of this CPU.  # noqa: E501

        :param model: The model of this ClusterNodeStatusCpu.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) > 255:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `255`")  # noqa: E501
        if model is not None and len(model) < 0:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `0`")  # noqa: E501

        self._model = model

    @property
    def overtemp(self):
        """Gets the overtemp of this ClusterNodeStatusCpu.  # noqa: E501

        CPU overtemp state.  # noqa: E501

        :return: The overtemp of this ClusterNodeStatusCpu.  # noqa: E501
        :rtype: str
        """
        return self._overtemp

    @overtemp.setter
    def overtemp(self, overtemp):
        """Sets the overtemp of this ClusterNodeStatusCpu.

        CPU overtemp state.  # noqa: E501

        :param overtemp: The overtemp of this ClusterNodeStatusCpu.  # noqa: E501
        :type: str
        """
        if overtemp is not None and len(overtemp) > 255:
            raise ValueError("Invalid value for `overtemp`, length must be less than or equal to `255`")  # noqa: E501
        if overtemp is not None and len(overtemp) < 0:
            raise ValueError("Invalid value for `overtemp`, length must be greater than or equal to `0`")  # noqa: E501

        self._overtemp = overtemp

    @property
    def proc(self):
        """Gets the proc of this ClusterNodeStatusCpu.  # noqa: E501

        Type of processor and core of this CPU.  # noqa: E501

        :return: The proc of this ClusterNodeStatusCpu.  # noqa: E501
        :rtype: str
        """
        return self._proc

    @proc.setter
    def proc(self, proc):
        """Sets the proc of this ClusterNodeStatusCpu.

        Type of processor and core of this CPU.  # noqa: E501

        :param proc: The proc of this ClusterNodeStatusCpu.  # noqa: E501
        :type: str
        """
        if proc is not None and len(proc) > 255:
            raise ValueError("Invalid value for `proc`, length must be less than or equal to `255`")  # noqa: E501
        if proc is not None and len(proc) < 0:
            raise ValueError("Invalid value for `proc`, length must be greater than or equal to `0`")  # noqa: E501

        self._proc = proc

    @property
    def speed_limit(self):
        """Gets the speed_limit of this ClusterNodeStatusCpu.  # noqa: E501

        CPU throttling (expressed as a percentage).  # noqa: E501

        :return: The speed_limit of this ClusterNodeStatusCpu.  # noqa: E501
        :rtype: str
        """
        return self._speed_limit

    @speed_limit.setter
    def speed_limit(self, speed_limit):
        """Sets the speed_limit of this ClusterNodeStatusCpu.

        CPU throttling (expressed as a percentage).  # noqa: E501

        :param speed_limit: The speed_limit of this ClusterNodeStatusCpu.  # noqa: E501
        :type: str
        """
        if speed_limit is not None and len(speed_limit) > 255:
            raise ValueError("Invalid value for `speed_limit`, length must be less than or equal to `255`")  # noqa: E501
        if speed_limit is not None and len(speed_limit) < 0:
            raise ValueError("Invalid value for `speed_limit`, length must be greater than or equal to `0`")  # noqa: E501

        self._speed_limit = speed_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodeStatusCpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
