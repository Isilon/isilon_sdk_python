# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 12
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isilon_sdk.v9_2_0.models.sed_status_status_item import SedStatusStatusItem  # noqa: F401,E501


class SedStatusStatusItemExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_msg': 'str',
        'location': 'str',
        'remote_key_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'error_msg': 'error_msg',
        'location': 'location',
        'remote_key_id': 'remote_key_id',
        'status': 'status'
    }

    def __init__(self, error_msg=None, location=None, remote_key_id=None, status=None):  # noqa: E501
        """SedStatusStatusItemExtended - a model defined in Swagger"""  # noqa: E501

        self._error_msg = None
        self._location = None
        self._remote_key_id = None
        self._status = None
        self.discriminator = None

        self.error_msg = error_msg
        self.location = location
        self.remote_key_id = remote_key_id
        self.status = status

    @property
    def error_msg(self):
        """Gets the error_msg of this SedStatusStatusItemExtended.  # noqa: E501

        information of the error if there is an error status. Empty if no error occurred.  # noqa: E501

        :return: The error_msg of this SedStatusStatusItemExtended.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this SedStatusStatusItemExtended.

        information of the error if there is an error status. Empty if no error occurred.  # noqa: E501

        :param error_msg: The error_msg of this SedStatusStatusItemExtended.  # noqa: E501
        :type: str
        """
        if error_msg is None:
            raise ValueError("Invalid value for `error_msg`, must not be `None`")  # noqa: E501
        if error_msg is not None and len(error_msg) > 255:
            raise ValueError("Invalid value for `error_msg`, length must be less than or equal to `255`")  # noqa: E501
        if error_msg is not None and len(error_msg) < 0:
            raise ValueError("Invalid value for `error_msg`, length must be greater than or equal to `0`")  # noqa: E501

        self._error_msg = error_msg

    @property
    def location(self):
        """Gets the location of this SedStatusStatusItemExtended.  # noqa: E501

        Current location of the key.  # noqa: E501

        :return: The location of this SedStatusStatusItemExtended.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SedStatusStatusItemExtended.

        Current location of the key.  # noqa: E501

        :param location: The location of this SedStatusStatusItemExtended.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if location is not None and len(location) > 255:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `255`")  # noqa: E501
        if location is not None and len(location) < 1:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `1`")  # noqa: E501

        self._location = location

    @property
    def remote_key_id(self):
        """Gets the remote_key_id of this SedStatusStatusItemExtended.  # noqa: E501

        Key ID in the remote KMIP server.  # noqa: E501

        :return: The remote_key_id of this SedStatusStatusItemExtended.  # noqa: E501
        :rtype: str
        """
        return self._remote_key_id

    @remote_key_id.setter
    def remote_key_id(self, remote_key_id):
        """Sets the remote_key_id of this SedStatusStatusItemExtended.

        Key ID in the remote KMIP server.  # noqa: E501

        :param remote_key_id: The remote_key_id of this SedStatusStatusItemExtended.  # noqa: E501
        :type: str
        """
        if remote_key_id is None:
            raise ValueError("Invalid value for `remote_key_id`, must not be `None`")  # noqa: E501
        if remote_key_id is not None and len(remote_key_id) > 255:
            raise ValueError("Invalid value for `remote_key_id`, length must be less than or equal to `255`")  # noqa: E501
        if remote_key_id is not None and len(remote_key_id) < 1:
            raise ValueError("Invalid value for `remote_key_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._remote_key_id = remote_key_id

    @property
    def status(self):
        """Gets the status of this SedStatusStatusItemExtended.  # noqa: E501

        Current key migration status. If no SEDs are avaiable and KMIP is not supported, it will show OFFLINE status.  # noqa: E501

        :return: The status of this SedStatusStatusItemExtended.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SedStatusStatusItemExtended.

        Current key migration status. If no SEDs are avaiable and KMIP is not supported, it will show OFFLINE status.  # noqa: E501

        :param status: The status of this SedStatusStatusItemExtended.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SedStatusStatusItemExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
