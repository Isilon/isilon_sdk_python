# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobJobEsrsmftdownloadParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checksum': 'str',
        'file': 'str',
        'path': 'str',
        'size': 'int'
    }

    attribute_map = {
        'checksum': 'checksum',
        'file': 'file',
        'path': 'path',
        'size': 'size'
    }

    def __init__(self, checksum=None, file=None, path=None, size=None):  # noqa: E501
        """JobJobEsrsmftdownloadParams - a model defined in Swagger"""  # noqa: E501

        self._checksum = None
        self._file = None
        self._path = None
        self._size = None
        self.discriminator = None

        self.checksum = checksum
        self.file = file
        self.path = path
        self.size = size

    @property
    def checksum(self):
        """Gets the checksum of this JobJobEsrsmftdownloadParams.  # noqa: E501

        File Checksum - SHA-256  # noqa: E501

        :return: The checksum of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this JobJobEsrsmftdownloadParams.

        File Checksum - SHA-256  # noqa: E501

        :param checksum: The checksum of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :type: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")  # noqa: E501
        if checksum is not None and len(checksum) > 64:
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `64`")  # noqa: E501
        if checksum is not None and len(checksum) < 64:
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `64`")  # noqa: E501
        if checksum is not None and not re.search('^[a-f0-9A-F]{64}', checksum):  # noqa: E501
            raise ValueError("Invalid value for `checksum`, must be a follow pattern or equal to `/^[a-f0-9A-F]{64}/`")  # noqa: E501

        self._checksum = checksum

    @property
    def file(self):
        """Gets the file of this JobJobEsrsmftdownloadParams.  # noqa: E501

        File to download.  # noqa: E501

        :return: The file of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this JobJobEsrsmftdownloadParams.

        File to download.  # noqa: E501

        :param file: The file of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501
        if file is not None and len(file) > 4096:
            raise ValueError("Invalid value for `file`, length must be less than or equal to `4096`")  # noqa: E501
        if file is not None and len(file) < 1:
            raise ValueError("Invalid value for `file`, length must be greater than or equal to `1`")  # noqa: E501

        self._file = file

    @property
    def path(self):
        """Gets the path of this JobJobEsrsmftdownloadParams.  # noqa: E501

        Path to write downloaded file. Required to be on /ifs  # noqa: E501

        :return: The path of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this JobJobEsrsmftdownloadParams.

        Path to write downloaded file. Required to be on /ifs  # noqa: E501

        :param path: The path of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if path is not None and len(path) > 4096:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `4096`")  # noqa: E501
        if path is not None and len(path) < 4:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `4`")  # noqa: E501
        if path is not None and not re.search('^\/ifs', path):  # noqa: E501
            raise ValueError("Invalid value for `path`, must be a follow pattern or equal to `/^\/ifs/`")  # noqa: E501

        self._path = path

    @property
    def size(self):
        """Gets the size of this JobJobEsrsmftdownloadParams.  # noqa: E501

        File Size  # noqa: E501

        :return: The size of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JobJobEsrsmftdownloadParams.

        File Size  # noqa: E501

        :param size: The size of this JobJobEsrsmftdownloadParams.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501
        if size is not None and size > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if size is not None and size < 0:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobJobEsrsmftdownloadParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
