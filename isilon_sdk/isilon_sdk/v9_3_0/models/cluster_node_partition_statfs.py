# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterNodePartitionStatfs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'f_bavail': 'int',
        'f_bfree': 'int',
        'f_blocks': 'int',
        'f_bsize': 'int',
        'f_ffree': 'int',
        'f_files': 'int',
        'f_flags': 'int',
        'f_fstypename': 'str',
        'f_iosize': 'int',
        'f_mntfromname': 'str',
        'f_mntonname': 'str',
        'f_namemax': 'int',
        'f_owner': 'int',
        'f_type': 'int',
        'f_version': 'int'
    }

    attribute_map = {
        'f_bavail': 'f_bavail',
        'f_bfree': 'f_bfree',
        'f_blocks': 'f_blocks',
        'f_bsize': 'f_bsize',
        'f_ffree': 'f_ffree',
        'f_files': 'f_files',
        'f_flags': 'f_flags',
        'f_fstypename': 'f_fstypename',
        'f_iosize': 'f_iosize',
        'f_mntfromname': 'f_mntfromname',
        'f_mntonname': 'f_mntonname',
        'f_namemax': 'f_namemax',
        'f_owner': 'f_owner',
        'f_type': 'f_type',
        'f_version': 'f_version'
    }

    def __init__(self, f_bavail=None, f_bfree=None, f_blocks=None, f_bsize=None, f_ffree=None, f_files=None, f_flags=None, f_fstypename=None, f_iosize=None, f_mntfromname=None, f_mntonname=None, f_namemax=None, f_owner=None, f_type=None, f_version=None):  # noqa: E501
        """ClusterNodePartitionStatfs - a model defined in Swagger"""  # noqa: E501

        self._f_bavail = None
        self._f_bfree = None
        self._f_blocks = None
        self._f_bsize = None
        self._f_ffree = None
        self._f_files = None
        self._f_flags = None
        self._f_fstypename = None
        self._f_iosize = None
        self._f_mntfromname = None
        self._f_mntonname = None
        self._f_namemax = None
        self._f_owner = None
        self._f_type = None
        self._f_version = None
        self.discriminator = None

        if f_bavail is not None:
            self.f_bavail = f_bavail
        if f_bfree is not None:
            self.f_bfree = f_bfree
        if f_blocks is not None:
            self.f_blocks = f_blocks
        if f_bsize is not None:
            self.f_bsize = f_bsize
        if f_ffree is not None:
            self.f_ffree = f_ffree
        if f_files is not None:
            self.f_files = f_files
        if f_flags is not None:
            self.f_flags = f_flags
        if f_fstypename is not None:
            self.f_fstypename = f_fstypename
        if f_iosize is not None:
            self.f_iosize = f_iosize
        if f_mntfromname is not None:
            self.f_mntfromname = f_mntfromname
        if f_mntonname is not None:
            self.f_mntonname = f_mntonname
        if f_namemax is not None:
            self.f_namemax = f_namemax
        if f_owner is not None:
            self.f_owner = f_owner
        if f_type is not None:
            self.f_type = f_type
        if f_version is not None:
            self.f_version = f_version

    @property
    def f_bavail(self):
        """Gets the f_bavail of this ClusterNodePartitionStatfs.  # noqa: E501

        Free blocks available to non-superuser on this partition.  # noqa: E501

        :return: The f_bavail of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_bavail

    @f_bavail.setter
    def f_bavail(self, f_bavail):
        """Sets the f_bavail of this ClusterNodePartitionStatfs.

        Free blocks available to non-superuser on this partition.  # noqa: E501

        :param f_bavail: The f_bavail of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_bavail is not None and f_bavail > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_bavail`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_bavail is not None and f_bavail < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `f_bavail`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._f_bavail = f_bavail

    @property
    def f_bfree(self):
        """Gets the f_bfree of this ClusterNodePartitionStatfs.  # noqa: E501

        Free blocks on this partition.  # noqa: E501

        :return: The f_bfree of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_bfree

    @f_bfree.setter
    def f_bfree(self, f_bfree):
        """Sets the f_bfree of this ClusterNodePartitionStatfs.

        Free blocks on this partition.  # noqa: E501

        :param f_bfree: The f_bfree of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_bfree is not None and f_bfree > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_bfree`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_bfree is not None and f_bfree < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_bfree`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_bfree = f_bfree

    @property
    def f_blocks(self):
        """Gets the f_blocks of this ClusterNodePartitionStatfs.  # noqa: E501

        Total data blocks on this partition.  # noqa: E501

        :return: The f_blocks of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_blocks

    @f_blocks.setter
    def f_blocks(self, f_blocks):
        """Sets the f_blocks of this ClusterNodePartitionStatfs.

        Total data blocks on this partition.  # noqa: E501

        :param f_blocks: The f_blocks of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_blocks is not None and f_blocks > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_blocks`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_blocks is not None and f_blocks < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_blocks`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_blocks = f_blocks

    @property
    def f_bsize(self):
        """Gets the f_bsize of this ClusterNodePartitionStatfs.  # noqa: E501

        Filesystem fragment size; block size in OneFS.  # noqa: E501

        :return: The f_bsize of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_bsize

    @f_bsize.setter
    def f_bsize(self, f_bsize):
        """Sets the f_bsize of this ClusterNodePartitionStatfs.

        Filesystem fragment size; block size in OneFS.  # noqa: E501

        :param f_bsize: The f_bsize of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_bsize is not None and f_bsize > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_bsize`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_bsize is not None and f_bsize < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_bsize`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_bsize = f_bsize

    @property
    def f_ffree(self):
        """Gets the f_ffree of this ClusterNodePartitionStatfs.  # noqa: E501

        Free file nodes avail to non-superuser.  # noqa: E501

        :return: The f_ffree of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_ffree

    @f_ffree.setter
    def f_ffree(self, f_ffree):
        """Sets the f_ffree of this ClusterNodePartitionStatfs.

        Free file nodes avail to non-superuser.  # noqa: E501

        :param f_ffree: The f_ffree of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_ffree is not None and f_ffree > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_ffree`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_ffree is not None and f_ffree < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_ffree`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_ffree = f_ffree

    @property
    def f_files(self):
        """Gets the f_files of this ClusterNodePartitionStatfs.  # noqa: E501

        Total file nodes in filesystem.  # noqa: E501

        :return: The f_files of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_files

    @f_files.setter
    def f_files(self, f_files):
        """Sets the f_files of this ClusterNodePartitionStatfs.

        Total file nodes in filesystem.  # noqa: E501

        :param f_files: The f_files of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_files is not None and f_files > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_files`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_files is not None and f_files < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_files`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_files = f_files

    @property
    def f_flags(self):
        """Gets the f_flags of this ClusterNodePartitionStatfs.  # noqa: E501

        Mount exported flags.  # noqa: E501

        :return: The f_flags of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_flags

    @f_flags.setter
    def f_flags(self, f_flags):
        """Sets the f_flags of this ClusterNodePartitionStatfs.

        Mount exported flags.  # noqa: E501

        :param f_flags: The f_flags of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_flags is not None and f_flags > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_flags`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_flags is not None and f_flags < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_flags`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_flags = f_flags

    @property
    def f_fstypename(self):
        """Gets the f_fstypename of this ClusterNodePartitionStatfs.  # noqa: E501

        File system type name.  # noqa: E501

        :return: The f_fstypename of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: str
        """
        return self._f_fstypename

    @f_fstypename.setter
    def f_fstypename(self, f_fstypename):
        """Sets the f_fstypename of this ClusterNodePartitionStatfs.

        File system type name.  # noqa: E501

        :param f_fstypename: The f_fstypename of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: str
        """
        if f_fstypename is not None and len(f_fstypename) > 255:
            raise ValueError("Invalid value for `f_fstypename`, length must be less than or equal to `255`")  # noqa: E501
        if f_fstypename is not None and len(f_fstypename) < 0:
            raise ValueError("Invalid value for `f_fstypename`, length must be greater than or equal to `0`")  # noqa: E501

        self._f_fstypename = f_fstypename

    @property
    def f_iosize(self):
        """Gets the f_iosize of this ClusterNodePartitionStatfs.  # noqa: E501

        Optimal transfer block size.  # noqa: E501

        :return: The f_iosize of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_iosize

    @f_iosize.setter
    def f_iosize(self, f_iosize):
        """Sets the f_iosize of this ClusterNodePartitionStatfs.

        Optimal transfer block size.  # noqa: E501

        :param f_iosize: The f_iosize of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_iosize is not None and f_iosize > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_iosize`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_iosize is not None and f_iosize < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_iosize`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_iosize = f_iosize

    @property
    def f_mntfromname(self):
        """Gets the f_mntfromname of this ClusterNodePartitionStatfs.  # noqa: E501

        Names of devices this partition is mounted from.  # noqa: E501

        :return: The f_mntfromname of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: str
        """
        return self._f_mntfromname

    @f_mntfromname.setter
    def f_mntfromname(self, f_mntfromname):
        """Sets the f_mntfromname of this ClusterNodePartitionStatfs.

        Names of devices this partition is mounted from.  # noqa: E501

        :param f_mntfromname: The f_mntfromname of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: str
        """
        if f_mntfromname is not None and len(f_mntfromname) > 255:
            raise ValueError("Invalid value for `f_mntfromname`, length must be less than or equal to `255`")  # noqa: E501
        if f_mntfromname is not None and len(f_mntfromname) < 0:
            raise ValueError("Invalid value for `f_mntfromname`, length must be greater than or equal to `0`")  # noqa: E501

        self._f_mntfromname = f_mntfromname

    @property
    def f_mntonname(self):
        """Gets the f_mntonname of this ClusterNodePartitionStatfs.  # noqa: E501

        Directory this partition is mounted to.  # noqa: E501

        :return: The f_mntonname of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: str
        """
        return self._f_mntonname

    @f_mntonname.setter
    def f_mntonname(self, f_mntonname):
        """Sets the f_mntonname of this ClusterNodePartitionStatfs.

        Directory this partition is mounted to.  # noqa: E501

        :param f_mntonname: The f_mntonname of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: str
        """
        if f_mntonname is not None and len(f_mntonname) > 255:
            raise ValueError("Invalid value for `f_mntonname`, length must be less than or equal to `255`")  # noqa: E501
        if f_mntonname is not None and len(f_mntonname) < 0:
            raise ValueError("Invalid value for `f_mntonname`, length must be greater than or equal to `0`")  # noqa: E501

        self._f_mntonname = f_mntonname

    @property
    def f_namemax(self):
        """Gets the f_namemax of this ClusterNodePartitionStatfs.  # noqa: E501

        Maximum filename length.  # noqa: E501

        :return: The f_namemax of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_namemax

    @f_namemax.setter
    def f_namemax(self, f_namemax):
        """Sets the f_namemax of this ClusterNodePartitionStatfs.

        Maximum filename length.  # noqa: E501

        :param f_namemax: The f_namemax of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_namemax is not None and f_namemax > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_namemax`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_namemax is not None and f_namemax < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_namemax`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_namemax = f_namemax

    @property
    def f_owner(self):
        """Gets the f_owner of this ClusterNodePartitionStatfs.  # noqa: E501

        UID of user that mounted the filesystem.  # noqa: E501

        :return: The f_owner of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_owner

    @f_owner.setter
    def f_owner(self, f_owner):
        """Sets the f_owner of this ClusterNodePartitionStatfs.

        UID of user that mounted the filesystem.  # noqa: E501

        :param f_owner: The f_owner of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_owner is not None and f_owner > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_owner`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_owner is not None and f_owner < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_owner`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_owner = f_owner

    @property
    def f_type(self):
        """Gets the f_type of this ClusterNodePartitionStatfs.  # noqa: E501

        Type of filesystem.  # noqa: E501

        :return: The f_type of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_type

    @f_type.setter
    def f_type(self, f_type):
        """Sets the f_type of this ClusterNodePartitionStatfs.

        Type of filesystem.  # noqa: E501

        :param f_type: The f_type of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_type is not None and f_type > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_type`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_type is not None and f_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_type = f_type

    @property
    def f_version(self):
        """Gets the f_version of this ClusterNodePartitionStatfs.  # noqa: E501

        statfs() structure version number.  # noqa: E501

        :return: The f_version of this ClusterNodePartitionStatfs.  # noqa: E501
        :rtype: int
        """
        return self._f_version

    @f_version.setter
    def f_version(self, f_version):
        """Sets the f_version of this ClusterNodePartitionStatfs.

        statfs() structure version number.  # noqa: E501

        :param f_version: The f_version of this ClusterNodePartitionStatfs.  # noqa: E501
        :type: int
        """
        if f_version is not None and f_version > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `f_version`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if f_version is not None and f_version < 0:  # noqa: E501
            raise ValueError("Invalid value for `f_version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._f_version = f_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodePartitionStatfs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
