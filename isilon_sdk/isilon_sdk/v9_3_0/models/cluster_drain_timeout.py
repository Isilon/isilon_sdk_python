# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterDrainTimeout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_timeout': 'int',
        'drain_timeout': 'int'
    }

    attribute_map = {
        'alert_timeout': 'alert_timeout',
        'drain_timeout': 'drain_timeout'
    }

    def __init__(self, alert_timeout=None, drain_timeout=None):  # noqa: E501
        """ClusterDrainTimeout - a model defined in Swagger"""  # noqa: E501

        self._alert_timeout = None
        self._drain_timeout = None
        self.discriminator = None

        if alert_timeout is not None:
            self.alert_timeout = alert_timeout
        if drain_timeout is not None:
            self.drain_timeout = drain_timeout

    @property
    def alert_timeout(self):
        """Gets the alert_timeout of this ClusterDrainTimeout.  # noqa: E501

        The duration in seconds after drain begins that an alert will be raised. An alert timeout must be set to a smaller value than the drain timeout to be used. If not specified, an alert will not be raised (legacy behavior).  # noqa: E501

        :return: The alert_timeout of this ClusterDrainTimeout.  # noqa: E501
        :rtype: int
        """
        return self._alert_timeout

    @alert_timeout.setter
    def alert_timeout(self, alert_timeout):
        """Sets the alert_timeout of this ClusterDrainTimeout.

        The duration in seconds after drain begins that an alert will be raised. An alert timeout must be set to a smaller value than the drain timeout to be used. If not specified, an alert will not be raised (legacy behavior).  # noqa: E501

        :param alert_timeout: The alert_timeout of this ClusterDrainTimeout.  # noqa: E501
        :type: int
        """
        if alert_timeout is not None and alert_timeout > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `alert_timeout`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if alert_timeout is not None and alert_timeout < -1:  # noqa: E501
            raise ValueError("Invalid value for `alert_timeout`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._alert_timeout = alert_timeout

    @property
    def drain_timeout(self):
        """Gets the drain_timeout of this ClusterDrainTimeout.  # noqa: E501

        The duration in seconds that upgrade waits for all SMB clients to disconnect from a node before rebooting it. A value of 0 means wait indefinitely. If not specified, upgrade proceeds with reboots regardless of SMB client connections (legacy behavior).  # noqa: E501

        :return: The drain_timeout of this ClusterDrainTimeout.  # noqa: E501
        :rtype: int
        """
        return self._drain_timeout

    @drain_timeout.setter
    def drain_timeout(self, drain_timeout):
        """Sets the drain_timeout of this ClusterDrainTimeout.

        The duration in seconds that upgrade waits for all SMB clients to disconnect from a node before rebooting it. A value of 0 means wait indefinitely. If not specified, upgrade proceeds with reboots regardless of SMB client connections (legacy behavior).  # noqa: E501

        :param drain_timeout: The drain_timeout of this ClusterDrainTimeout.  # noqa: E501
        :type: int
        """
        if drain_timeout is not None and drain_timeout > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `drain_timeout`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if drain_timeout is not None and drain_timeout < -1:  # noqa: E501
            raise ValueError("Invalid value for `drain_timeout`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._drain_timeout = drain_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterDrainTimeout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
