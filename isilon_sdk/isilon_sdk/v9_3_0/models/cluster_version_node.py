# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterVersionNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build': 'str',
        'error': 'str',
        'id': 'int',
        'lnn': 'int',
        'release': 'str',
        'revision': 'str',
        'status': 'int',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'build': 'build',
        'error': 'error',
        'id': 'id',
        'lnn': 'lnn',
        'release': 'release',
        'revision': 'revision',
        'status': 'status',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, build=None, error=None, id=None, lnn=None, release=None, revision=None, status=None, type=None, version=None):  # noqa: E501
        """ClusterVersionNode - a model defined in Swagger"""  # noqa: E501

        self._build = None
        self._error = None
        self._id = None
        self._lnn = None
        self._release = None
        self._revision = None
        self._status = None
        self._type = None
        self._version = None
        self.discriminator = None

        self.build = build
        if error is not None:
            self.error = error
        if id is not None:
            self.id = id
        if lnn is not None:
            self.lnn = lnn
        self.release = release
        self.revision = revision
        if status is not None:
            self.status = status
        self.type = type
        self.version = version

    @property
    def build(self):
        """Gets the build of this ClusterVersionNode.  # noqa: E501

        OneFS build string.  # noqa: E501

        :return: The build of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ClusterVersionNode.

        OneFS build string.  # noqa: E501

        :param build: The build of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if build is None:
            raise ValueError("Invalid value for `build`, must not be `None`")  # noqa: E501

        self._build = build

    @property
    def error(self):
        """Gets the error of this ClusterVersionNode.  # noqa: E501

        Error message, if the HTTP status returned from this node was not 200.  # noqa: E501

        :return: The error of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ClusterVersionNode.

        Error message, if the HTTP status returned from this node was not 200.  # noqa: E501

        :param error: The error of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if error is not None and len(error) > 8192:
            raise ValueError("Invalid value for `error`, length must be less than or equal to `8192`")  # noqa: E501
        if error is not None and len(error) < 0:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `0`")  # noqa: E501

        self._error = error

    @property
    def id(self):
        """Gets the id of this ClusterVersionNode.  # noqa: E501

        Node ID (Device Number) of a node.  # noqa: E501

        :return: The id of this ClusterVersionNode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterVersionNode.

        Node ID (Device Number) of a node.  # noqa: E501

        :param id: The id of this ClusterVersionNode.  # noqa: E501
        :type: int
        """
        if id is not None and id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def lnn(self):
        """Gets the lnn of this ClusterVersionNode.  # noqa: E501

        Logical Node Number (LNN) of a node.  # noqa: E501

        :return: The lnn of this ClusterVersionNode.  # noqa: E501
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """Sets the lnn of this ClusterVersionNode.

        Logical Node Number (LNN) of a node.  # noqa: E501

        :param lnn: The lnn of this ClusterVersionNode.  # noqa: E501
        :type: int
        """
        if lnn is not None and lnn > 65535:  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value less than or equal to `65535`")  # noqa: E501
        if lnn is not None and lnn < 1:  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lnn = lnn

    @property
    def release(self):
        """Gets the release of this ClusterVersionNode.  # noqa: E501

        Kernel release number.  # noqa: E501

        :return: The release of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this ClusterVersionNode.

        Kernel release number.  # noqa: E501

        :param release: The release of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if release is None:
            raise ValueError("Invalid value for `release`, must not be `None`")  # noqa: E501

        self._release = release

    @property
    def revision(self):
        """Gets the revision of this ClusterVersionNode.  # noqa: E501

        OneFS build number.  # noqa: E501

        :return: The revision of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ClusterVersionNode.

        OneFS build number.  # noqa: E501

        :param revision: The revision of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def status(self):
        """Gets the status of this ClusterVersionNode.  # noqa: E501

        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.  # noqa: E501

        :return: The status of this ClusterVersionNode.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterVersionNode.

        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.  # noqa: E501

        :param status: The status of this ClusterVersionNode.  # noqa: E501
        :type: int
        """
        if status is not None and status > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if status is not None and status < 0:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this ClusterVersionNode.  # noqa: E501

        Kernel release type.  # noqa: E501

        :return: The type of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterVersionNode.

        Kernel release type.  # noqa: E501

        :param type: The type of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this ClusterVersionNode.  # noqa: E501

        Kernel full version information.  # noqa: E501

        :return: The version of this ClusterVersionNode.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClusterVersionNode.

        Kernel full version information.  # noqa: E501

        :param version: The version of this ClusterVersionNode.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterVersionNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
