# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthPrivilege(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'parent_id': 'str',
        'permission': 'str',
        'privilegelevel': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'parent_id': 'parent_id',
        'permission': 'permission',
        'privilegelevel': 'privilegelevel',
        'uri': 'uri'
    }

    def __init__(self, category=None, description=None, id=None, name=None, parent_id=None, permission=None, privilegelevel=None, uri=None):  # noqa: E501
        """AuthPrivilege - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._description = None
        self._id = None
        self._name = None
        self._parent_id = None
        self._permission = None
        self._privilegelevel = None
        self._uri = None
        self.discriminator = None

        self.category = category
        self.description = description
        self.id = id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if permission is not None:
            self.permission = permission
        if privilegelevel is not None:
            self.privilegelevel = privilegelevel
        if uri is not None:
            self.uri = uri

    @property
    def category(self):
        """Gets the category of this AuthPrivilege.  # noqa: E501

        Specifies the general categorization of the privilege.  # noqa: E501

        :return: The category of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AuthPrivilege.

        Specifies the general categorization of the privilege.  # noqa: E501

        :param category: The category of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        if category is not None and len(category) > 255:
            raise ValueError("Invalid value for `category`, length must be less than or equal to `255`")  # noqa: E501
        if category is not None and len(category) < 0:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `0`")  # noqa: E501

        self._category = category

    @property
    def description(self):
        """Gets the description of this AuthPrivilege.  # noqa: E501

        Specifies a short description of the privilege.  # noqa: E501

        :return: The description of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthPrivilege.

        Specifies a short description of the privilege.  # noqa: E501

        :param description: The description of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this AuthPrivilege.  # noqa: E501

        Specifies the ID of the privilege.  # noqa: E501

        :return: The id of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthPrivilege.

        Specifies the ID of the privilege.  # noqa: E501

        :param id: The id of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuthPrivilege.  # noqa: E501

        Specifies the name of the privilege.  # noqa: E501

        :return: The name of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthPrivilege.

        Specifies the name of the privilege.  # noqa: E501

        :param name: The name of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this AuthPrivilege.  # noqa: E501

        Specifies the parent ID of the privilege.  # noqa: E501

        :return: The parent_id of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AuthPrivilege.

        Specifies the parent ID of the privilege.  # noqa: E501

        :param parent_id: The parent_id of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if parent_id is not None and len(parent_id) > 255:
            raise ValueError("Invalid value for `parent_id`, length must be less than or equal to `255`")  # noqa: E501
        if parent_id is not None and len(parent_id) < 0:
            raise ValueError("Invalid value for `parent_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def permission(self):
        """Gets the permission of this AuthPrivilege.  # noqa: E501

        Permissions the privilege has r=read , x=read-execute, w=read-execute-write.  # noqa: E501

        :return: The permission of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AuthPrivilege.

        Permissions the privilege has r=read , x=read-execute, w=read-execute-write.  # noqa: E501

        :param permission: The permission of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        allowed_values = ["r", "w", "x"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"  # noqa: E501
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def privilegelevel(self):
        """Gets the privilegelevel of this AuthPrivilege.  # noqa: E501

        Specifies the level of the privilege.  # noqa: E501

        :return: The privilegelevel of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._privilegelevel

    @privilegelevel.setter
    def privilegelevel(self, privilegelevel):
        """Sets the privilegelevel of this AuthPrivilege.

        Specifies the level of the privilege.  # noqa: E501

        :param privilegelevel: The privilegelevel of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if privilegelevel is not None and len(privilegelevel) > 255:
            raise ValueError("Invalid value for `privilegelevel`, length must be less than or equal to `255`")  # noqa: E501
        if privilegelevel is not None and len(privilegelevel) < 0:
            raise ValueError("Invalid value for `privilegelevel`, length must be greater than or equal to `0`")  # noqa: E501

        self._privilegelevel = privilegelevel

    @property
    def uri(self):
        """Gets the uri of this AuthPrivilege.  # noqa: E501

        Specifies the associated uri for the privilege.  # noqa: E501

        :return: The uri of this AuthPrivilege.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AuthPrivilege.

        Specifies the associated uri for the privilege.  # noqa: E501

        :param uri: The uri of this AuthPrivilege.  # noqa: E501
        :type: str
        """
        if uri is not None and len(uri) > 2048:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `2048`")  # noqa: E501
        if uri is not None and len(uri) < 0:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `0`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthPrivilege):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
