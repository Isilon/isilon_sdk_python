# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmbSettingsZoneSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_based_share_enum': 'bool',
        'enable_security_signatures': 'bool',
        'reject_unencrypted_access': 'bool',
        'require_security_signatures': 'bool',
        'server_side_copy': 'bool',
        'support_multichannel': 'bool',
        'support_smb2': 'bool',
        'support_smb3_encryption': 'bool'
    }

    attribute_map = {
        'access_based_share_enum': 'access_based_share_enum',
        'enable_security_signatures': 'enable_security_signatures',
        'reject_unencrypted_access': 'reject_unencrypted_access',
        'require_security_signatures': 'require_security_signatures',
        'server_side_copy': 'server_side_copy',
        'support_multichannel': 'support_multichannel',
        'support_smb2': 'support_smb2',
        'support_smb3_encryption': 'support_smb3_encryption'
    }

    def __init__(self, access_based_share_enum=None, enable_security_signatures=None, reject_unencrypted_access=None, require_security_signatures=None, server_side_copy=None, support_multichannel=None, support_smb2=None, support_smb3_encryption=None):  # noqa: E501
        """SmbSettingsZoneSettings - a model defined in Swagger"""  # noqa: E501

        self._access_based_share_enum = None
        self._enable_security_signatures = None
        self._reject_unencrypted_access = None
        self._require_security_signatures = None
        self._server_side_copy = None
        self._support_multichannel = None
        self._support_smb2 = None
        self._support_smb3_encryption = None
        self.discriminator = None

        if access_based_share_enum is not None:
            self.access_based_share_enum = access_based_share_enum
        if enable_security_signatures is not None:
            self.enable_security_signatures = enable_security_signatures
        if reject_unencrypted_access is not None:
            self.reject_unencrypted_access = reject_unencrypted_access
        if require_security_signatures is not None:
            self.require_security_signatures = require_security_signatures
        if server_side_copy is not None:
            self.server_side_copy = server_side_copy
        if support_multichannel is not None:
            self.support_multichannel = support_multichannel
        if support_smb2 is not None:
            self.support_smb2 = support_smb2
        if support_smb3_encryption is not None:
            self.support_smb3_encryption = support_smb3_encryption

    @property
    def access_based_share_enum(self):
        """Gets the access_based_share_enum of this SmbSettingsZoneSettings.  # noqa: E501

        Only enumerate files and folders the requesting user has access to.  # noqa: E501

        :return: The access_based_share_enum of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._access_based_share_enum

    @access_based_share_enum.setter
    def access_based_share_enum(self, access_based_share_enum):
        """Sets the access_based_share_enum of this SmbSettingsZoneSettings.

        Only enumerate files and folders the requesting user has access to.  # noqa: E501

        :param access_based_share_enum: The access_based_share_enum of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._access_based_share_enum = access_based_share_enum

    @property
    def enable_security_signatures(self):
        """Gets the enable_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501

        Indicates whether the server supports signed SMB packets.  # noqa: E501

        :return: The enable_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_security_signatures

    @enable_security_signatures.setter
    def enable_security_signatures(self, enable_security_signatures):
        """Sets the enable_security_signatures of this SmbSettingsZoneSettings.

        Indicates whether the server supports signed SMB packets.  # noqa: E501

        :param enable_security_signatures: The enable_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._enable_security_signatures = enable_security_signatures

    @property
    def reject_unencrypted_access(self):
        """Gets the reject_unencrypted_access of this SmbSettingsZoneSettings.  # noqa: E501

        If SMB3 encryption is enabled, reject unencrypted access from clients.  # noqa: E501

        :return: The reject_unencrypted_access of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._reject_unencrypted_access

    @reject_unencrypted_access.setter
    def reject_unencrypted_access(self, reject_unencrypted_access):
        """Sets the reject_unencrypted_access of this SmbSettingsZoneSettings.

        If SMB3 encryption is enabled, reject unencrypted access from clients.  # noqa: E501

        :param reject_unencrypted_access: The reject_unencrypted_access of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._reject_unencrypted_access = reject_unencrypted_access

    @property
    def require_security_signatures(self):
        """Gets the require_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501

        Indicates whether the server requires signed SMB packets.  # noqa: E501

        :return: The require_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._require_security_signatures

    @require_security_signatures.setter
    def require_security_signatures(self, require_security_signatures):
        """Sets the require_security_signatures of this SmbSettingsZoneSettings.

        Indicates whether the server requires signed SMB packets.  # noqa: E501

        :param require_security_signatures: The require_security_signatures of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._require_security_signatures = require_security_signatures

    @property
    def server_side_copy(self):
        """Gets the server_side_copy of this SmbSettingsZoneSettings.  # noqa: E501

        Enable Server Side Copy.  # noqa: E501

        :return: The server_side_copy of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._server_side_copy

    @server_side_copy.setter
    def server_side_copy(self, server_side_copy):
        """Sets the server_side_copy of this SmbSettingsZoneSettings.

        Enable Server Side Copy.  # noqa: E501

        :param server_side_copy: The server_side_copy of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._server_side_copy = server_side_copy

    @property
    def support_multichannel(self):
        """Gets the support_multichannel of this SmbSettingsZoneSettings.  # noqa: E501

        Support multichannel.  # noqa: E501

        :return: The support_multichannel of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._support_multichannel

    @support_multichannel.setter
    def support_multichannel(self, support_multichannel):
        """Sets the support_multichannel of this SmbSettingsZoneSettings.

        Support multichannel.  # noqa: E501

        :param support_multichannel: The support_multichannel of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._support_multichannel = support_multichannel

    @property
    def support_smb2(self):
        """Gets the support_smb2 of this SmbSettingsZoneSettings.  # noqa: E501

        Support the SMB2 protocol on the server.  # noqa: E501

        :return: The support_smb2 of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._support_smb2

    @support_smb2.setter
    def support_smb2(self, support_smb2):
        """Sets the support_smb2 of this SmbSettingsZoneSettings.

        Support the SMB2 protocol on the server.  # noqa: E501

        :param support_smb2: The support_smb2 of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._support_smb2 = support_smb2

    @property
    def support_smb3_encryption(self):
        """Gets the support_smb3_encryption of this SmbSettingsZoneSettings.  # noqa: E501

        Support the SMB3 encryption on the server.  # noqa: E501

        :return: The support_smb3_encryption of this SmbSettingsZoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._support_smb3_encryption

    @support_smb3_encryption.setter
    def support_smb3_encryption(self, support_smb3_encryption):
        """Sets the support_smb3_encryption of this SmbSettingsZoneSettings.

        Support the SMB3 encryption on the server.  # noqa: E501

        :param support_smb3_encryption: The support_smb3_encryption of this SmbSettingsZoneSettings.  # noqa: E501
        :type: bool
        """

        self._support_smb3_encryption = support_smb3_encryption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbSettingsZoneSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
