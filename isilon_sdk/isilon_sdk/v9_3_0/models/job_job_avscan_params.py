# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 14
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobJobAvscanParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force_run': 'bool',
        'policy': 'str',
        'report_id': 'str',
        'update': 'bool'
    }

    attribute_map = {
        'force_run': 'force_run',
        'policy': 'policy',
        'report_id': 'report_id',
        'update': 'update'
    }

    def __init__(self, force_run=None, policy=None, report_id=None, update=None):  # noqa: E501
        """JobJobAvscanParams - a model defined in Swagger"""  # noqa: E501

        self._force_run = None
        self._policy = None
        self._report_id = None
        self._update = None
        self.discriminator = None

        if force_run is not None:
            self.force_run = force_run
        self.policy = policy
        if report_id is not None:
            self.report_id = report_id
        if update is not None:
            self.update = update

    @property
    def force_run(self):
        """Gets the force_run of this JobJobAvscanParams.  # noqa: E501

        Force files to be scanned, even if excluded by the policy.  # noqa: E501

        :return: The force_run of this JobJobAvscanParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_run

    @force_run.setter
    def force_run(self, force_run):
        """Sets the force_run of this JobJobAvscanParams.

        Force files to be scanned, even if excluded by the policy.  # noqa: E501

        :param force_run: The force_run of this JobJobAvscanParams.  # noqa: E501
        :type: bool
        """

        self._force_run = force_run

    @property
    def policy(self):
        """Gets the policy of this JobJobAvscanParams.  # noqa: E501

        The antivirus scan policy to run.  # noqa: E501

        :return: The policy of this JobJobAvscanParams.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this JobJobAvscanParams.

        The antivirus scan policy to run.  # noqa: E501

        :param policy: The policy of this JobJobAvscanParams.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        if policy is not None and len(policy) > 255:
            raise ValueError("Invalid value for `policy`, length must be less than or equal to `255`")  # noqa: E501
        if policy is not None and len(policy) < 1:
            raise ValueError("Invalid value for `policy`, length must be greater than or equal to `1`")  # noqa: E501

        self._policy = policy

    @property
    def report_id(self):
        """Gets the report_id of this JobJobAvscanParams.  # noqa: E501

        An optional report id for the scan.  # noqa: E501

        :return: The report_id of this JobJobAvscanParams.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this JobJobAvscanParams.

        An optional report id for the scan.  # noqa: E501

        :param report_id: The report_id of this JobJobAvscanParams.  # noqa: E501
        :type: str
        """
        if report_id is not None and len(report_id) > 15:
            raise ValueError("Invalid value for `report_id`, length must be less than or equal to `15`")  # noqa: E501
        if report_id is not None and len(report_id) < 1:
            raise ValueError("Invalid value for `report_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._report_id = report_id

    @property
    def update(self):
        """Gets the update of this JobJobAvscanParams.  # noqa: E501

        Update the last run time for the policy.  # noqa: E501

        :return: The update of this JobJobAvscanParams.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this JobJobAvscanParams.

        Update the last run time for the policy.  # noqa: E501

        :param update: The update of this JobJobAvscanParams.  # noqa: E501
        :type: bool
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobJobAvscanParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
